[
  {
    "file": "../docs/content/en/docs/howto/mobile/_index.md",
    "header": {
      "title": "Mobile",
      "url": "/howto/mobile/",
      "weight": "40",
      "tags": [
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nThe Mendix vision for mobile app development is that enterprises can greatly benefit from a single platform that supports the various styles of mobile app development (web, native, and hybrid) for multiple devices and provides common mobile back-end services.\n\nThe rapid evolution of standards like HTML and the wide adoption of frameworks to bridge native device functions provide an ever-richer user experience for cross-platform apps. From a logic perspective, JavaScript is powerful as a platform-independent, back-end technology even in native clients. There is a shift occurring from native languages towards JavaScript, where JavaScript is being embedded more and more in native programming languages to raise the level of code reusability across platforms.\n\n## 2 Main Documents in This Category\n\n* [Hybrid Mobile](/howto/mobile/hybrid-mobile/) – describes how to build web applications that run inside containers\n* [Native Mobile](/howto/mobile/native-mobile/) – describes how to build fully native mobile apps\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/hybrid-mobile/_index.md",
    "header": {
      "title": "Hybrid Mobile",
      "url": "/howto/mobile/hybrid-mobile/",
      "category": "Mobile",
      "weight": "2",
      "tags": [
        "mobile",
        "hybrid"
      ]
    },
    "body": "\n## 1 Introduction\n\nHybrid mobile apps are deprecated as of Mendix 9. This means that hybrid mobile apps are still supported in Mendix 9 but their usage is discouraged. Accordingly, the creation of new hybrid navigation profiles is disabled.\n\nFor more information see this [Hybrid Mobile Apps Deprecation with Mendix 9](https://www.mendix.com/blog/hybrid-mobile-apps-deprecation-with-mendix-9/) blog entry.\n\nFor hybrid mobile documentation see these Mendix 8 documents:\n\n* [Hybrid Mobile How To Documentation](/howto8/mobile/hybrid-mobile/)\n* [Hybrid Mobile Reference Guide](/refguide8/hybrid-mobile/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/hybrid-mobile/build-hybrid-apps.md",
    "header": {
      "title": "Build Hybrid Apps ",
      "url": "/howto/mobile/build-hybrid-apps/",
      "parent": "hybrid-mobile",
      "weight": "2",
      "tags": [
        "mobile",
        "hybrid"
      ]
    },
    "body": "\n## 1 Introduction\n\n{{% alert color=\"warning\" %}}\nBuilding hybrid apps in the cloud uses the PhoneGap Build service from Adobe. Unfortunately, Adobe no longer maintains this service. PhoneGap does not allow you to create  iOS 13 builds, but the Apple App Store requires builds be iOS 13 or higher. As a result, as of April 30th 2020, hybrid iOS apps built using the PhoneGap Build service are not being accepted on Apple's App Store. \n{{% /alert %}}\n\nHybrid apps are built by using Cordova to wrap a web app in a native wrapper. If you want more immersive native experiences, we recommend you build native iOS apps instead. For more information, see [How to Build Native Apps](/howto/mobile/build-native-apps/).\n\nThe documents in this section focus on building and publishing hybrid apps in the Apple and Google app stores. For more details on platform-specific installation packages see [Mobile App](/developerportal/deploy/mobileapp/) in the Developer Portal Guide.\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/hybrid-mobile/push-notifications.md",
    "header": {
      "title": "Include Push Notifications",
      "url": "/howto/mobile/push-notifications/",
      "parent": "hybrid-mobile",
      "weight": "10",
      "tags": [
        "mobile",
        "push notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nPush notifications enable your app to notify a user of events, even if the user is not actively using the app. This is a native capability available on both Android and iOS devices, and it is controlled through external services via, for example, Firebase Cloud Messaging (FCM) or Apple Push Notifications service (APNs).\n\nThe Mendix push notifications solution consists of these two parts:\n\n* [Push Notifications Connector](/appstore/modules/push-notifications/) module – this is the \"server-side\" component responsible for sending push notifications to FCM/APNs, which will in turn send the notifications to the user devices\n* **PushNotifications widget** – this resides in the hybrid mobile app and is responsible for the application's interaction with FCM/APNs (via the Push Plugin) in terms of registering the devices with these services and handling the push notifications received from them\n\nThe Mendix push notifications functionality makes it easy for developers to include push notification capabilities in their Mendix hybrid mobile apps.\n\n## 2 Prerequisites\n\nTo use push notifications, make sure you have the following:\n\n* Mendix Studio Pro from the [Marketplace](https://marketplace.mendix.com/link/studiopro/)\n* The Mendix [Push Notifications Connector](/appstore/modules/push-notifications/)\n* A mobile device (to get started, we recommend an Android device connected to your development machine via a data cable)\n\n## 3 Supported Platforms\n\n* Android 5.0 and above\n* iOS 9.0 and above\n\n## 4 GCM vs. FCM\n\nEarlier versions of the Mendix Push Notifications Connector supported Google Cloud Messaging (GCM) and APNs. Google has replaced GCM with FCM.\n\n## 5 Dependencies\n\n* Apache Commons IO: Apache 2.0\n* Jackson (core+databind+annotations): Apache 2.0\n* Google APIs Client Library for Java: Apache 2.0\n* Google HTTP Client Library for Java: Apache 2.0\n* Google OAuth Client Library for Java: Apache 2.0\n* Gson: Apache 2.0\n* Guice: Apache 2.0\n* Netty: Apache 2.0\n* Netty Tomcat Native Fork: Apache 2.0\n* Pushy: MIT\n\n## 6 Contributing\n\nFor more information on contributing to this repository, see [How to Contribute to a Mendix GitHub Repository](/howto/collaboration-requirements-management/contribute-to-a-github-repository/).\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/hybrid-mobile/setting-up-hybrid-push-notifications.md",
    "header": {
      "title": "Set Up Hybrid Push Notifications",
      "url": "/howto/mobile/setting-up-hybrid-push-notifications/",
      "parent": "hybrid-mobile",
      "weight": "9",
      "description": "Learn how to set up hybrid push notifications with PhoneGap Build.",
      "tags": [
        "mobile",
        "push notification",
        "remote",
        "push",
        "notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nIn this how to we will set up hybrid push notifications.\n\n**This how-to will teach you how to do the following:**\n\n* Customize your hybrid template to enable push notifications\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Complete [How to Set Up the Google Firebase Cloud Messaging Server](/howto/mobile/setting-up-google-firebase-cloud-messaging-server/)\n\n## 3 Building Your Mobile Application\n\nIf your app supports push notifications, you are required to set up a Firebase account for your app and include Google service description files (*google-services.json* and *GoogleService-Info.plist*) in your hybrid app.\n\nAs a result of this, Mendix hybrid apps that employ push notifications can no longer be built directly using the PhoneGap Build flow in the Mendix Developer Portal. Instead, you will need to prepare the hybrid app package locally. You can use the generated hybrid app package to build your Android and iOS apps locally, or upload them to PhoneGap Build manually.\n\nTo build the hybrid app package, follow these steps:\n\n1.  Open your app in the Developer Portal and under **DEPLOY** in the left sidebar menu, click **Mobile App**.\n2.  Make sure the **Push Notifications** permission is checked under **Permissions**.\n3.  Click **Publish for Mobile App Stores**:\n\n    {{< figure src=\"/attachments/howto/mobile/hybrid-mobile/setting-up-hybrid-push-notifications/download-hybrid-app-package-step1.png\" >}}\n    \n4.  Select **Do it yourself** and then click **Download Customizable Package**:\n\n    {{< figure src=\"/attachments/howto/mobile/hybrid-mobile/setting-up-hybrid-push-notifications/download-hybrid-app-package-step2.png\" >}}\n\n    This package you just downloaded is a customizable hybrid app package for your specific Mendix app. You can make changes to it, build a new PhoneGap Build package, and then upload it to PhoneGap Build to create the binaries (*.apk* for Android and *.ipa* for iOS). To better understand the structure of what you just downloaded, see the **Folder Structure** section in the [Mendix PhoneGap Build App Template documentation](https://github.com/mendix/hybrid-app-template#folder-structure).\n\n5.  Unzip the hybrid app package.\n6.  Copy and paste the *google-services.json* and *GoogleService-Info.plist* config files you downloaded before into the `config` folder.\n    {{% alert color=\"warning\" %}} Only paste the *GoogleService-Info.plist* config file when you plan on using FCM for sending push notifications to iOS devices. If you plan on keeping using APNS to send push notifications to iOS devices, do not paste the *GoogleService-Info.plist* config file.{{% /alert %}}\n7.  Create the PhoneGap Build package by following the instructions in the [Through Uploading to PhoneGap Build](https://github.com/mendix/hybrid-app-template#through-uploading-to-phonegap-build) section of the *Mendix PhoneGap Build App Template* documentation. Be sure to read the **Prerequisites** and **Build on PhoneGap** sections of this documentation as well. This is an overview of the steps:<br />\n    a. Install the latest stable version of [Node.js](https://nodejs.org/en/download/).<br />\n    b. In the unzipped hybrid app package folder, execute `npm install`.<br />\n    c. In the same folder execute `npm run package`.<br />\n8.  Create an APK or iOS package from the PhoneGap Build package. You can upload the new PhoneGap Build package (in the **dist** folder) to PhoneGap to build the APK or iOS binary.\n\n    {{< figure src=\"/attachments/howto/mobile/hybrid-mobile/setting-up-hybrid-push-notifications/build.phonegap.com.png\" >}}"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/_index.md",
    "header": {
      "title": "Native Mobile",
      "url": "/howto/mobile/native-mobile/",
      "category": "Mobile",
      "weight": "1",
      "tags": [
        "mobile",
        "native",
        "iOS",
        "Android"
      ]
    },
    "body": "\n## 1 Introduction\n\nWith Mendix you can build fully native mobile apps. Native mobile apps differ from hybrid apps in that they do not render inside a web view. Instead, they use native UI elements. This enables fast performance, smooth animations, like swipe gestures, and improved access to all native device capabilities.\n\nYou build Mendix native mobile apps the same way you build web or hybrid apps. You can use familiar elements such as pages, widgets, nanoflows, JavaScript actions, and microflows to put together your app. However, there are some differences between building native apps and hybrid apps. For example, the set of available widgets (and their properties) is slightly different. In addition, native styling is based on JavaScript instead of SASS/CSS. \n\n## 2 Documents in This Section\n\n* [Getting Started](/howto/mobile/get-started/)\n\t* [Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n\t* [Troubleshoot Common Native Mobile Issues](/howto/mobile/common-issues/)\n\t* [Implement Best Practices for Native Mobile App UI](/howto/mobile/ui-best-practices/)\n* [Implementation](/howto/mobile/implementation/)\n\t* [Add Fonts to Your Native Mobile App](/howto/mobile/native-custom-fonts/)\n\t* [Implement Native Mobile Styling](/howto/mobile/native-styling/)\n\t* [Set Up Deep Links in Native Mobile Apps](/howto/mobile/native-deep-link/)\n\t* [Set Up Maps in Native Mobile Apps](/howto/mobile/how-to-maps/)\n\t* [Use Notifications](/howto/mobile/notifications/)\n* [Distribution](/howto/mobile/distribution/)\n\t* [Build Native Apps](/howto/mobile/build-native-apps/)\n\t* [Release Over the Air Updates with Mendix](/howto/mobile/how-to-ota/)\n\t* [(Deprecated) Release Over the Air Updates with App Center's CodePush](/howto/mobile/how-to-ota-appcenter/)\n* [Use Augmented Reality](/howto/mobile/ar-parent/)\n* [Test Mendix Native Apps Using Appium](/howto/mobile/testing-mendix-native-apps-using-appium/)\n\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/ar-parent/_index.md",
    "header": {
      "title": "Use Augmented Reality",
      "url": "/howto/mobile/ar-parent/",
      "parent": "native-mobile",
      "weight": "90",
      "description": "Tutorials for setting up and using AR in Mendix Studio Pro.",
      "tags": [
        "AR",
        "VR",
        "mixed reality",
        "augmented reality",
        "virtual reality"
      ]
    },
    "body": "\nThese step-by-step guides will teach you to set up and use augmented reality (AR) using Mendix Studio Pro and your native mobile device.\n\nThe following how-to’s are available here:\n\n- [Get Started with AR](/howto/mobile/how-to-ar-simple-cube/)\n- [Create An AR Business Card](/howto/mobile/how-to-ar-business-card/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card.md",
    "header": {
      "title": "Create An AR Business Card",
      "url": "/howto/mobile/how-to-ar-business-card/",
      "parent": "ar-parent",
      "weight": "10",
      "description": "In this how-to you will make an augmented reality business card app.",
      "tags": [
        "AR",
        "VR",
        "mixed reality",
        "augmented reality",
        "virtual reality"
      ]
    },
    "body": "\n## 1 Introduction\n\nFollow the sections below to build a demo. While doing so, you will become familiar with a whole range of augmented reality (AR) widgets, and see them in action. Upon completing this document, you will end up with an interesting demo that can easily be customized for your own purposes. \n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Install Studio Pro and Developer Apps with AR capabilities\n* Download the AR widgets from the [Mendix Marketplace](https://marketplace.mendix.com/link/component/117209)\n* Create a new empty page with **Container (AR)** and **ImageTracker (AR)** widgets\n* Add your business card png as the **Image** to the **ImageTracker (AR)**\n* Obtain 3D objects to add to your AR business card (this document uses Twitter and LinkedIn logos).\n* Have a PNG of your business card\n\nDownload these widgets:\n\n* **Container (AR)**\n* **ImageTracker (AR)**\n* **Square (AR)**\n* **3D Object (AR)**\n\nWhen you have completed the prerequisites, your work should look like this:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/BusinessCardRender.png\" alt=\"Result\"   width=\"300\"  >}}\n\n## 3 Creating an AR Business Card Demo\n\nFor this app you will need to start a new app based on the Blank Native Mobile App, or use another app with the Native Mobile Resources module imported from the Mendix Marketplace. First you will lay a virtual business card over your real business card. You will need the **Square (AR)** widget and the imported PNG of the business card you wish to use.\n\nIdeally you should have several recognizable features on your image, specifically an image with a lot of edges and contrast. The business card you are using in this document possesses these traits:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/BusinessCard.png\" alt=\"Business card\"   width=\"300\"  >}}\n\nAfter you have added your business card as an image, remember to adjust the physical size in **Image Tracker (AR)** to the exact size of your business card. Choose the width (the longest side) of your business card for this. This will probably be around 8.5 centimeters:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/imagetracker-dialogue.png\" alt=\"Image tracker\"   width=\"300\"  >}}\n\nNext you will add a virtual image of your business card to overlap the physical business card. To do this, add a\n‘**Square (AR)**’ widget to your app’s home page. Note we already added a ‘**Container (AR)**’ and ‘**ImageTracker\n(AR)**’ beforehand:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/square-added.png\" alt=\"Square added\"   width=\"300\"  >}}\n\n1. Double click the **Square (AR)** widget.\n1. Select the **Material** tab.\n1. Select **Material type** > **Texture**.\n1. Select the image of your business card for the **Texture**. This should be the same image as you selected for your\n   **Image Tracker (AR)**. When finished your dialog box will look like this:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/square-material-dialogue.png\" alt=\"Square dialog\"   width=\"300\"  >}}\n\n5. Go back to the **General** tab and fill out the size of your business card. The important sizes are X for the width of\n   your business card and Y for the height.\n6. Set **Rotation > X** to *-90* to ensure the virtual image is rotated correctly.\n\nOnce this is all set up, run the app and check if it works in the Make It Native app. Here you should see the\nvirtual business card overlaying your physical card:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/render-only-businesscard.png\" alt=\"Business card\"   width=\"300\"  >}}\n\nNext, add a picture of yourself to your virtual business card. Drag and drop another **Square (AR)** widget into\n**ImageTracker (AR)** and add a picture of yourself to this. In our case we have used a square image with transparent\nedges to make it appear round: \n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/Face.png\" alt=\"Face\"   width=\"300\"  >}}\n\nGo to the **General** tab and place it about 8 cm (*0.08,0,0*) to the right of the first image and match the size with the\nsize of our business card image. You should now have this image right next to your business card image.\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/render-businesscard-face.png\" alt=\"render business card\"   width=\"300\"  >}}\n\nTo finish this business card demo you need something people can click to find out more about your work. For this you will\nadd two social media logos: a Twitter one and a LinkedIn one. You can use any 3D object. \n\nThe following settings correctly place them underneath our business card (since scale can differ between 3D objects, this is not guarenteed to work with all 3D objects):\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/twitter-3d-object.png\" alt=\"twitter 3d object\"   width=\"300\"  >}}{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/twitter-3d-object.png\" alt=\"twitter 3d object\"   width=\"300\"  >}}\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/linkedin-3d-object.png\" alt=\"linkedin 3d object\" width=\"300\" >}}\n\nSince you are using *.obj* files, you can alter the color or texture within Mendix. Currently, Twitter has a color of #1DA1F2 and Linkedin has #0A66C2:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/twitter-material-dialogue.png\" alt=\"twitter material\"   width=\"300\"  >}}\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/BusinessCardRender.png\" alt=\"Completed\"   width=\"300\"  >}}\n\nNow all that is left is to add a nanoflow that opens a URL to the **Events** > **On click functionality**. Create a new\nnanoflow with the **Open URL** action. Add your Twitter profile URL here:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/open-url-nanoflow.png\" alt=\"open url nanoflow\"   width=\"300\"  >}}\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-business-card/call-url-event-dialogue.png\" alt=\"call url event\"   width=\"300\"  >}}\n\nCongratulations, you now have a functioning AR business card demo with custom 3D objects!\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube.md",
    "header": {
      "title": "Get Started with AR",
      "url": "/howto/mobile/how-to-ar-simple-cube/",
      "parent": "ar-parent",
      "weight": "10",
      "description": "In this how-to you will make a 3D cube by dragging and dropping widgets into your Mendix app.",
      "tags": [
        "AR",
        "VR",
        "mixed reality",
        "augmented reality",
        "virtual reality"
      ]
    },
    "body": "\n## 1 Introduction\n\nWorking with augmented reality (AR) is not all that different from implementing any other piece of Native functionality.\nUsing just a few widgets, you can add two-or-three dimensional AR to your native mobile application. In this how-to you\nwill make a 3D cube by dragging and dropping widgets into your Mendix app and then configuring them.\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\nFor Android:\n\n- Have an Android mobile device that can [support ARCore](https://developers.google.com/ar/discover/supported*devices#android_play).\n- Install [Google Play Services for AR](https://play.google.com/store/apps/details?id=com.google.ar.core&hl=en) on your device.\n- Install the Make It Native app on your Android mobile device for testing purposes.\n\nFor iOS:\n\n- Have an iOS mobile device that supports ARKit (iPhone 6S and up).\n- Install the Make It Native app on your iOS mobile device for testing purposes.\n\n## 3 Embedding Widgets in Your App\n\nCreate a new app by following these steps:\n\n1. Open Mendix Studio Pro. Select **File** > **New App** , and then select the **Blank Native Mobile App**.\n2. Click **Use this starting point.**\n3. Name your app _Hello World_ and click **Create app** to close the dialog box.\n4. Open the **Home_Native** page and remove the intro screen widget and other containers.\n5. Download the Native Mobile AR module from the [Mendix Marketplace](https://marketplace.mendix.com/link/component/117209) and import it to your app.\n\nYou will begin by embedding the following widgets into your Mendix app:\n\n- Container (AR)\n- ImageTracker (AR)\n- Cube (AR)\n\nEmbed the widgets in this order:\n\n1. Drag and drop **Container (AR)** onto a native mobile page.\n1. Drag and drop **ImageTracker (AR)** into **Container (AR)**.\n1. Drag and drop **Cube (AR)** into **ImageTracker (AR)**:\n\n   {{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/nested-widgets.png\" alt=\"Nested widgets\"   width=\"300\"  >}}\n\nVery little configuration is necessary to make your AR function. All you need is an image tracker. A tracker is an image\nyour AR can track and put AR effects on top of. Most images can serve as a tracker, provided they have enough contrast.\nComplex images make for the best tracker, because they are easier for your device’s camera to track. Start by adding an\nimage to ImageTracker (AR):\n\n1. Double-click your **ImageTracker (AR)** widget.\n1. Click **Image** > **Edit**.\n1.  Select a tracker from an image collection. This image will be the foundation of your AR application and is what your camera will track:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/sample-tracker-image.png\" alt=\"Select tracker\"   width=\"300\"  >}}\n\n1. Set the physical size of this image tracker, this size is in meters. For example, if you printed the tracker to be 10 cm set **Physical marker size** to 0.1.\n1. Double-click your **Cube (AR)** widgets.\n1. Set **X**, **Y** and **Z** of Scale to 0.1. This way the **Cube (AR)** will be the same size as your physical tracker.\n1.  Click **Run** in Mendix Studio Pro to automatically refresh your Make It Native app. Now your **Hello World AR** app is up and running. You should now see a simple white cube rendered on top of a tracker:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/white-cube.jpg\" alt=\"White cube\"   width=\"300\"  >}}\n\nNow that you have a simple scene running, you will a closer look at the widgets you used to understand what they do.\n\n### 3.1 Container (AR)\n\nThis widget starts an AR scene: the video feed you see on AR apps. It is named Container (AR) because this widget will hold all your other AR widgets. It is the foundation of every Mendix AR mobile application:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/ar-container.png\" alt=\"Container (AR)\"   width=\"300\"  >}}\n\n### 3.2 ImageTracker (AR) {#ar-tracker}\n\nThe **ImageTracker (AR)** widget allows you to track an image. Like Container (AR), this widget can contain other AR widgets. All widgets you put into ImageTracker (AR) will stick to the image. That means that every object (Cube (AR), Sphere (AR), and others) will follow or track the image.\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/ar-image-tracker.png\" alt=\"ImageTracker (AR)\"   width=\"300\"  >}}\n\n**Image** — in the **General** tab, you can provide your own image to this widget by clicking **Image** > **Edit**. While it is possible to add any image, some images work better for AR tracking than others. Images can best be tracked when they have high contrast and several edges:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/sample-tracker-image.png\" alt=\"Sample Tracker Image\"   width=\"300\"  >}}\n\nIt is possible to use a more conventional image, like a company logo, as long as it has enough contrast and edges. If your image does not posses these qualities, you will notice AR elements floating in incorrect places and motion tracking failures as you move your camera. It is also possible that your image will not be recognized at all.\n\n**Orientation** — this dictates the orientation of 3D objects on your tracker, not the orientation of the tracker itself. Leaving it on **Up** will make your 3D object appear right side up when you have it lying on a table.\n\nYour standard cube will not look different when turned around. To show orientation, this tutorial has temporarily added the following texture (see the [Material](#material) section below to learn how to add your own texture to an object):\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/up-arrow.png\" alt=\"UP Image\"   width=\"300\"  >}}\n\nHere is a cube with the **Up** orientation:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/up-cube.jpg\" alt=\"Cube on tracker with Up orientation\"   width=\"300\"  >}}\n\nHere is a cube with the **Left** orientation:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/left-cube.jpg\" alt=\"Cube on tracker with Left orientation\"   width=\"300\"  >}}\n\n**Physical marker size** - this is where you put the physical size of your tracker, and how AR determains how far away the marker is. Since most phones will use only one camera, this value is used to calculate depth. Putting a wrong value here won't break AR, but will change the depth at which your objects are rendered. Which in turn may also lead to more jittering or 'vibrating' of your 3D models.\n\n**Keep updating** - can be used for a more stable experience. When you keep this on **Yes** this will mean your application is constantly scanning and adjusting for the tracker, using that as it's main reference. If you set this to **No** the **ImageTracker (AR)** will stop after the tracker is found and then use the native ARCore/ARKit to further handle positioning. This will make your scene more stable, but obviously should not be used when you expect the tracker to move.\n\n## 4 Configuring Your Cube (AR) Widget\n\nThe **Cube (AR)** widget will places a cube into the scene, specifically onto the **ImageTracker (AR)** widget. There are several properties you can configure in this widget to customize its behavior.\n\nHaving the **Cube (AR)** widget in the **ImageTracker (AR)** widget will render a white cube the same size as the image tracker directly on top of it. Next you will configure **Cube (AR)’s** properties.\n\n### 4.1 General\n\nThe **General** tab contains basic properties for configuring position:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/general-tab.png\" alt=\"General tab\"   width=\"300\"  >}}\n\nIn the **General** tab you can configure **Position**, **Rotation**, and **Scale** (**X** stands for left/right, **Y** for up/down, and **Z** for depth):\n\n*  **Position** — the position relative to the image tracker. For example, since the position is relative to the tracker size, set **X** to _0.1_ to make your object appear right beside the tracker instead of on top of it:\n\n\tHere is a cube in **Position** (0.1,0,0):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/first-position.jpg\" alt=\"Cube on Position (0.1,0,0)\"   width=\"300\"  >}}\n   \n\tHere is a cube in **Position** (0,0.1,0):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/second-position.jpg\" alt=\"Cube on Position (0,0.1,0)\"   width=\"300\"  >}}\n   \n\tHere is a cube in **Position** (0,0,0.1):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/third-position.jpg\" alt=\"Cube on Position (0,0,0.1)\"   width=\"300\"  >}}\n\n*  **Rotation** — the rotation of the cube in 360 degrees. Set **Rotation** **X** to _45_ to see your cube rotated 45 degrees on its X axis:\n\n\tHere is a cube with **Rotation** (0,0,0):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/rotation-zero.jpg\" alt=\"Cube with Rotation (0,0,0)\"   width=\"300\"  >}}\n   \n\tHere is a cube with **Rotation** (45,0,0):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/rotation-forty-five.jpg\" alt=\"Cube with Rotation (45,0,0)\"   width=\"300\"  >}}\n\n*  **Scale** — the size of the object, also relative to the tracker it is embedded in. When the **Scale** is set to _(0,0,0)_ the object will be invisible. Because **0.1** is exactly the size of the tracker, set **Scale X**, **Y**  and **Z** to _0.05_ to see your cube shrink in the tracker:\n\n\tHere is a cube with **Scale** (0.1,0.1,0.1):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/scale-one.jpg\" alt=\"Cube with Scale (0.1,0.1,0.1)\"   width=\"300\"  >}}\n   \n\tHere is a cube with **Scale** (0.05,0.05,0.05):\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/scale-half.jpg\" alt=\"Cube with Scale (0.05,0.05,0.05)\"   width=\"300\"  >}}\n\nFor **Position**, **Rotation** and **Scale** an **Attribute** can also be used to set the **Position**, **Rotation** and **Scale** **X** **Y** and **Z** values. These values will also get updated for example when the user uses their finger to move them. To use the **Attribute** option simply select this instead of **Expression** at **Position type**, **Rotation type** or **Scale type**.\n\n### 4.2 Material {#material}\n\nThe **Material** tab contains properties for configuring appearance:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/material-tab.png\" alt=\"Material\"   width=\"300\"  >}}\n\n* **Material type** - can be either **Texture**, **Color** or **Video**. **Material type** determains what will be put\n  onto the cube, an image, a color or a looping video.\n\n* **Texture** — an image you can place on the cube by clicking **Edit**. The image will appear on each face of the cube. Put the example tracker here as a texture to end up with this colorful cube (note that the cube now ignores  any **Color** value — if you want to make your cube one solid color, make sure the Texture is set to **none**):\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/sample-texture.jpg\" alt=\"Texture\"   width=\"300\"  >}}\n\n* **Color** — the color of the cube. You can have either a **Texture** or **Color**, but not both. _White_ is the  standard color. Change the value to _green_ to make your cube appear this way:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/green-color.jpg\" alt=\"Color\"   width=\"300\"  >}}\n\n* **Video** - a link to a .mp4 video. This will play a looping video on the object.\n* **Opacity** — the clarity or opacity of the cube. _1_ is fully opaque, while _0_ is fully transparent. Change the color of your cube back to _white_ and change the opacity value to _0.5_ to see your cube become partly transparent:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/opacity.jpg\" alt=\"Opacity\"   width=\"300\"  >}}\n\n*  **Lighting type** — the way light from the scene will fall on your object. \n\t**Phong**, **Blinn**, and **Lambert**  are standard configurations of adding light and shadows to your objects. They are also have relatively slight  processor power requirements. \t\t**Constant** means no light is added — just pure colors are shown. \n\t**PBR** — (Physically Based Rendering) is the most advanced. PBR takes the entire scene into account when creating its  lighting, the intricacies of which are beyond this how-to. Change between the various **Lighting type** options to  see them in action:\n\n\tHere is a cube with **Lighting type** > **Phong**:\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/phong.jpg\" alt=\"Cube with lighting type Phong\"   width=\"300\"  >}}\n   \n\tHere is a cube with **Lighting type** > **Constant**:\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/constant.jpg\" alt=\"Cube with lighting type Constant\"   width=\"300\"  >}}\n\n### 4.3 Interaction\n\n**Interaction** is where Mendix AR gets more advanced. These properties dictate every way you can interact with your object. Enabling any of these will also allow you to catch the events they generate in the **Events** tab:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/interaction-tab.png\" alt=\"Interaction tab\"   width=\"300\"  >}}\n\n* **Physics** — dictates how your object interacts with other 3D objects. Enabling it will not show an immediate  visible difference, but it will make it possible for other objects to collide with this object. \n* **Physics type** —  how the object should physically behave. Selecting **Kinematic** will make your object move only when manipulated.  **Dynamic** objects will react to everything. **Static** objects will never move.\n* **On collision** — an event that  is triggered when this objects collides with another 3D object with physics enabled. When this objects **Physics  type** is not **Dynamic** but is enabled, it can still collide with objects that are **Dynamic** and vice versa. However, **Kinematic** and **Static** object cannot generate this event with other objects that are **Kinematic** or  **Static**. \n* **Use gravity** — sets if the object should be affected by gravity. Setting it to ‘Yes’ will make your object fall until it meets another object with physics enabled. To put this information into practice, select  **Enable Physics** > **Yes**, select **Physics Type** > **Dynamic**, and select **Use Gravity** > **Yes** to enable  your cube’s physics:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/physics.gif\" alt=\"Physics gif\"   width=\"300\"  >}}\n\n* **Dragging** — allows a user to manipulate an object by dragging it with their finger. This property gives users a very instinctive way to move objects. \n* **Dragging type** — the type of dragging behaviour you want, **Fixed  Distance** will make the object follow you at always the same distance as it started. **Fixed to world** will make the object stick to the world, for example objects like floors, desks, walls etc.\n*  **On drag** — an event that is triggered when the object is moved through dragging:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/dragging.gif\" alt=\"Dragging gif\"   width=\"300\"  >}}\n\n*  **Pinching** — can be used to scale the object, similar to zooming in and out on a maps widget. Select **Enable  Pinching** > **Yes**, select **Enable Pinch to Scale** > **Yes**, and set the **Scale Factor** to 0.5, then pinch  out on your object to examine it in detail:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/pinching.gif\" alt=\"Pinching gif\"   width=\"300\"  >}}\n\n### 4.4 Events\n\nThe **Events** tab appears this way:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/events-tab.png\" alt=\"Events tab\"   width=\"300\"  >}}\n\nEvents on 3D objects work like any other event on a widget. **On click** is called when the object is clicked, and **On hover** is called when the object is 'in focus' in the middle of the screen.\n\n### 4.5 Common\n\nThe **Common** tab appears this way:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/common-tab.png\" alt=\"Common tab\"   width=\"300\"  >}}\n\nThe **Common** tab has two important properties:\n\n* **Name** — is used internally in all AR Widgets and must be unique. It can be changed, but we recommend keeping its generated name.\n*  **Visible** — is used to dictate the visibility of the AR component. This can be conditional just like most other widgets:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/visibility.png\" alt=\"Visibility\"   width=\"300\"  >}}\n\n### 4.6 Appearance\n\nThe **Appearance** tab appears this way:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/ar-parent/how-to-ar-simple-cube/appearance-tab.png\" alt=\"Appearance tab\"   width=\"300\"  >}}\n\nCurrently the properties in the **Appearance** tab have no influence on AR widgets. This tab can be ignored.\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/_index.md",
    "header": {
      "title": "Distribution",
      "url": "/howto/mobile/distribution/",
      "parent": "native-mobile",
      "weight": "40",
      "description": "Distribute native mobile apps.",
      "tags": [
        "native",
        "mobile",
        "start",
        "quickstart"
      ]
    },
    "body": "\nHow-to's in this section will help you distribute native apps to app stores, as well as push changes using over-the-air updates.\n\nThe following how-to’s are available here:\n\n* [Build Native Apps](/howto/mobile/build-native-apps/)\n* [Release Over the Air Updates with Mendix](/howto/mobile/how-to-ota/)\n* [Release Over the Air Updates with App Center's CodePush (Deprecated)](/howto/mobile/how-to-ota-appcenter/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/build-native-apps/_index.md",
    "header": {
      "title": "Build Native Apps",
      "url": "/howto/mobile/build-native-apps/",
      "parent": "distribution",
      "weight": "10",
      "description": "Tutorials for building native mobile apps.",
      "tags": [
        "mobile",
        "native",
        "react",
        "ios",
        "android"
      ]
    },
    "body": "\nThese step-by-step guides will teach you to build native mobile applications and more. Many of these guides use the Mendix Native Mobile Builder UI tool included in Mendix Studio Pro v8.15 and above:\n\n* [Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/) – Go from a blank slate to an app running on a device.\n* [Build a Mendix Native App Locally](/howto/mobile/native-build-locally/) – Follow this guide to build your apps locally using the Mendix Native Mobile Builder.\n* [Build a Mendix Native App Locally Manually](/howto/mobile/native-build-locally-manually/) – Follow this guide to build your apps locally and without an internet connection.\n* [Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/) – Debug native mobile apps using the Make It Native app.\n* [Create a Custom Developer App](/howto/mobile/how-to-devapps/) – Create a custom developer app: a substitute for the Make It Native app which accommodates custom dependencies such as native widgets or fonts.\n* [Add Fonts to Your Native App](/howto/mobile/native-custom-fonts/) - Add custom fonts to your native mobile apps.\n\n{{% alert color=\"info\" %}}\nThe Mendix Native Mobile Builder does not currently support connections behind proxy servers. Please make sure you are not behind a proxy server and that your security rules allow access to the required services.\n{{% /alert %}}\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app.md",
    "header": {
      "title": "Deploy Your First Mendix Native Mobile App",
      "url": "/howto/mobile/deploying-native-app/",
      "parent": "build-native-apps",
      "weight": "10",
      "description": "Describes how to deploy your first Mendix native mobile app with the Mendix Native Mobile Builder.",
      "tags": [
        "native",
        "mobile",
        "deploy",
        "mendix native mobile builder",
        "builder",
        "appcenter"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis how-to will teach you how to go from a blank slate to an app running on a device.\n\nThe Mendix Native Mobile Builder is the UI tool to set up and build your Mendix Native Mobile Apps. It is directly accessible in Mendix Studio Pro v8.15 and above for all apps with a native mobile navigation profile.\n\n{{% alert color=\"info\" %}}\nThe Mendix Native Mobile Builder does not currently support connections behind proxy servers. Please make sure you are not behind a proxy server and that your security rules allow access to the required services.\n{{% /alert %}}\n\n## 2 Prerequisites {#prerequisites}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Mendix Studio Pro v8.15 and above installed using the online installer. The offline installer does not include the Mendix Native Mobile Builder dependency.\n* Read [How to Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/) to see how to create, style and debug an application with Mendix Studio Pro\n* Deploy your native mobile app to the cloud via Studio Pro and have the cloud address of your deployed application available\n* A [GitHub](https://github.com/) account.\n* An [App Center](https://appcenter.ms/) account. We recommend a paid account if you will be building and deploying regularly.\n\n### 2.1 Platform-Specific Prerequisites\n\nIf you plan to deploy your app for testing on an iOS device, make sure you have completed the following prerequisites:\n\n* Register for an Apple Developer Account\n* Have an iOS device for testing the iOS package that will be produced\n* Have an iOS deployment certificate and a provisioning file for which your device is activated\n* Have Xcode installed on your computer for deploying the iOS package to your test device\n\nIf you plan to deploy your app for testing on an Android device, make sure you have an Android device available.\n\n## 3 Getting Your Tokens {#getting-your-tokens}\n\nTo use the Mendix Native Mobile Builder, you will first need to get tokens to authenticate with GitHub and App Center. If you already have tokens for your GitHub and App Center, you do not need to complete the **Getting Your Token** sections.\n\n### 3.1 GitHub Token {#github-token}\n\n1. Go to [GitHub](https://github.com/) and sign in.\n2. Go to [Settings](https://github.com/settings/profile) by clicking your profile picture in the upper-right corner of the page.\n3. Click [Developer settings](https://github.com/settings/apps) at the bottom of the left menu.\n4. Navigate to [Personal access tokens](https://github.com/settings/tokens) and then click **Generate new token** to create a new personal access token.\n5. In the **Note** field, write *Mendix Native Mobile Builder*.\n6. Under **Select scopes**, select **repo** and **workflows**.\n7. Click **Generate token**.\n8. Store your token in a secure place. You will not be able to see it again. If you lose it, you will have to create a new token and delete your old one.\n\n### 3.2 App Center Token {#appcenter-token}\n\n1. Go to [App Center](https://appcenter.ms/apps) and sign in.\n2. Click your profile icon in the upper-right corner, then click **Settings**, and then **Account Settings**.\n3. In the **API Tokens** tab, click **New API token**.\n4. Add a description of your token, select **Full Access**, then click **Add new API token**, and then **New API Token**.\n5. Store this token in a secure place as well. You will not be able to see it again. If you lose it, you will have to create a new token and delete your old one.\n\n## 4 Building Your Native App {#building}\n\n{{% alert color=\"info\" %}}\nThe Mendix Native Mobile Builder needs to communicate with GitHub and App Center. Therefore, make sure your firewall permissions do not restrict the tool.\n{{% /alert %}}\n\nFrom Studio Pro:\n\n1.  Click **App** > **Build Native Mobile App**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/start-nbui.png\" alt=\"Start Mendix Native Mobile Builder\"   width=\"350\"  >}}\n\n1.  When Mendix Native Mobile Builder launches you will see the home screen:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/home-screen.png\" alt=\"Mendix Native Mobile Builder Home Screen\"   width=\"350\"  >}}\n\n1. Select **Build app for distribution**.\n1.  Fill in your app's name and the app identifier. The wizard provides defaults, but you might want to align the app identifier to use your company's reversed URL, or change the app name in some other way:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/wizard-app-details.png\" alt=\"Wizard App Details\"   width=\"350\"  >}}\n\n1. Click **Next Step** when ready.\n1.  In the **Build Type** screen fill in your GitHub and App Center API tokens. The tool will verify the tokens grant sufficient access to valid accounts and will notify you if they do not:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/wizard-buildtype-cloud.png\" alt=\"Wizard Tokens\"   width=\"350\"  >}}\n\n1. Click **Next Step** when ready.\n1.  Select **Choose your icon** if you already have an image you would like to use as an icon. If you continue without adding a custom image, your app will use the default images displayed below. You can change app icon later if you wish:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/wizard-icons.png\" alt=\"Wizard Icons\"   width=\"350\"  >}}\n\n1. Click **Next Step** when ready.\n1.  Select **Choose your splash screen** if you already have an image you would like to use as a splash screen, or just continue if you are satisfied using the default image. You can change the splash screen later if you wish:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/wizard-splashscreens.png\" alt=\"Wizard Splash screen\"   width=\"350\"  >}}\n\n1. Click **Next Step** when ready.\n1.  Drag and drop your custom fonts onto the field if you already have a selection of fonts you would like to use, or continue if you do not need to add custom fonts. You can add custom fonts later if you wish:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/wizard-fonts.png\" alt=\"Wizard Fonts\"   width=\"350\"  >}}\n\n1. Click **Next Step** when ready.\n\nYou have completed the mandatory basic app configuration required to build your app. Now you see the **Build app for distribution** screen: \n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app.png\" alt=\"Build release app\"   width=\"350\"  >}}\n\nNext, do the following:\n\n1. Fill in an intentional version number. For defaults, we recommend you use these numbering guidelines:\n\n\t* Versions lower than 0.5.0 for alpha releases\n\t* Versions ranging from 0.5 to 0.9.x for beta releases\n\t* Versions starting from 1.0.0 for release\n\n1. Fill in your **Runtime URL**. It can be the IP of your local machine if you plan on testing against a locally-running Studio Pro installation. If you already deployed your app to Mendix Cloud, you can point it to the URL of the deployed runtime as found in Cloud Portal (for example, \"https://yourapp.mendixcloud.com\".\n1. Click the **Build** button to start the build.\n1.  The tool will set up your GitHub repository, commit your changes, configure App Center with two new apps (one for iOS and one for Android), and continue building your apps:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-step1.png\" alt=\"Setting up build prerequisites\"   width=\"350\"  >}}{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-step1.png\" alt=\"Setting up build prerequisites\"   width=\"350\"  >}}\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-step2.png\" alt=\"Building release app\" width=\"350\" >}}\n\n1.  After the build completes you can scan the QR code provided to install the app on your device. Currently the QR code service is only supported for Android devices:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-done-both.png\" alt=\"Build completed\"   width=\"350\"  >}}\n\n## 5 Signing Your Apps {#signing-a-build}\n\nBy default, App Center builds are unsigned and cannot be released on the Google Play Store or the Apple App Store. To release your apps, you must provide your signature keys to Mendix Native Mobile Builder. Signature keys prove the authenticity of your app and prevent forgeries. For more information to how to acquire these keys, see the [Managing App Signing Keys Reference Guide](/refguide/managing-app-signing-keys/).\n\n### 5.1 Setting Up Signing for iOS {#signing-for-ios}\n\niOS supports two types of signing configurations: **Development** and **Release**. The type of the build depends on the type of provisioning file and certificate that was used for configuring the tool. To set up signing for iOS, follow these steps:\n\n1. From within Mendix Native Mobile Builder, select **iOS** under **Certificates**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app.png\" alt=\"Build release app\"   width=\"350\"  >}}\n\n1.  Upload your provisioning file and P12 certificate, and then type in your password. The tool will verify that:\n\n\t* The app identifier of the app is included in the Provisioning file\n\t* The Certificate is included in the Provisioning file\n\t* The password can unlock the certificate\n\n\tIf the tool errors, please correct the issue and try again:\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/signing-ios.png\" alt=\"Signing iOS\"   width=\"350\"  >}}\n\n1. Click **Save**.\n\nWith that you have completed setting up signing for iOS. Your next build will use the provided configuration to sign your iOS app.\n\n### 5.2 Setting Up Signing for Android {#signing-for-android}\n\n1.  From within Mendix Native Mobile Builder, choose **Android** under **Certificates**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app.png\" alt=\"Build release app\"   width=\"350\"  >}}\n\n1.  Upload your keystore file and provide the keystore password, the key alias and the key password as defined when setting up the keystore. The tool will verify that:\n\n\t* The keystore password is valid\n\t* The key alias exists in the provided keystore\n\n\tIf it errors, please correct the issue and try again:\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/signing-android.png\" alt=\"Signing iOS\"   width=\"350\"  >}}\n\n1. Click **Save**.\n\nWith that you have completed setting up signing for Android. The next build will use the provided configuration to sign your Android app.\n\n## 6 Distributing {#distributing}\n\nThis section will guide you in distributing your binaries, setup, signing for [iOS](#signing-for-ios) and [Android](#signing-for-android) using your release certificates and keystore, and building your binaries.\n\nFor distributing to a specific platform, consult the appropriate section below:\n\n* [Distributing for Android](#android-distributing)\n* [Distributing for iOS](#ios-distributing)\n\n### 6.1 Distributing the iOS app to App Store Connect {#ios-distributing}\n\nDepending on whether you chose to sign your iOS app or not, the output of the build will be an *IPA* or *XCArchive* file, respectively. *IPA* files can be directly distributed to App Store Connect for further processing. *XCArchives* require XCode to sign and generate an *IPA* before they can be further processed.\n\n#### 6.1.1 Distributing a Signed IPA\n\nTo be able to upload your app to App Store Connect, you will have to have set up a new app using the App Store Connect website. While there, use the **app name** and **app id** you used to build your app. For further instruction, see the [App Store Connect Guide to adding a new app](https://help.apple.com/app-store-connect/en.lproj/static.html#devbec4892b7).\n\nWhen signing your iOS app, an *IPA* file is generated. To upload an *IPA* to the Apple App Store, XCode includes a command line tool. Assuming XCode is installed and the extra command line tool is set up, the command to upload the *IPA* is the following:\n\n```\nxcrun altool --upload-app --type ios --file \"path/to/application.ipa\"\n--username \"YOUR_APPSTORE_USER_EMAIL\" --password \"YOUR_APPSTORE_PASSWORD\"\n```\n\nReplace `file \"path/to/application.ipa\"` with the absolute path to your IPA file, `username` with your developer app store email address, and `password` with your Apple App Store password.\n\nThe command will first verify your IPA is packaged correctly and ready to be shipped, and then will then upload it to TestFlight for further processing.\n\n#### 6.1.2 Distributing an Unsigned XCArchive\n\nLocal signing is useful if you only want to test your app on a device, or you do not have a distribution certificate and have run out of build minutes on App Center when signing with a developer certificate.\n\nIn order to deploy the *nativeTemplate.xcarchive* on a device or on the Apple App Store, an Apple developer account and development team is required. If one is available, do the following:\n\n1. Using Xcode, double-click the *nativeTemplate.xcarchive* file. It should open with the built-in **Application Loader** software.\n1.  Click the *Distribute App* button to start the local signing flow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-1.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\n1.  Select **Development**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-2.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\n1.  Choose a **Development Team**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-3.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\n1.  Configure your **Development distribution options**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-4.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\n1.  Select a re-signing option:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-5.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\n1.  Review your *.ipa* content and click **Export**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-6.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\nCongratulations. You now have a signed *.ipa* file:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/xcode-app-loader-7.png\" alt=\"Xcode Application loader\"   width=\"350\"  >}}\n\n### 6.2 Distributing the Android app to Google Play {#android-distributing}\n\nA signed Android APK can be uploaded to Google Play store directly. For more info on setting up a new app and uploading your binaries follow Google's guide on [Uploading an app](https://support.google.com/googleplay/android-developer/answer/113469?hl=en).\n\n## 7 Read More\n\n* [How To Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/build-native-apps/how-to-devapps.md",
    "header": {
      "title": "Create a Custom Developer App",
      "url": "/howto/mobile/how-to-devapps/",
      "parent": "build-native-apps",
      "weight": "50",
      "description": "A tutorial for creating custom developer apps.",
      "tags": [
        "native",
        "mobile",
        "developer",
        "native-builder",
        "developer app",
        "make it native"
      ]
    },
    "body": "\n## 1 Introduction\n\nAs your Mendix app matures, you may want to expand its functionality (such as by introducing custom widgets or logic that will require new native dependencies). One such customization could be adding a near-field communication (NFC) module to your app. While the Make It Native app suffices for testing basic apps, as your app adds custom dependencies—like custom native widgets or fonts—you will need a more tailored developer app.\n\nA custom developer app helps you by serving as a replacement for the Make It Native app, and should be used when you have custom widgets and logic which are not supported by the Make It Native app. Custom developer apps are apps you can generate yourself using your current app structure, your custom modules, and any other requirements to test your evolving app. Custom developer apps feature the same functionality as the Make It Native app but are tailored to your needs.\n\n## 2 Prerequisites\n\n* Complete [How to Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n* Complete the Mendix Native Mobile Builder wizard as found in [Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n\n## 3 Building Your Developer App {#build-your-developer-app}\n\n1.  Run Mendix Native Mobile Builder from your app: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/start-nbui.png\" alt=\"Start Mendix Native Mobiler Builder\"   width=\"350\"  >}}\n\n1.  When Mendix Native Mobile launches you are greeted with the home screen:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/home-screen.png\" alt=\"Mendix Natve Mobile Builder Home Screen\"   width=\"350\"  >}} \n\n1. Choose *Build app for local development*\n\n1.  Given you already went through the initial wizard at least once, you should be greeted with the configuration screen for *Building an app for local development*: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/how-to-devapps/build-custom-dev-app.png\" alt=\"Mendix Natve Mobile Builder Home Screen\"   width=\"350\"  >}} \n\n1. Click the *Build developer app* button\n\n1.  The tool will set up your GitHub repository commit your changes, configure App Center if needed with two new apps, one for iOS and one for Android and continue with building the apps.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-step1.png\" alt=\"Building\"   width=\"350\"  >}}{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-step1.png\" alt=\"Building\"   width=\"350\"  >}}\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-step2.png\" alt=\"Build release app\" width=\"350\" >}}\n\n1.  When the build completes, you can scan the QR code provided to install the app to your device. Currently the QR code service is only supported for Android devices.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/build-release-app-build-done-both.png\" alt=\"Build release app\"   width=\"350\"  >}}\n\n\n## 4 Installing Your Custom Developer App manually\n\n### 4.1 Android\n\nFor Android the output of the build is an *APK* file. *APK* files can be directly installed on devices or emulators.\n\n#### 4.1.1 Installing on an Emulator\n\nWith your emulator running, install your app in your emulator by doing the following:\n\n1. Drag and drop the *APK* onto the emulator's window.\n2. Wait for the installation to be done.\n3. Open the app from the launcher.\n\n#### 4.1.2 Installing on a Device\n\nThere are various ways install an app on a device. Installing using a USB is detailed below, but you can use a different method if it suits you. Do the following to install your *APK* onto a device:\n\n1. Connect your device to your machine via USB.\n2. Enable file transfer on your device (differs per device).\n3. Open **This PC** in File Explorer; your device should be listed as an external device.\n4. Drag and drop your *APK* onto your device.\n5. Wait for it to finish transfering.\n6. Open your device's file manager.\n7. Navigate to the root of the file system.\n8. Tap the *APK* to install.\n9. Go through the installation steps.\n10. Open the app from the launcher.\n\n### 4.2 iOS\n\nBy default your custom developer app will be unsigned. To get a signed *IPA*, follow the steps in the [Signing Your Build](/howto/mobile/deploying-native-app/#signing-a-build) section of *How to Deploy Your First Mendix Native Mobile App*. Your custom developer app branch is named **developer**.\n\nThe unsigned output of an iOS build is an *XCArchive* file. *XCArchive* files require manual signing before they are ready to be installed on a device.\n\nThe signed output of iOS build is an *IPA* file. If correctly signed, *IPA* files can be installed on physical devices.\n\n#### 4.2.1 Installing on an Emulator\n\nBefore installing, make sure you have completed the following prerequisites:\n\n* Have a Mac OSX machine\n* Install LTS builds of NodeJs and NPM (download [here](https://nodejs.org/en/))\n* Install Cocoapods ([installation instructions](https://cocoapods.org/#install))\n* Install the latest XCode version\n\nBuilds with the Mendix Native Mobile Builder are stripped of simulator artifacts. Therefore, to run on XCode's Simulator you will have to build the developer branch locally from source by completing these steps:\n\n1. Navigate to your GitHub repo.\n2.  Switch to your **developer** branch:\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/how-to-devapps/github-branch-switching.png\" alt=\"Switch branch on Github\"   width=\"350\"  >}}\n   \n3.  Click **Clone or Download** and then click **Download ZIP**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/how-to-devapps/github-download-branch.png\" alt=\"Download repository\"   width=\"350\"  >}}\n   \n4. Unzip the downloaded archive.\n5. Open a terminal and change directory into the folder.\n6. Run this command:\n\n\t```\n\tnpm i && cd ios && pod install\n\t```\n\n\tThis will install the node module dependencies and the iOS Dependencies\n7.  In the **ios** folder, open the **NativeTemplate.xcworkspace** file:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/how-to-devapps/ios-folder.png\" alt=\"iOS folder structure\" >}}\n\n8.  In XCode select the **Dev** target and the emulator you want to build your developer app for:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/how-to-devapps/xcode-target-selection.png\" alt=\"Dev target selection\" >}}\n\n9. Click **Play**.\n\n#### 4.2.2 Distributing the Custom Developer App to the Apple App Store\n\nTo run your custom developer app on a device which is not registered as a test device on the Apple Developer Portal, you will have to sign the developer app with your certificates manually and distibrute it via TestFlight.\n\nRead more on TestFlight in the [official documentation](https://testflight.apple.com/).\n\n## 5 Read More\n\n* [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n* [Release Over the Air Updates with Mendix](/howto/mobile/how-to-ota/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually.md",
    "header": {
      "title": "Build a Mendix Native Mobile App Locally and Manually",
      "url": "/howto/mobile/native-build-locally-manually/",
      "parent": "build-native-apps",
      "weight": "30",
      "description": "Describes how to build your first Mendix native mobile app locally, without using the Mendix Native Mobile Builder.",
      "tags": [
        "native",
        "mobile",
        "build",
        "local",
        "xcode",
        "android studio"
      ]
    },
    "body": "\n## 1 Introduction\n\n{{% alert color=\"info\" %}}\nWhen the Mendix Native Mobile Builder identifies a Native Template version (v5.1.9 and above) that is Mobile Toolkit capable, it will not apply changes directly to the app. To apply the changes when building locally, check out your latest changes, run `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`), then make sure to run `npm run configure`.\n{{% /alert %}}\n\nBy default when building your native mobile app binaries, Mendix uses [Visual Studio App Center](https://appcenter.ms/sign-in?original_url=%2Fapps) as a service so that users can build without having to install tools like XCode or Android Studio. However, there are cases when using App Center is not allowed or possible. In those situations, you can build your apps locally without an internet connection.\n\nFollow the sections below through [Building Your Native App](#building-app-project) to complete your builds. To go beyond those instructions, see [Adding Dependencies](#adding-dependencies) and [Removing Dependencies](#removing-dependencies) sections below. These sections will allow you to further customize your local builds.\n\nTo understand the local build process, it is important to grasp a few basic concepts. Mendix native mobile apps are first and foremost React Native (RN) apps which follow the same rules as other RN apps:\n\n* The JS code and static assets need to be bundled together for RN to use\n* The bundled code and assets are put into a React Native Template that represents an iOS and Android app\n\nIn a similar fashion, MXBuild and the Mendix Native Template follow these rules:\n\n* When using MXBuild, the JS code and static assets are bundled together\n* The bundled code and assets are put into the Mendix Native Template that provides a foundation for both an iOS and Android version of your app\n\n## 2 Prerequisites {#prerequisites}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Install [Node and NPM](https://nodejs.org/en/download/) and [Python](https://www.python.org/downloads/)\n\nFor iOS builds:\n\n* Have a Mac OS X machine \n* Install [XCode 11.7](https://apps.apple.com/us/app/xcode/id497799835?mt=12) and [CocoaPods](https://guides.cocoapods.org/using/getting-started.html) \n\nFor Android Builds:\n\n* Install [Android SDK](https://developer.android.com/studio) and [platform tools](https://developer.android.com/studio/releases/platform-tools)\n\n## 3 Getting the Native Template\n\nThe Native Template is the base for building native mobile apps with Mendix. In essence, it is a React Native template with the extra dependencies and configurations required to run your Mendix app.\n\nThe Native Template is versioned against Mendix Studio Pro. This means the Studio Pro version you use to create your Mendix app dictates which version of the Native Template you should use. When using the Native Mobile Builder this is handled automatically when the tool is started from Studio Pro.\n\n### 3.1 Determining Which Native Template Version to Use\n\nTo determine which version of the Native Template you should use, do the following:\n\n1. Note which version of Studio Pro you are using.\n1. Navigate to the [Native Template GitHub repository](https://github.com/mendix/native-template).\n1. At the root of your app, open the *mendix_version.json* JSON file.\n\nThe keys of the dictionary represent the Mendix Studio Pro version. The `min` and `max` values are the minimum and maximum Native Template versions supported: \n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/mendix-version.png\" alt=\"iOS output\"   width=\"200\"  >}}\n\nSo like in the example picture shown above, in the case of Mendix Studio Pro 8.9.x, you could choose any Native Template version from 4.0.0 to the latest. Ideally you should choose the most recent supported version.\n\nThere is no best way of getting a copy of the Native Template. In the following sections we provide two ways to get the version you need.\n\n#### 3.1.1 Getting the Native Template Using the Git CLI\n\nThis method is useful if you have Git installed. To get the Native Template, do the following:\n\n1. Use `git@github.com:mendix/native-template.git` or `https://github.com/mendix/native-template.git` to clone the app locally. \n1. Run the following command: `git clone --single-branch --branch release/<major-version-number> <repo-url>`.\n\nThe final step differs based on your machine:\n\nFor a Windows machine building an Android app, do the following: \n\n1.  Run `npm i`  to install the required dependencies.\n\n\t{{% alert color=\"info\" %}}\n\tWhen Mendix Native Mobile Builder identifies a Mobile Toolkit capable Native Template version (v5.1.9 and above), it will not apply changes directly to the app. To apply the changes when building locally check out your latest changes, run `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`), then make sure to run `npm run configure`.{{% /alert %}}\n\n1. Instances of the Native Template v5.1.9 and above include the Native Mobile Toolkit. Therefore, if you are using one of these versions you also must run the `npm run configure` command. This ensures that the changes from the Mendix Native Mobile Builder are applied to your app.\n\nFor a Mac OS X machine building an iOS app, do the following:\n\n1. Run `cd ios && pod install` to install the required dependencies.\n\n#### 3.1.2 Getting the Native Template by Downloading the Source Code from GitHub\n\nThis method is useful if you do not have Git installed. To get the Native Template, do the following:\n\n1. Navigate to the [Native Template releases](https://github.com/mendix/native-template/releases).\n1. Scroll to the version you want to download.\n1.  Select the source code binary to download a copy of the code:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/github-assets.png\" alt=\"iOS output\"   width=\"250\"  >}}\n\n1. Unzip the file.\n1. Run `npm i && cd ios && pod install` to install the required dependencies.\n\nNow that you have a copy of the Native Template checked out and ready, you can bundle your Mendix app, move the bundle into the Native Template folder, and compile everything together to produce your finished native app.\n\n## 4 Bundling Your Mendix App\n\nBundling is the process of packaging everything you created in Studio Pro and making that package ready to be compiled into your native mobile app. Bundling in the case of a React Native app, and hence a Mendix Native App, includes transpiling the business logic and layout of your app into a JavaScript bundle and gathering all your static resources into the correct folder structure. \n\nFor bundling your resources, Mendix Studio Pro comes with a helpful tool called [MxBuild](/refguide/mxbuild/). MxBuild can be found relatively to the location of the Studio Pro executable (for example C:\\Program Files\\Mendix\\Studio Pro (version)\\mxbuild.exe).\n\n1. Run the following command:\n\n\t```\n\tmxbuild.exe --java-home=\"JDKDirectory\" --java-exe-path=\"javaExecutable\" --target=deploy --native-packager --loose-version-check path-to-your-app-mpr-file\n\t```\nThe bundles will be generated relatively to the `app-directory\\deployment\\native\\bundle`\n\n1. Run MXBuild against your app to generate the required bundle and assets.\n\nWhen completed there should be a folder under the app's deployment folder **app-directory\\deployment\\native\\bundle** with two folders: one named **iOS** and one named **android**. After confirming these folders are correct, do the following:\n\n1. Move the **iOS** folder's content to *your-native-template-root/ios/Bundle*.\n1.  The **android** folder structure should be the following:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/android-output.png\" alt=\"iOS output\"   width=\"250\"  >}}\n\n1. Move the **android** folder's content to *your-native-template-root/android/app/src/main*. Choose to overwrite if requested to do so.\n1. Open *your-native-template-root/android/app/src/main/res/raw/runtime_url* using a text editor.\n1. Replace the URL with the correct URL for your runtime.\n1. Open *your-native-template-root/ios/Config/config.xcconfig*, then replace the value of `RUNTIME_URL=` with the correct URL for your runtime.\n\nCongratulations! You have successfully completed the basic setup of a Native Template with the latest bundle and assets of your Mendix app.\n\n## 5 Building your Native Mobile App {#building-app-project}\n\nNow that the Native Template is ready and includes the app's bundle, resources, and runtime URL configuration, it can be built into a native app. To build your app you can open the app with Android Studio or XCode for the Android and iOS app respectively, and then build as normal. More advanced use cases, such as apps for continuous integration pipelines, can make use of Gradle or xcodebuild to build the apps using command line.\n\nIn the sections below you can see the basic steps to get an app up and running on an emulator or device using Android or iOS IDEs.\n\n### 5.1 Building an Android App with Android Studio\n\n1. Run `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`) in the app root to install the required dependencies.\n1. Open Android Studio.\n1. Select the `<Native Template root>/android` as the entry point for the app.\n1. After synchronizing the app your Android Studio should look something like this. **Do not accept any suggestions to update to latest Gradle or Kotlin version!**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/as-home.png\" alt=\"Android Studio\"   width=\"350\"  >}}\n\n   Mendix native mobile apps make use of **Build Variants** to build a release app or a custom developer app. The idea of **Build Variants** is a Gradle build system concept for sharing the same codebase but delivering different experiences.\n\n1. Choose the **appstoreDebug** variant to be able to build and test your app on an emulator or connected device:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/as-build-variants.png\" alt=\"Android Build Varients\"   width=\"350\"  >}}\n   \n1. After a short time the app should be synchronized and the play button (**Run Locally**) should be selectable. Select a device or create a device from the drop-down menu and click the play button (**Run Locally**) to build and install your app on the device:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/as-start-build.png\" alt=\"Android Build Toolbar\"   width=\"250\"  >}}\n\n### 5.2 Building an iOS App with XCode\n\n1. If you have not ran it yet, run `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`) in the app root to install the required dependencies.\n1. Change directory by running `cd ios` and run `pod install` to install the iOS dependencies.\n\n\tThe iOS app is using CocoaPods for its dependency management. For more information on installing the CocoaPods dependency manager on your machine see CocoaPods [documentation](https://cocoapods.org/#install).\n\n1. Open *.xcodeworkspace* using XCode.\n1. Navigate to **Signing and Capabilities** and choose your **Team** from the drop-down menu:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/xc-setup-team.png\" alt=\"XCode Build Toolbar\"   width=\"350\"  >}}\n\n\tAs with the Android **Build Variants** the iOS app makes use of **Build Targets** to switch between building a custom developer app or a release app.\n\n1. From the drop-down menu choose **nativeTemplate** and the device you would like to run the app on, then click the play button (**Run Locally**) to start a build for your app:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/xc-start-build.png\" alt=\"XCode Build Toolbar\"   width=\"250\"  >}}\n\nAfter the build succeeds the app should be running on the selected device and connected to the runtime using the runtime URL you provided. \n\n## 6 Adding Dependencies{#adding-dependencies}\n\nMendix Studio Pro 9 and later support a new format for widgets and JS actions, allowing them to define them Native Dependencies required. Mendix Native Mobile Builder, is able to derive the Native Dependencies required from the app and automatically adds them to the package.json of the app's Native Template. This works with all auto-linkable Native Dependencies. \n\nIn some cases though, like when a dependency isn't derivable by its use case, like from a widget or JS action, or the dependency requires extra additions, like an elaborated initialisation process that can't be described via the auto-linking protocol, you will have to modify your app and add it manually.\n\nMendix native mobile apps are build on top of React Native. Therefore, any React Native module can be added and used in an app. The same rules apply as with any React Native app.\n\n### 6.1 Adding Dependencies Which Support Auto-Linking\n\nMendix supports RN and therefore auto-linking. Auto linking is a React Native mechanism that allows React Native to link the native dependencies defined in the *package.json* file automatically with the native apps. To add dependencies do the following:\n\n1. Add the dependency to the root *package.json* of your Native Template using `npm i -s <dependency name>`.\n1. If the dependency supports auto-linking when `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`) is run it will automatically add itself correctly to the Android and iOS apps. If the dependency does not support auto-linking or requires more configuration, follow its documentation to add the required entries manually.\n\n### 6.2 Adding Dependencies Which Do Not Support Auto-Linking\n\nIf a dependency does not suport auto-linking follow the steps of the dependency's documentation to add it to the Android and iOS apps.\n\n## 7 Removing Dependencies{#removing-dependencies}\n\nAs the requirements of an app might change, so do the required native modules and libraries. To avoid bloating your app with unnecessary libraries, consider removing unused libraries. This process is not currently automated and requires a bit of consideration when identifying any unused libraries.\n\n### 7.1 Removing Dependencies Which Support Auto-Linking\n\nTo remove dependencies which support auto-linking, do the following:\n\n1. Remove the dependency entry from the *package.json* file.\n1. Run `npm i`.\n\n### 7.2 Removing Dependencies Which Do Not Support Auto-Linking\n\nTo remove dependencies which do not support auto-linking, revert the steps you applied when adding the dependency.\n\n## 8 Read More\n\n* [How to Create a Custom Developer App](/howto/mobile/how-to-devapps/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally.md",
    "header": {
      "title": "Build a Mendix Native Mobile App Locally using the Mendix Native Builder",
      "url": "/howto/mobile/native-build-locally/",
      "parent": "build-native-apps",
      "weight": "30",
      "description": "Describes how to build your first Mendix native mobile app locally using Mendix Native Mobile Builder.",
      "tags": [
        "native",
        "mobile",
        "build",
        "local",
        "xcode",
        "android studio"
      ]
    },
    "body": "## 1 Introduction\n\nBy default when building your native mobile app binaries, Mendix uses [Visual Studio App Center](https://appcenter.ms/sign-in?original_url=%2Fapps) as a service so that users can build without having to install tools like XCode or Android Studio. However, there are cases when using App Center is not allowed or possible. In those situations, you can build your apps locally.\n\nFollow the sections below through [Building Your Native App](#building-app-project) to complete your builds. To go beyond those instructions, see [Adding Dependencies](#adding-dependencies) and [Removing Dependencies](#removing-dependencies) sections below. These sections will allow you to further customize your local builds.\n\n## 2 Prerequisites {#prerequisites}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Install [Node and NPM](https://nodejs.org/en/download/)\n\nFor iOS builds:\n\n* Have a Mac OS X machine \n* Install [XCode 12.4](https://apps.apple.com/us/app/xcode/id497799835?mt=12) and [CocoaPods](https://guides.cocoapods.org/using/getting-started.html) \n\nFor Android Builds:\n\n* Install [Android Studio](https://developer.android.com/studio) and [platform tools](https://developer.android.com/studio/releases/platform-tools)\n\t* Take care to complete the **wizard** in Android Studio, which does the following:\n\t\t* Installs a default set of the Android SDK (allowing you to accept important liscences) \n\t\t* Helps you set up an emulator\n\n## 3 Using Mendix Native Mobile Builder to Set Up Your Local App\n\n1.  Run Mendix Native Mobile Builder from your app: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/start-nbui.png\" alt=\"Start Mendix Native Mobiler Builder\"   width=\"350\"  >}}\n\n1. When Mendix Native Mobile Builder launches you will see the home screen:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/home-screen.png\" alt=\"Mendix Native Mobile Builder Home Screen\"   width=\"350\"  >}}\n1. Select **Build app for distribution**.\n1.  Fill in your app's name and the app identifier. The wizard provides defaults, but you might want to align the app identifier to use your company's reversed URL, or change the app name in some other way:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/wizard-app-details.png\" alt=\"Wizard App Details\"   width=\"350\"  >}}\n\n1. Click **Next Step** when ready.\n1.  In the **Build type** choose the **Advanced** checkbox. \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally/wizard-buildtype-local.png\" alt=\"Build type\"   width=\"350\"  >}}\n1. Select the folder for your app's Native Template. Valid choices are an empty directory or a directory with an existing Native Template.\n1. Disable any service you do not wish to use. App Center requires GitHub as a service to work.\n1. Click **Next Step** until you reach the end of the wizard. Feel free to configure any step as needed.  \n1. Select **Build type** from the side bar. \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally/advanced-buildtype-local.png\" alt=\"Build type\"   width=\"350\"  >}}\n\t\n\tAs you already selected to use the Advanced flow with this app it is not possible to switch back to just using Cloud services. But you can enable or disable any service as needed. If for instance GitHub is enabled, Native Mobile Builder will synchronize any local changes with your repository the next time you configure your app and commit your changes. But keep in mind that the Mendix Native Builder is not a replacement of a Git client, and pushing local changes to a repository can add to the configuration time.\n\n1. Select **Configure app locally** and fill in the information as needed for your app.\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally/advanced-configure-app-locally.png\" alt=\"Build type\"   width=\"350\"  >}}\n1. Click **Configure locally**\n\n\tThe process will start and it will:\n\t* Derive the required native dependencies for your app based on the pluggable widgets used in your app\n\t* Run MxBuild to build your app bundles\n\t* Checkout the correct version of Native Template for the Mendix Studio Pro version you are using\n\t* Configure the app\n\t\n\tIf GitHub is enabled, in addition to the previous steps, it will:\n\n\t* Commit the whole local copy to the app's repository\n\n## 4 Building your Native Mobile App {#building-app-project}\n\nNow that the Native Template is ready and includes the app's bundle, resources, and runtime URL configuration, it can be built into a native app. To build your app you can open the app with Android Studio or XCode for the Android and iOS app respectively, and then build as normal. More advanced use cases, such as apps for continuous integration pipelines, can make use of Gradle or xcodebuild to build the apps using command line.\n\nIn the sections below you can see the basic steps to get an app up and running on an emulator or device using Android or iOS IDEs.\n\n### 4.1 Building an Android App with Android Studio\n\n1. Run `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`) in the app root to install the required dependencies.\n1. Open Android Studio.\n1. Select the `<Native Template root>/android` as the entry point for the app.\n1. After synchronizing the app your Android Studio should look something like this. **Do not accept any suggestions to update to latest Gradle or Kotlin version**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/as-home.png\" alt=\"Android Studio\"   width=\"350\"  >}}\n\n   Mendix native mobile apps make use of **Build Variants** to build a release app or a custom developer app. The idea of **Build Variants** is a Gradle build system concept for sharing the same codebase but delivering different experiences. If the **Build Variants** are not visible, click **View** > **Tool Windows** > **Build Variants** to display them. \n\n1. Choose the **appstoreDebug** variant to be able to build and test your app on an emulator or connected device:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/as-build-variants.png\" alt=\"Android Build Varients\"   width=\"350\"  >}}\n\n1. After a short time the app should be synchronized and the play button (**Run Locally**) should be selectable. Select a device or create a device from the drop-down menu and click the play button (**Run Locally**) to build and install your app on the device:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/as-start-build.png\" alt=\"Android Build Toolbar\"   width=\"250\"  >}}\n\n\tIf no device is available use **AVD Manager** to add a device:\n\n\t\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally/avd-manager.png\" alt=\"AVD Manager\"   width=\"250\"  >}}\n\n\n### 4.2 Building an iOS App with XCode\n\n1. If you have not ran it yet, run `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`) in the app root to install the required dependencies.\n1. Change directory by running `cd ios` and run `pod install` to install the iOS dependencies.\n\n\tThe iOS app is using CocoaPods for its dependency management. For more information on installing the CocoaPods dependency manager on your machine see CocoaPods [documentation](https://cocoapods.org/#install).\n\n1. Open *.xcodeworkspace* using XCode.\n1. Navigate to **Signing and Capabilities** and choose your **Team** from the drop-down menu:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/xc-setup-team.png\" alt=\"XCode Build Toolbar\"   width=\"350\"  >}}\n\t\n\tAs with the Android **Build Variants** the iOS app makes use of **Build Targets** to switch between building a custom developer app or a release app.\n\n1. From the drop-down menu choose **nativeTemplate** and the device you would like to run the app on, then click the play button (**Run Locally**) to start a build for your app:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-build-locally-manually/xc-start-build.png\" alt=\"XCode Build Toolbar\"   width=\"250\"  >}}\n\nAfter the build succeeds the app should be running on the selected device and connected to the runtime using the runtime URL you provided. \n\n## 5 Adding Dependencies{#adding-dependencies}\n\nMendix Studio Pro 9 and later support a new format for widgets and JS actions, allowing them to define them Native Dependencies required. Mendix Native Mobile Builder, is able to derive the Native Dependencies required from the app and automatically adds them to the package.json of the app's Native Template. This works with all auto-linkable Native Dependencies. \n\nIn some cases though, like when a dependency isn't derivable by its use case, like from a widget or JS action, or the dependency requires extra additions, like an elaborated initialisation process that can't be described via the auto-linking protocol, you will have to modify your app and add it manually.\n\nMendix native mobile apps are build on top of React Native. Therefore, any React Native module can be added and used in an app. The same rules apply as with any React Native app.\n\n### 5.1 Adding Dependencies Which Support Auto-Linking\n\nMendix supports RN and therefore auto-linking. Auto linking is a React Native mechanism that allows React Native to link the native dependencies defined in the *package.json* file automatically with the native apps. To add dependencies do the following:\n\n1. Add the dependency to the root *package.json* of your Native Template using `npm i -s <dependency name>`.\n1. If the dependency supports auto-linking when `npm install` (for NPM v7 and above run `npm install --legacy-peer-deps`) is run it will automatically add itself correctly to the Android and iOS apps. If the dependency does not support auto-linking or requires more configuration, follow its documentation to add the required entries manually.\n\n### 5.2 Adding Dependencies Which Do Not Support Auto-Linking\n\nIf a dependency does not suport auto-linking follow the steps of the dependency's documentation to add it to the Android and iOS apps.\n\n## 6 Removing Dependencies{#removing-dependencies}\n\nAs the requirements of an app might change, so do the required native modules and libraries. To avoid bloating your app with unnecessary libraries, consider removing unused libraries. This process is not currently automated and requires a bit of consideration when identifying any unused libraries.\n\n### 6.1 Removing Dependencies Which Support Auto-Linking\n\nTo remove dependencies which support auto-linking, do the following:\n\n1. Remove the dependency entry from the *package.json* file.\n1. Run `npm i`.\n\n### 6.2 Removing Dependencies Which Do Not Support Auto-Linking\n\nTo remove dependencies which do not support auto-linking, revert the steps you applied when adding the dependency.\n\n## 7 Read More\n\n* [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n* [How to Create a Custom Developer App](/howto/mobile/how-to-devapps/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/build-native-apps/native-debug.md",
    "header": {
      "title": "Debug Native Mobile Apps (Advanced)",
      "url": "/howto/mobile/native-debug/",
      "parent": "build-native-apps",
      "weight": "40",
      "description": "A how-to for debugging native mobile apps using the Make It Native app.",
      "tags": [
        "native",
        "mobile",
        "debug",
        "Make It Native"
      ]
    },
    "body": "\n## 1 Introduction\n\nWhen changing your native mobile app or designing a custom widget, you may need to debug your implementation. The Make It Native app exposes a developer mode which supports debugging native mobile apps for expert developers. Using Google Chrome is recommended for this, as it starts automatically during debugging.\n\n## 2 Debugging Your Native App\n\nTo start a debugging session, do the following:\n\n1. Run your Mendix app locally on your desktop.\n2. Start the Make It Native app.\n3. Select **Enable dev mode** in the Make It Native app.\n4. Start your app on your mobile device in Mendix Studio Pro by clicking the **View App** drop-down list> **View on your device**.\n5. With your mobile device, tap **Scan QR code**, then scan the QR code on your desktop.\n\nWhen the Make It Native app finishes loading your app, do the following:\n\n1. Open the developer menu by using a three-finger long press.\n2.  Tap **Enable Remote js Debugging**.\n\nYour mobile app should start reloading, and a Chrome window should launch on your desktop pointing to a debugging address. Change the address in your browser's navigation bar to *localhost:8083/debugger-ui* manually and go to that page.\n\nIf Chrome launches but does not load your app, check that your app is running in Mendix Studio Pro. If it is, click the **Stop** button, then click the play button (**Run Locally**) again to restart your app. \n\nYou should see this page:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-debug/debug-waiting.png\" alt=\"debug waiting\" >}}\n\nIf the status remains at **Waiting**, use the reload command (pictured above) to refresh your app. The **Waiting** status should change and indicate an **active** session:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-debug/debug-active.png\" alt=\"debug active\" >}}\n\nYour browser's debugging tools should be pointing to your app. Now, you can debug your app like you would any other web app. \n\nOther tools can help you debug Mendix apps, such as the [Using React Developer Tools](#rn-dev) section below. Regardless of which tool you use, remember that Mendix uses a different port (8083) than a default React Native installation would (8080).\n\n### 2.1 Using React Developer Tools{#rn-dev}\n\nReact Developer Tools is [an app](https://github.com/facebook/react/tree/master/packages/react-devtools) which will allow you to see investigate the way your native page is rendering, adjust things like spacing in a live editor, and inspect the state and props of your pluggable and native widgets. To proceed, you must also have [Node and NPM](https://nodejs.org/en/download/) installed.\n\nYou can consult Facebook's [official documentation](https://reactnative.dev/docs/debugging) for extra information, but this document will teach you the basics of using React Developer Tools. \n\nTo install React Developer Tools, do the following:\n\n1. Open your CLI and run NPX (an executable runner for NPM) with this code: `npx react-devtools@^3`. The `@^3` ensures compatibility with Mendix's React Native version.\n\n#### 2.1.1 Debugging with iOS Simulator and Android Emulators\n\nOpen your native app in iOS Simulator or Android emulator and then do the following:\n\n1. Select **Enable dev mode** on your native app.\n2. Run `npx react-devtools@^3`.\n3.  React Developer Tools will launch and connect to Simulator. You can now inspect and modify the React Native elements the same way you could modify HTML elements in Chrome:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-debug/simulator-rn-dev.png\" alt=\"debug simulator\"   width=\"350\"  >}}\n\t\n4. In the Make It Native App, use a three-finger tap to **Toggle Element Inspector** and enable enhanced inspection capabilities.\n\n#### 2.1.2 Debugging with the Make It Native App\n\nTo use the Make It Native app with React Developer Tools, do the following: \n\n1. Connect your mobile device to your laptop with a USB cord.\n2. Run `adb devices` to ensure your device is listed.\n3. Start your native app on your device with **Enable dev mode** selected.\n4. Run `adb reverse tcp:8097 tcp:8097` to allow the applet to interact  with your device`.\n5. Run `npx react-devtools@^3`.\n6. React Developer Tools will launch and connect to your device. You can now inspect and modify the React Native elements the same way you could modify HTML elements in Chrome:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/native-debug/min-app-rn-devtools.png\" alt=\"debug min app\"   width=\"350\"  >}}\n\n## 3 Debugging Your Styling\n\nWith the Make It Native app, you can examine your styling and the structure of your pages. This makes it easier to debug, test, and inspect styling. Inspect and debug your styling by doing the following:\n\n1. Install the LTS of [node.js](https://nodejs.org/en/).\n2. Open your command line interface (CLI).\n3. Run `npm i -g react-devtools@3` to install the React developer tools.\n4. Run `react-devtools`.\n\nAfter running `react-devtools` you will see the React developer tools GUI. To use the tools to debug your styling, do the following:\n\n1. Open your app in the Make It Native app with **Enable dev mode** selected.\n2. When running your app, shake your device to open developer settings.\n3. Tap **Toggle Element Inspector** to start inspecting. \n4. Tap any styled element in your app (like a text element) to see its style information on your device and inspect and debug it in your React developer tools GUI.\n5. Shake your device and tap **Toggle Element Inspector** to turn off the inspector off.\n\n## 4 Debugging the OS Logs\n\nWhen your Mendix app is crashing or the logging in Mendix Studio Pro is incomplete, you might want to dive into your operating system's log files for information. There are 2 options:\n\n1. You could start the app in [XCode or Android Studio](/howto/mobile/native-build-locally/#building-app-project), either of which will give you more information and allow you to set breakpoint and inspect variable values. This approach is a bit more cumbersome. \n1. Get the log files directly from your device.\n\nThe first approach is self-explanatory. For information on getting log files directly from your device, however, see below.\n\n### 4.1 Using Android Logcat\n\nThe Android Debug Bridge (ADB) can get the log files via command line (specifically logcat) by following these steps:\n\n1.  Set up your phone:<br />\n\ta. If not already, enable **Developer Mode** by opening **Settings** > **System** and tap 7 times om the **Build Number**.<br />\n\tb. In **Settings** open the **Developer Options**.<br />\n\tc. Enable **USB Debugging**.\n1. Download the [Latest Android Tools](https://dl.google.com/android/repository/platform-tools-latest-windows.zip) for Windows.\n1. Unzip the files in a working directory, for example **C:\\adb**.\n1. Open a command line tool the in the working directory.\n1. Execute the command `adb.exe start`.\n1. Connect your phone via USB, then accept the **Allow USB debugging?** dialog box on your phone.\n1. Execute the command `adb logcat > output.txt`. All output will be written in *output.txt*.\n1. Open your Mendix app and implement the actions that you want to debug.\n1. Stop the log capturing in your command line tool by pressing <kbd>Ctrl</kbd> + <kbd>C</kbd>.\n1. Open *output.txt* in a text editor.\n1. Search for your issue.\n\nFor more detailed steps how to set up ADB, see [Install ADB](https://www.xda-developers.com/install-adb-windows-macos-linux/). To learn more about ADB in general, see [Command ADB](https://developer.android.com/studio/command-line/adb).\n\n## 5 Read More\n\n* [Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n* [Configure Parallels](/howto/general/using-mendix-studio-pro-on-a-mac/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/how-to-ota-appcenter.md",
    "header": {
      "title": "Release Over the Air Updates with App Center's CodePush (Deprecated)",
      "url": "/howto/mobile/how-to-ota-appcenter/",
      "parent": "distribution",
      "weight": "21",
      "description": "Describes pushing over the air updates (OTA) using App Center's CodePush.",
      "tags": [
        "native",
        "mobile",
        "ota",
        "native-builder",
        "over the air",
        "update",
        "deprecated"
      ]
    },
    "body": "\n{{% alert color=\"info\" %}}\nOTA updates via App Center's CodePush are now deprecated. Please consider switching to the newly introduced [Mendix OTA update solution](/howto/mobile/how-to-ota/). \n{{% /alert %}}\n\n## 1 Introduction\n\nUsing the Native Mobile Builder and Mendix Studio Pro you can update your Mendix native apps over the air (OTA). OTA updates are a fast and painless way of updating elements like layouts, pages, assets, or even your app's business logic (such as nanoflows and JavaScript actions) without going through the entire release process.\n\nNative apps are separated into two parts: a wrapper that functions as a native iOS or Android app, and a bundle loaded dynamically by the wrapper. Elements like your business logic and static assets are part of this dynamically-loaded bundle. When you have changes you want to deploy, the Native Mobile Builder can bundle them in a new, updated bundle and painlessly deploy them. On the next app restart, your end-users will be updated to the latest version and continue their business as usual.\n\nOTA updates are bound to a specific app version and build number. Therefore, you can target specific updates to specific versions of your app. For example, you can push an update for version 1.0.0 as a legacy version that supports older devices, and also push an update for the 2.0.0 version of your app which includes more features.\n\n{{% alert color=\"info\" %}}\nCurrently OTA  does not update your app while the app is open or minimized.\n{{% /alert %}}\n\n**This how-to will teach you how to do the following:**\n\n* Build an app that can use CodePush OTA updates\n* Push an OTA update for a released app\n* Preserve your model's integrity\n* Transfer a CLI OTA-compatible app to the Native Mobile Builder \n\n## 2 Why You Should Use Mendix's OTA Update Solution\n\nApp Center's CodePush solution is the industry standard for OTA update support for React Native apps. However, as a third-party option, it has a few shortcomings when it comes to allowing you to OTA update your apps.\n\nThird-party OTA update solutions present the following shortcomings: \n\n* **Third-party service requirements** – The third-party service requirement adds extra procurement steps; sometimes the companies behind the functionality might be blocked in certain regions. This adds unneeded overhead and costs time.\n* **Complex release cycle** – Complex release cycles can slow your app updates. In general, changes need to be deployed to your Mendix server and then an extra step is required to release the new OTA updates for your apps. That costs time, requires careful decision making, and can incur errors. \n* **No single point of truth** – No single point of truth means it is impossible to tell when and how the app should be updated or the new changes should be synchronized. Mendix removes a lot of complexity from thinking about things like synchronization or offline data. To do so, some premises have to be true. With third party solutions that is impossible to do accurately.\n* **Lack of extensibility** – Lack of extensibility, is more technical and affects mostly us. Third-party solutions are too generic and meant to work for everyone, meaning that you sacrifice performance and extensibility. Using our own solution we can tailor it specifically to your requirements. \n\nWith these shortcomings in mind, we developed a Mendix OTA update mechanism which solves these issues. Your Mendix server is the single source of truth, as OTA updates are served from the same endpoint. In addition, instead of thinking of OTA packages and deployments, we merged both actions into one. Instead of deploying a new application to your server, the native apps can simply be updated the next time they are restarted and the devices are updated. As your Mendix server is the one providing the OTA bundles, no third-party service is required. Finally, by developing an in-house solution we can continuously improve it based on your feedback.\n\nTherefore, please consider using the [Mendix OTA update solution](/howto/mobile/how-to-ota/) compatible with Studio Pro v9.7 and above.\n\n## 3 Prerequisites {#prerequisites}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Deploy your app by completing [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/).\n* Ensure you have set up and configured App Center for your app. For information on setting up App Center, see the [App Center Token](/howto/mobile/deploying-native-app/#appcenter-token) section of *How to Deploy Your First Mendix Native Mobile App*. If you previously opted out of configuring App Center while building your app, you must navigate to the **Tokens** screen and toggle on the **I want to use App Center** option.\n* Install your app on a test device or emulator.\n* Read the [Offline-First](/refguide/offline-first/) reference guide. Understand this document before issuing OTA updates or releasing new versions.\n\n## 4 When to Use OTA Updates\n\n### 4.1 Safely Pushing OTA Updates Without Redeploying {#safeToUpdate}\n\nIt is good practice to *always* redeploy your Mendix app before pushing a new OTA update. However, releasing an OTA update without redeploying your Mendix app to Mendix Cloud in these cases is usually safe:\n\n* Style changes\n* Static image, text, or other static asset changes\n* Layout changes\n* Nanoflow changes\n* JavaScript action changes\n* Widgets added or removed\n* A new custom JavaScript-only widget or module was added\n* Non-destructive model changes (for more information, see [Offline-First](/refguide/offline-first/))\n\n### 4.2 When a Full Release Is Required\n\nIf you have made any changes directly to your iOS or Android app, you will have to fully redeploy your app to the app stores for the changes to take effect. OTA updates do not suffice and a full release is required in the following cases:\n\n* The initial release of your app\n* A Studio Pro version upgrade that requires a new [Native Template](/refguide/native-template/) version\n* You fundamentally changed your app's functionality (this is an Apple App Store limitation, and will require a re-release and re-review of your app by Apple — your app might be removed if you do not comply)\n* A new native module has been added (such as the [Native Mobile AR](https://marketplace.mendix.com/link/component/117209) module—for more information see [Modules](/refguide/modules/). \n* The app has been renamed\n* The app's launcher icons have been changed\n* The splash screen has been changed\n\n## 5 Building an App That Can Use CodePush OTA Updates {#build-with-ota-support}\n\nApps built using the Mendix Native Mobile Builder have OTA updates with App Center's CodePush disabled by default. To make OTA updates via App Center's CodePush available to your app's users, you must toggle the **App Center OTA Support** capability on. \n\nNext you must build new binaries with this capability toggled on, and then release the apps to their respective app stores (only users with the new apps will be able to receive OTA updates). To do these things, follow these steps:\n\n1. Click **App** > **Build Native Mobile App**.\n1.  Navigate to **App Capabilities**: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/advanced-capabilities.png\" alt=\"Start Mendix Native Mobile Builder\"   width=\"350\"  >}}\n\n1.  Toggle **App Center CodePush OTA Support** on: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/advanced-capabilities-ota.png\" alt=\"OTA capability enabled\"   width=\"350\"  >}}\n\n1. Click **Save**.\n1.  Build an application for distribution and make a note of the version number used: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/build-release-app-for-ota.png\" alt=\"Build release app page\"   width=\"350\"  >}}\n\nTo make the OTA update functionality available to your users, release the new binaries via the appropriate app stores. If you are testing the functionality you can now install the apps on your test devices.\n\n## 6 Deploying an OTA Update\n\nOTA updates let you correct mistakes in your published apps without issuing a new release. For example, imagine you issued a new release and later found a spelling mistake on your welcome screen:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/phone-error-text.png\" alt=\"Typo in welcome screen\"   width=\"300\"  >}}\n\nBefore OTA updates, you would have to make a new release and configure it in the app stores. But OTA updates make fixing such a mistake easy.\n\nTo release a new version OTA, follow these steps:\n\n1. Correct the message to *Welcome to your new native mobile app. Thank you for using this app!*\n1. Save your changes.\n1. Note the version and build number of the app build you want to update. This how to assumes an app version of 1.0.0 and a build number of 1.\n1. Click **App** > **Build Native Mobile App**.\n1. Under the **Build app for distribution** drop-down list, select **Deploy OTA update via CodePush**.\n1. Type in the target app version you wish to release the OTA update for. This version needs to match exactly with the app version used for building the app binaries in the previous step, or the one released on the app stores.\n1. Click **Release an OTA update via CodePush**.\n1. The Mendix Native Mobile Builder will compile your app and resources and release the OTA updates.\n1.  On compilation, you will receive links to the CodePush OTA update administration pages for your Android and iOS apps:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/advanced-ota-success.png\" alt=\"OTA build step success\"   width=\"350\"  >}}\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/advanced-ota-appcenter-page.png\" alt=\"OTA App Center page\"   width=\"350\"  >}}\n\n1. Wait for the Native Mobile Builder to complete.\n1. Restart the app on your testing device. You should be greeted with the following message: **Update available: An update is available that must be installed**.\n1. Tap **Confirm** to update your app.\n1. The app should reload and greet you with the following dialog box: **Information: Update is installed**.\n\n## 7 Preserving Your Model's Integrity\n\nMendix native apps are offline first. This means you should be cautious when changing the following elements, and should avoid changing them if possible:\n\n* The navigation profile\n* An offline-first entity (for example, with entity name changes or new entity relationships)\n\nGenerally, you should avoid making destructive changes to offline-synced entities. In the rare cases this is unavoidable, releasing a new app version or doing OTA updates might put your end-users in an unrecoverable state.\n\n### 7.1 Offline Apps and Data Loss\n\nData loss can occur when OTA updates or new releases coincide with apps being offline. For example, imagine you are hard at work optimizing the data store entity structure by consolidating entities to speed up sync operations. You release that morning. You push a new runtime by clicking the **Publish** button in Studio Pro, and then run the Native Mobile Builder to push a new update to the apps. All seems to work fine.\n\nThat same morning however, your engineers were hard at work gathering field data in a remote area. Later that afternoon the engineers return back to the city and attempt to synchronize their data using the app's built-in synchronize button. Their synchronization fails. They do the only thing they can think of: restart the app. When the app starts they are greeted with the **Update Available** screen. They hit the continue button, get updated, and their data is lost or partially synchronized.\n\nThis issue is independent from OTA updates and specific to offline apps. Your offline app runs a snapshot of your runtime's model locally. So as a Mendix developer, you have to think twice before doing major changes that might make the app's state unrecoverable. In the example above the entity model was changed, and when the app attempted to synchronize it failed. This can create unrecoverable situations that will require a re-installation of the app, and can lead to data loss for unsynced data.\n\n## 8 Transferring a CLI OTA-Compatible App to Native Mobile Builder {#from-cli-to-ui}\n\nThe transition from the CLI to Mendix Native Mobile Builder for OTA-supporting apps requires a few manual steps. These steps ensure you do not have to release your apps to the app stores again. \n\n### 8.1 Gathering the Required Information \n\n1. Navigate to [App Center](https://appcenter.ms).\n1. While logged in, find the Android and iOS apps used for building your app.\n1. Check the URLs and note down the application ID as seen in the URLs. For example, in `https://appcenter.ms/users/user.name/apps/App-Android/distribute/code-push`, the Android app's ID is `App-Android`.\n1. If your app is built under an organization the URL might look like this: `https://appcenter.ms/orgs/org-name/apps/App-Android/distribute/code-push`. In this case, note the `org-name` as seen in the URL.\n\n### 8.2 Moving Your App to Native Mobile Builder\n\n1. Launch the Mendix Native Mobile Builder for your app.\n1. If you have not yet completed the setup wizard, complete it now.\n1. Quit the tool completely. \n1. Navigate to your app's directory and find the **nativemobile** folder (for example, **C:\\Users\\user\\Documents\\Mendix\\App\\nativemobile**).\n1. Enable **Hidden items** in Explorer to be able to see the *.config* file if it is not visible. \n1.  Open the *.config* file and look for a key named **App Center**. If it is there, it might contain some app names already, like this example: \n\n    ```  \n    \"appcenter\": {\n        \"iosAppName\": \"App-iOS\",\n        \"androidAppName\": \"App-Android\"\n    },\n    ```\n    \n    Optionally, if your apps are built in an App Center organization, add the organization name like this example: \n    \n    ```  \n    \"appcenter\": {\n        \"iosAppName\": \"App-iOS\",\n        \"androidAppName\": \"App-Android\"\n        \"organization\": \"your-organization-here\"\n    },\n    ```\n    \n    If the file does not exist, add it manually. Either way, **make sure to change the names to reflect the IDs of your App Center apps**. Then make sure the newly changed file is still a valid JSON.\n    \n1. Restart the Mendix Native Mobile Builder for your app. If the tool does not start, verify once more that the *.config* file is a valid JSON.\n\nTry to push an OTA update for an unreleased version of your app, for example v0.1.0. If the OTA update shows up on your App Center app's CodePush administration page, congratulations! You successfully transferred your app over to the Mendix Native Mobile Builder.\n\nIf the OTA release button remains disabled, verify that the app names added in the configuration are correct and make sure to add the organization property if your apps are under an organization. After you correct the mistakes, restart the Mendix Native Mobile Builder and try again.\n\n## 9 Read More\n\n* [Release Over the Air Updates with Mendix](/howto/mobile/how-to-ota/)\n* [Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n* [Offline-First](/refguide/offline-first/)\n* [CodePush Introduction](https://docs.microsoft.com/en-us/appcenter/distribution/codepush/)\n* [Using the CodePush UI](https://docs.microsoft.com/en-us/appcenter/distribution/codepush/using-ui)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/distribution/how-to-ota.md",
    "header": {
      "title": "Release Over the Air Updates with Mendix",
      "url": "/howto/mobile/how-to-ota/",
      "parent": "distribution",
      "weight": "20",
      "description": "Describes enabling over the air updates using built-in functionality.",
      "tags": [
        "native",
        "mobile",
        "ota",
        "native-builder",
        "over the air",
        "update"
      ]
    },
    "body": "\n## 1 Introduction\n\nUsing Mendix Studio Pro v9.7 and above, you can update your Mendix native apps over-the-air (OTA). OTA updates are a fast and painless way of updating elements like layouts, pages, assets, or even your app's business logic (such as nanoflows and JavaScript actions) without going through the entire release process.\n\nNative apps are separated into two parts: a wrapper that functions as a native iOS or Android app, and a bundle loaded dynamically by the wrapper. Elements like your business logic and static assets are part of this dynamically-loaded bundle. \n\nWith OTA updates support via the Mendix runtime, you can simply deploy a new version of your app to the cloud. Then, the changed apps will be updated automatically at the next restart as long as devices can access the runtime. This way the model, runtime, and apps can be kept seamlessly in sync.\n\n{{% alert color=\"info\" %}}\nCurrently OTA does not update your app while the app is open or minimized.\n{{% /alert %}}\n\n{{% alert color=\"info\" %}}\nMendix OTA updates are the replacement for the deprecated [App Center's CodePush OTA updates solution](/howto/mobile/how-to-ota-appcenter/). When opting in for OTA updates via the Mendix Runtime, CodePush OTA updates will be disabled. \n{{% /alert %}}\n\n**This how-to will teach you how to do the following:**\n\n* Understand the rational behind Mendix's OTA solution\n* Enable OTA updates in your Native Mobile Profile\n* Build your app \n* Preserve your model's integrity\n\n## 2 Why You Should Use Mendix's OTA Update Solution\n\nThird-party OTA update solutions present the following shortcomings: \n\n* **Third-party service requirements** – The third-party service requirement adds extra procurement steps; sometimes the companies behind the functionality might be blocked in certain regions. This adds unneeded overhead and costs time.\n* **Complex release cycle** – Complex release cycles can slow your app updates. In general, changes need to be deployed to your Mendix server and then an extra step is required to release the new OTA updates for your apps. That costs time, requires careful decision making, and can incur errors. \n* **No single point of truth** – No single point of truth means it is impossible to tell when and how the app should be updated or the new changes should be synchronized. Mendix removes a lot of complexity from thinking about things like synchronization or offline data. To do so, some premises have to be true. With third party solutions that is impossible to do accurately.\n* **Lack of extensibility** – Lack of extensibility, is more technical and affects mostly us. Third-party solutions are too generic and meant to work for everyone, meaning that you sacrifice performance and extensibility. Using our own solution we can tailor it specifically to your requirements. \n\nWith these shortcomings in mind, we developed a Mendix OTA update mechanism which solves these issues. Your Mendix server is the single source of truth, as OTA updates are served from the same endpoint. In addition, instead of thinking of OTA packages and deployments, we merged both actions into one. Instead of deploying a new application to your server, the native apps can simply be updated the next time they are restarted and the devices are updated. As your Mendix server is the one providing the OTA bundles, no third-party service is required. Finally, by developing an in-house solution we can continuously improve it based on your feedback.\n\n## 3 Prerequisites {#prerequisites}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Use Mendix Studio Pro v9.7 and above.\n* Deploy your app by completing [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/).\n* Install your app on a test device or emulator.\n* Read the [Offline-First](/refguide/offline-first/) reference guide. Understand this document before issuing OTA updates or releasing new versions.\n\n## 4 When to Use OTA Updates\n\n### 4.1 Use Cases for OTA Updates {#safeToUpdate}\n\nOTA updates are useful in the following app development cases:\n\n* Style changes\n* Static image, text, or other static asset changes\n* Layout changes\n* Nanoflow changes\n* JavaScript action changes\n* Widgets added or removed\n* A new custom Javascript-only widget or module added\n* Non-destructive model changes (for more information, see [Offline-First](/refguide/offline-first/))\n\n### 4.2 When a Full Release Is Required\n\nIf you have made any changes directly to your iOS or Android app, you will have to fully redeploy your app to the app stores for the changes to take effect. OTA updates do not suffice and a full release is required in the following cases:\n\n* The initial release of your app\n* A Studio Pro version upgrade that requires a new [Native Template](/refguide/native-template/) version\n* You fundamentally changed your app's functionality (this is an Apple App Store limitation, and will require a re-release and re-review of your app by Apple — your app might be removed if you do not comply)\n* A new native module has been added (such as the [Native Mobile AR](https://marketplace.mendix.com/link/component/117209) module — for more information see [Modules](/refguide/modules/)\n* The app has been renamed\n* The app's launcher icons have been changed\n* The splash screen has been changed\n\n## 5 Enabling and Building an App with Mendix OTA Updates Enabled {#build-with-ota-support}\n\nBy default OTA updates are disabled for your Native Mobile Profile. To enable them, do the following: \n\n1. Open your app in Studio Pro v9.7 or above.\n1. Navigate to the Native Mobile Profile\n1.  Select **Enable over-the-air updates**: \n\n  {{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota/ota-profile-screen.png\" alt=\"Startup option ota checkbox\"   width=\"350\"  >}}\n\n1. Deploy your app to the cloud.\n\nNext you must build new binaries with this capability toggled on, and then release the apps to their respective app stores (only users with the new apps will be able to receive OTA updates). To do these things, follow these steps:\n\n1. Click **App** > **Build Native Mobile App**.\n1. Build an app for distribution.\n\nTo make the OTA update functionality available to your users, release the new binaries via the appropriate app stores. If you are testing the functionality you can now install the apps on your test devices.\n\n## 6 Deploying an OTA Update\n\nOTA updates let you correct mistakes in your published apps without issuing a new release. For example, imagine you issued a new release and later found a spelling mistake on your welcome screen:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/how-to-ota-appcenter/phone-error-text.png\" alt=\"Typo in welcome screen\"   width=\"300\"  >}}\n\nBefore OTA updates, you would have to make a new release and configure it in the app stores. But OTA updates make fixing such a mistake easy.\n\nTo release a new version OTA, follow these steps:\n\n1. Correct the message to *Welcome to your new native mobile app. Thank you for using this app!*\n1. Save your changes.\n1. Deploy your new app to the cloud\n\nOn the next restart of the application, the new OTA update will be downloaded and used. \n\n## 7 Read More\n\n* [Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n* [Offline-First](/refguide/offline-first/)\n\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/get-started/_index.md",
    "header": {
      "title": "Getting Started",
      "url": "/howto/mobile/get-started/",
      "parent": "native-mobile",
      "weight": "20",
      "description": "Get started with native mobile in Mendix Studio Pro.",
      "tags": [
        "native",
        "mobile",
        "start",
        "quickstart"
      ]
    },
    "body": "\nHow-to's in this section will help you begin using the power of native apps.\n\nThe following how-to’s are available here:\n\n* [Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n* [Troubleshoot Common Native Mobile Issues](/howto/mobile/common-issues/)\n* [Implement Best Practices for Native Mobile App UI](/howto/mobile/ui-best-practices/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/get-started/common-issues.md",
    "header": {
      "title": "Troubleshoot Common Native Mobile Issues",
      "url": "/howto/mobile/common-issues/",
      "parent": "get-started",
      "weight": "40",
      "description": "Troubleshoot common issues associated with building and running native mobile apps.",
      "tags": [
        "native",
        "mobile",
        "developer",
        "troubleshoot",
        "app"
      ]
    },
    "body": "\n## 1 Introduction\n\nMendix strives to make building and running native mobile apps as simple as possible. But because some complexity is inherent in making apps, problems can come up. If you are having issues while building or running native mobile apps, please consult the sections below to see if your issue has already been solved.\n\n## 2 Make It Native App\n\nTo troubleshoot issues related to the [Make it Native](/refguide/getting-the-make-it-native-app/) app, see the sections below.\n\n### 2.1 Port Issues\n\nWe recommend keeping the **Runtime port** in your [configuration](/refguide/configuration/#server) on **8080**. If you change it, do not change it to **8083**, because that is designated for app packaging.\n\n### 2.2 Wifi Network Settings\n\nIf you are using Windows, make sure your WiFi network is set to **Private**. Windows often sets WiFi to **Public** by default, which blocks incoming connections.\n\n### 2.3 Error: Unable to Load Script {#unable-load-script}\n\nDepending on your device settings and network characteristics, the Make it Native app can fail to connect to the runtime. If so, the Make it Native app can show the following error messages:\n\n*  **Unable to load script**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/common-issues/unabletoloadscript.png\" alt=\"unable to load script\"   width=\"250\"  >}}\n\n*  **Cannot detect your runtime**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/common-issues/min-error-firewall.png\" alt=\"cannot detect runtime\"   width=\"250\"  >}}\n\nThese failures are often caused by a firewall blocking your device from accessing your laptop. In such cases, attempts to open the runtime URL from a mobile browser will also fail. To mitigate these issues, please make sure your firewall allows incoming traffic to your laptop on the runtime and native packing ports (8080 and 8083 by default). Instructions on how to do this differ per firewall. We recommend you consult your firewall administrator.\n\nFor the Windows Defender firewall, the most common firewall, do the following:\n\n1. Make sure that your computer and the mobile device are connected to the same network.\n1. Make sure that incoming connections are allowed by doing the following:<br />\n    a. Open **Firewall & Network Protection** settings in Windows.<br />\n    b. Go to **Advanced Settings**.<br />\n    c. Select the **Inbound Rules** and scroll to the **Node.js** entries.<br />\n    d. For each Node.js entry, note their values in the **Program** column. They should all have a green check mark in front of them.<br /> \n    e. If the **Program** column shows a Mendix installation directory, then there should be a green icon in front of the entry. If this is not the case, double-click the entry and select **Allow the connection**:\n    \n    {{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/common-issues/inboundrules.png\" alt=\"inbound rules\"   width=\"350\"  >}}\n\n1. Windows distinguishes between two types of networks: private and public. Windows Defender Firewall applies stricter regulations for public networks. If, and only if, you are connected to a trusted network, configure the network as **Private** on your computer.\n\n### 2.4 Error: Unable to Detect Studio Pro\n\nIf your port forwarding settings are correct but you still get an error that the Make It Native app **cannot detect Studio Pro**, please reinstall the Make It Native app on your mobile device.\n\n## 3 Configure Parallels\n\nTo use Studio Pro on a Mac device, you will first need to install and configure Parallels. For more information, see [How to Configure Parallels](/howto/general/using-mendix-studio-pro-on-a-mac/).\n\n## 4 Read More\n\n* [How to Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/get-started/getting-started-with-native-mobile.md",
    "header": {
      "title": "Get Started with Native Mobile",
      "url": "/howto/mobile/getting-started-with-native-mobile/",
      "parent": "get-started",
      "weight": "10",
      "description": "A how-to for creating a native mobile Mendix app and viewing it on a mobile device.",
      "tags": [
        "native",
        "mobile",
        "developer",
        "test"
      ]
    },
    "body": "\n## 1 Introduction\n\nTo use Mendix Studio Pro's native mobile app capabilities, you can use the [Blank Native Mobile App](https://marketplace.mendix.com/link/component/109511/) app from the Mendix Marketplace. This app is optimized to quickly build a native mobile app. Out of the box, this app gives you a native page, a native phone profile to enable native device navigation, a native layout with menus, and native widgets and actions which leverage device capabilities.\n\nThe Blank Native Mobile App also includes six modules:\n\n* **Administration** – helps you manage users\n* **Atlas Core** – enables app styling\n* **Atlas Native Mobile Content** – allows you to style native mobile apps with page templates and building blocks\n* **Atlas Web Content** – allows you to style web apps and progressive web apps with page templates and building blocks\n* **Nanoflow Commons** – contains generic useful nanoflow actions\n* **Native Mobile Actions** – contains various native widgets and nanoflow actions that leverage device capabilities\n\n## 2 Prerequisites {#prerequisites}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Have a mobile device to test your native mobile app \n* For information on device requirements, see [System Requirements](/refguide/system-requirements/)\n* If you wish to use an emulator for Android mobile testing, install a product such as [Bluestacks](https://www.bluestacks.com/nl/index.html) or [Genymotion](https://www.genymotion.com/) (your emulator must have Google Play services supported)\n\n## 3 Creating a New App Based on the Quickstart App {#quickstartapp}\n\nFor details on making a Mendix app using the Blank Native Mobile App, download the Make It Native 9 app on either the [Google Play store](https://play.google.com/store/apps/details?id=com.mendix.developerapp.mx9) or the [Apple App Store](https://apps.apple.com/us/app/make-it-native-9/id1542182000). This app template includes the latest version of Atlas UI, as well as the [Native Mobile Resources](/appstore/modules/native-mobile-resources/) module containing widgets and nanoflow actions for native mobile apps. For more information on building native mobile apps, see the [Build a Native Mobile Inspection App](https://academy.mendix.com/link/path/66) learning path (you must be signed in to the Mendix Platform to see this learning path). Using the Make It Native app to view the changes to your Mendix app, see the sections below.\n\n### 3.1 Starting a Quickstarter App \n\nTo start a new app based on a template, follow these steps:\n\n1. Open Mendix Studio Pro. Select **File** > **New App** , and then select the **Blank Native Mobile App**.\n2. Click **Use this starting point**.\n3. Click **Create app** to close the dialog box.\n4. Click the play button (**Run Locally**) to see the app in action. Please note that starting a native mobile app for the first time can take a bit longer (about one minute total) than subsequent instances.\n5. After running your app, you may see a Windows Security Alert dialog box. Accept the permissions selected by default and click **Allow access** to close the dialog box.\n6.  If asked to create database **'default'**, click **Yes**.\n\nAt this point you have a running native mobile app. To view your app on a mobile device, however, you need to download the Make It Native app.\n\n### 3.2 Downloading and Installing the Make It Native App\n\n#### 3.2.1 Downloading for Android\n\nTo view your app on an Android device (or emulator), you must download and install the Make It Native 9 app from the [Google Play store](https://play.google.com/store/apps/details?id=com.mendix.developerapp.mx9):\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/getting-started-with-native-mobile/make-it-native-googleplay.png\" alt=\"native app on googleplay\"   width=\"500\"  >}}\n\n#### 3.2.2 Downloading for iOS {#downloading-for-ios}\n\nTo view your app on a iOS device, you must download and install the Make It Native 9 app from the [Apple App Store](https://apps.apple.com/us/app/make-it-native-9/id1542182000):\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/getting-started-with-native-mobile/make-it-native-ios.png\" alt=\"native app on app store\"   width=\"500\"  >}}\n\n### 3.3 Viewing Your App on Your Testing Device\n\nViewing your app on a mobile device will allow you to test native features and other aspects of your app. This section is written for mobile devices, but you may use an Android emulator mentioned in the [Prerequisites](#prerequisites) section above. To view your app, follow these steps:\n\n1. Locate your app's QR code in Mendix Studio Pro by clicking the drop-down menu next to the **View App** button, then selecting **View on your device** and navigating to the **Native mobile** tab. Here you will see your test app's QR code.\n2. Start the Make It Native app by tapping its icon on your device.\n3.  Tap the  **Scan a QR Code** button:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/getting-started-with-native-mobile/scan-qr.png\" alt=\"Scan QR Code\"   width=\"500\"  >}}\n\n4. If prompted, grant the app permission to access your device's camera.\n5. Point your mobile device's camera at the QR code. It will automatically launch your test app on your mobile device.\n\n{{% alert color=\"warning\" %}}\n\nYour mobile device has to be on the same network as your development machine for the Make It Native app to work. If this is the case and the connection still fails, make sure that communication between devices is allowed in the Wi-Fi access point. Also, we recommend keeping the **Runtime port** in **App Settings** > **Edit** on **8080**. If you change it, do not change it to **8083**, because that is designated for app packaging.\n\n{{% /alert %}}\n\nNow you can see your app on your device. While this is just a template app, whenever you make changes you will be able to view them live on your Make It Native app.\n\nYou may notice an **Enable dev mode** toggle on the Make It Native app home page. Turning this toggle on will give you more detailed warning messages during error screens, as well as additional functionality on the developer app menu:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/getting-started-with-native-mobile/enable-dev-mode.png\" alt=\"enable dev mode\"   width=\"500\"  >}}\n\n### 3.4 Viewing Changes to Your App on Your Testing Device {#viewingchanges}\n\nTo see how changes made in Mendix Studio Pro are displayed live on your testing device, make a small change to your app.\n\n1.  Put a text widget on your app's home page. Then, write some text into it. In this example, \"Native rules!\" has been added: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/get-started/getting-started-with-native-mobile/new-text-studiopro.png\" alt=\"new studio pro text\" >}}\n\n2. Click the play button (**Run Locally**) to automatically update the running app on your device, and see your new text. When you click the play button (**Run Locally**), your app will automatically reload while keeping state. \n\nIf you get an error screen while testing your app, there are easy ways to restart it: \n\n* Tap your test app with three fingers to restart your app\n* With the **Enable dev mode** toggle turned on, hold a three-fingered tap to bring up the developer app menu—here you can access **ADVANCED SETTINGS** and **ENABLE REMOTE JS DEBUGGING** \n\nFor more detailed instructions on debugging a native mobile app, see [Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/).\n\n## 4 Read More\n\n* [How to Build Pluggable Widgets](/howto/extensibility/pluggable-widgets/)\n* [Native Mobile Styling Reference Guide](/refguide/native-styling-refguide/)\n* [How to Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/get-started/ui-best-practices.md",
    "header": {
      "title": "Implement Best Practices for Native Mobile App UI",
      "url": "/howto/mobile/ui-best-practices/",
      "parent": "get-started",
      "weight": "50",
      "description": "This document will teach you how to build a native mobile app's UI.",
      "tags": [
        "ux",
        "native",
        "mobile",
        "ui"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis document discusses how Mendix Platform users can build a native mobile app's user interface (UI). Other topics like testing and distributing are not discussed here. The guidelines in this document are general advice and can be adjusted to better suit use cases and specific situations.\n\n## 2 Roles\n\nWhen building a native application, different roles are needed for app development. This does not necessarily mean there must be a different person for every role, as developers can serve multiple roles. Also, depending on your app, there should be a difference in the level of expertise among certain roles.\n\n### 2.1 Different Types of Roles\n\nFor most apps, development teams should include the following roles in their overall configuration:\n\n* **Mendix development** – Building the domain model, pages, logic, integrations, and overall flow of the app. This is the most common and available role.\n* **Front-end development** – Implementing the styling or the theme of the app as created in the designs.\n* **UI design** – Designing the user interface, for example how the screens and components look, and determining the theme colors, typography, spacing, and borders.\n* **UX design** – Designing the user experience (such as the flow of the app), determining which use cases to support, and deciding how certain functions should work.\n* **Widget development (optional)** – Building new widgets to provide new interaction patterns or UI components that are not offered out of the box by Mendix or available though the Mendix Marketplace.\n\nAs mentioned above, not all apps require five different persons each handling one of these roles. Different team configurations are common.\n\n### 2.2 Roles, Staff, and Types of Apps\n\nWhich roles and staff make up your development team depends on the type of apps you produce. In cases when less UI or UX expertise is required, most often with B2E apps, a Mendix developer can fill all roles. If the default theme is sufficient, or there are restrictions on time and budget this can be an effective configuration. By using Mendix's default Atlas theme and by discussing with users or the product owner, one Mendix developer can build the UI and UX on their own.\n\nIn apps where custom UX or UI is more important (for example B2C and B2B apps) the following combinations are often employed:\n\n* **UI design + UX design** – This configuration is often used if an in-house UX team is used or a design agency is hired.\n* **UI design + UX design + front-end development** – UX or UI experts that also have the skills to implement their designs and UX are key for this configuration. For example, several people in Mendix Expert Services are of these type.\n* **Mendix development + front-end development** – A Mendix developer who knows how to implement styling, but does have the skills to create the design.\n\n## 3 Process\n\nAt Mendix we strongly believe in enabling other developers as they grow to scale and speed up development. In general there are more Mendix developers than UI or UX designers. Therefore, when building a mobile app it is important that a UI or UX designer can enable Mendix developers as much as possible to speed up development.\n\nOne could compare building with Mendix to building with toy blocks. Give a maker a set of generic blocks that can be combined, and they can build anything. However if they constantly need to buy new types of specific blocks,  their building would be slow and hampered.\n\nTo learn about building a Mendix native mobile app's UI, consult the sections below. Be sure to see the [Configure Design Properties](#configure-design-props) section below for key information on implementing design easily.\n\n### 3.1 Creating App Designs Using a UI Kit\n\nBy designing a set of reusable components including variations, a UI designer can create a UI kit that can be used to design pages. This includes settings like the brand colors, typography, spacing settings, and the UI components (for example buttons and inputs) including variations. Designers frequently use the [Sketch](https://www.sketch.com/) tool to complete these tasks with satisfying results.\n\nThis UI kit will be the input for creating the Mendix theme and related components. Therefore it helps to have Mendix and front-end knowledge to align what is available already in Mendix and what is needed for the designs..\n\n### 3.2 Translating the UI Kit to Mendix Theme and Components\n\nThe front-end developer can translate the UI kit to a Mendix theme and standard layouts, as well as building blocks and page templates.\n\n#### 3.2.1 Setting Up Main Theme Settings\n\nThe goal of configuring the theme setting is to quickly implement the look and feel of your app or company branding. Mendix comes ready with a highly-configurable theme which gives you a head start in creating your app's overall look and feel. Configuring the theme settings inside your app's *theme/native/custom-variables.js* file.\n\n#### 3.2.2 Configuring Design Properties {#configure-design-props}\n\nThe goal of design properties is to enable developers to implement design without having to know custom class names or write custom styling. This is a very important step in enabling developers.\n\nBy default Mendix has a default set of design properties which enable developers to build pages with several options. We advise you to change, add, or remove design properties according to your variations in the UI kit.\n\nFor example, Mendix offers a set of button variants (default, secondary, warning, success, and danger). However, during your design process you can choose to just have a default and a secondary variant. Choices like this are a part of UI design. It is up to people in UI and front-end design roles to determine how much freedom a Mendix developer should have.\n\nThe design properties are located in *theme/settings-native.json*, and more information be found in the [Design Properties API Documentation](/apidocs-mxsdk/apidocs/design-properties/).\n\n#### 3.2.3 Creating the App Layouts\n\nThe default Atlas theme comes pre-bundled with a set of layouts. If these do not fit your app’s design, you can create or customize the layouts and name them accordingly. Do not change the supplied layouts. Either create a separate module with the custom layouts, page templates, and building blocks or [create your own](/howto/front-end/create-a-company-design-system/).\n\n#### 3.2.4 Creating Building Blocks for Common UI Structures\n\nApps often have multiple instances of patterns on pages or more complex UI patterns. For these cases it is useful to create building blocks so that other Mendix developers can easily apply common patterns. In building blocks, you can use custom class names in order to be more specific. For that properties that developers should be able to change in building blocks, use design properties as much as possible.\n\n#### 3.2.5 Creating Page Templates for Common Page Structures\n\nSimilar to buildings blocks, developers can create standard page templates so that other developers can easily implement a common type of page.\n\n### 3.3 Implementing Your UI Using Theme and Content\n\nA Mendix developer can build an app's interface based on that app's theme, design properties, layouts, building block, and page templates. When missing capabilities make it difficult to build the pages as designed, it is good to iterate on the UI kit, theme, or available content. In certain cases it can be good to apply specific styling as explained in the next section.\n\n### 3.4 Implementing App or Use-Case Specific Styling\n\nThere are several cases in which an app's standard theme and content is not rich enough to build every page. In these cases front-end development can be used to implement specific styling. \n\n### 3.5 Iterating and Discussing\n\nMendix is a platform for Agile development environments, which also applies when creating a UI kit and the related Mendix themes and components. Keep iterating, discussing, and improving.\n\n## 4 Best Practices \n\n### 4.1 Using Design Properties as Often as Possible\n\nTry to avoid custom styling. Instead, use the available design properties as much as possible. This makes it easier for other developers to understand what is styled. We do not recommend creating a single design property that combines different styles, for example a property with padding and font size styles combined.\n\n### 4.2 Planning to Reuse as Much as Possible\n\nA common pitfall is to start implementing directly from designs without thinking about reuse. While implementing directly can make sense for small apps, this practice risks creating several custom classes, spawning more variations of components which can slow down development, and creating significant technical debt.\n\nTry to avoid very specific class names. Very specific class names are often only used once, although the styles are probably used at least a few times. Combine and rewrite classes where possible. This will keep the theme clean and simple, and makes it easier to create design properties and enable Mendix developers.\n\n### 4.3 Never Changing Something in the Core Folder\n\nBy changing styling in the **core** folder you risk incurring errors the next time you update Atlas. Updating Atlas might also be more difficult. \n\nA large part of your app's overall styling can be changed in *theme/native/custom-variables.js*. However, if more changes are needed you could extend a widget’s default styling or define the default styling yourself. For more information, see [How to Extend Design Properties](/howto/front-end/extend-design-properties/).\n\n### 4.4 Favoring Design Properties Over Including Properties\n\nAvoid including properties which can be set with design properties. By being careful with your properties, your apps will be easier for other developers to understand and change. For example, if you make a certain element always have a margin there is a chance that this will not fit in certain designs. However, a developer could easily set a margin using design properties. One particularly useful approach is providing a default spacing this will cover 90% of cases, and give the developer the option to overwrite it using design properties. \n\n### 4.5 Studying the Core Styling \n\nThe default Mendix theme is a complete theme which serves as a good source of examples for how to approach styling.\n\n### 4.6 Keeping Styling Maintainable\n\nIt is a common pitfall to keep adding classes to a single file. However, this will make the file more difficult to maintain. Here some best practices for keeping styling maintainable:\n\n* Apply clear, descriptive, and consistent names in styling—add comments when needed\n* Use variables as much as possible for consistency and easy updating\n* Combine and reuse parts of classes by using the spread operator `…`\n* Split the styling in logical parts, group related styles together, and split them into separate files if those groups become too large—if you have multiple custom styling files, use *theme/native/app/custom.js* to import all those files (this will make updating easier, as customizations are only in the *app* folder)\n* *Custom.js* should not contain classes—only `export * from …*` statements to include classes from other files\n* Put the styling for building blocks and page templates in *theme/native/ui_resources/{YOUR_APP_OR_MODULE_NAME}* and include it in *theme/native/main.js*\n* Create separate folders in the app folder for the generic company styling and app specific styling (this enables re-use and consistency between apps)\n* Always think about reuse; that common class you just created may be useful in other apps as well. Consider adding them to your company theme\n\n\n## 5 Read More\n\n* [Native Mobile Styling Reference Guide](/refguide/native-styling-refguide/)\n* [How to Style Your Mendix Native Mobile App](/howto/mobile/how-to-use-native-styling/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/_index.md",
    "header": {
      "title": "Implementation",
      "url": "/howto/mobile/implementation/",
      "parent": "native-mobile",
      "weight": "30",
      "description": "Implement native mobile features in Mendix Studio Pro.",
      "tags": [
        "native",
        "mobile",
        "start",
        "quickstart"
      ]
    },
    "body": "\nHow-to's in this section will help you implement key features of native apps.\n\nThe following how-to’s are available here:\n\n* [Add Fonts to Your Native Mobile App](/howto/mobile/native-custom-fonts/)\n* [Implement Native Mobile Styling](/howto/mobile/native-styling/)\n* [Set Up Deep Links in Native Mobile Apps](/howto/mobile/native-deep-link/)\n* [Set Up Maps in Native Mobile Apps](/howto/mobile/how-to-maps/)\n* [Use Notifications](/howto/mobile/notifications/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/how-to-maps.md",
    "header": {
      "title": "Set Up Maps in Native Mobile Apps",
      "url": "/howto/mobile/how-to-maps/",
      "parent": "implementation",
      "weight": "40",
      "description": "This guide will teach you to set up native mobile maps capabilities for Android and Apple devices.",
      "tags": [
        "maps",
        "google maps",
        "native",
        "mobile"
      ]
    },
    "body": "\n## 1 Introduction\n\nThe Maps module allows you to work with maps. Consult the instructions below to include map capabilities in your native mobile apps.\n\n{{% alert color=\"info\" %}}\nThe Mendix Native Mobile Builder does not currently support connections behind proxy servers. Please make sure you are not behind a proxy server and that your security rules allow access to the required services.\n{{% /alert %}}\n\n## 2 Prerequisites\n\n* Complete the [Prerequisites](/howto/mobile/deploying-native-app/#prerequisites) section of *How to Deploy Your First Mendix Native Mobile App*\n* Create an app on the [Google Cloud Console](https://console.cloud.google.com/google/maps-apis/overview) and have Google Maps enabled for Android (and iOS, if you wish to use Google Maps on iOS as well) and also posses an [API key](https://developers.google.com/maps/documentation/android-sdk/get-api-key). \n* Before you can start using the Google Maps Platform APIs and SDKs, you must sign up and create a [billing account] (https://developers.google.com/maps/gmp-get-started#create-billing-account).\n* Install Mendix Studio Pro v8.15.0 and above to use the Native Mobile App Builder\n\n## 3 Setting Up the Maps Module\n\nMake sure you have app containing the Maps module. This is a core module, so it is available in the **Widgets** panel. You can either add it to an existing app or make a new app from scratch. \n\n### 3.1 Configuring Map Provider\n\nNext you will configure the **Maps** widget provider. You will have two choices: **Default** and **Google Maps**. Selecting **Default** will have your app use the default-enabled map on your device. This means using Google Maps on Android devices and Apple Maps on iOS devices. Selecting **Google Maps** as your **Maps** configuration will have only Google Maps used on both platforms:\n\n1. Double-click your Maps widget and Selecting the **Map** tab. \n1. Select either the **Default** or **Google Maps** provider:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/how-to-maps/maps-provider-configuration.png\" alt=\"maps provider configuration\"   width=\"400\"  >}}\n\n### 3.2 Configuring Maps Capability \n\n1. Set up a native template with the **Native Mobile App Builder**. This can be launched from the **App** menu as shown in [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/). Complete the wizard and configure the app's details and tokens:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/how-to-maps/launch-native-mobile-app-builder.png\" alt=\"launch native mobile builder\"   width=\"400\"  >}}\n\n1. Once done with the wizard, select the **Capabilities** menu item:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/how-to-maps/capability-menu-option.png\" alt=\"capability menu option\"   width=\"400\"  >}}\n\n1. Enable the maps capability. This exposes a set of configurations:\n   \n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/how-to-maps/maps-input-fields.png\" alt=\"maps input fields\"   width=\"400\"  >}}\n\n\t* As described in the Prerequisites section, the API key gives the maps widget access to Google Cloud services\n\t* The **Purpose for maps** string is a specialized text that tells Apple why you need to use maps in your app (Apple requests explanation as maps use device location data)\n\t* **I want to use Apple Maps for iOS** mirrors the decision explained in the Configuring Map Provider section above\n   \n1. Click the **Save** button. \n1. Navigate to the build page then click **Build**.\n\n{{% alert color=\"info\" %}}\nWhen running locally from source, on iOS you have to run `pod install` once more\n{{% /alert %}}\n\n\n## 4 Read More\n\n* [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n* [How to Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/native-custom-fonts.md",
    "header": {
      "title": "Add Fonts to Your Native Mobile App",
      "url": "/howto/mobile/native-custom-fonts/",
      "parent": "implementation",
      "weight": "20",
      "description": "This tutorial will teach you to enrich the design of your native mobile app with custom fonts.",
      "tags": [
        "mobile",
        "debug",
        "android",
        "ios",
        "native",
        "fonts"
      ]
    },
    "body": "\n## 1 Introduction\n\nGood typography plays a major role in conveying your app's message while reinforcing your company's brand identity. Setting up the fonts you need is as simple as dragging and dropping the required fonts and setting your app's style. As you can see in the [Prerequisites](#prerecs) section below, Mendix offers two ways for you to add custom fonts: using the Mendix Native Mobile Builder or manually.\n\n### 1.1 Introduction to Fonts in Mendix Native Mobile Apps\n\nWhen it comes to fonts files, several standards and types are common. True Type (*.ttf*), Open Type (*.otf* or *.ttf*), and Web Open Font Format (*.woff*) are the most common. \n\nThe *.woff* file type does not work with native mobile apps. As this document focuses on native mobile platforms only, you should not use this file type in your apps.\n\nOpen Type fonts support a variety of metadata as also the possibility to package multiple font varieties in a single file. This feature is not supported for mobile platforms. You should have each variety of the Font Family you would like to add as a separate file. \n\nAndroid and iOS each take a different approach to fonts. Where Android requires an explicit declaration for each font added, iOS can derive the font type and font style dynamically. Adding fonts to each platform requires a different approach. Android expects font files to exist in a specific folder, while iOS requires the font files to be explicitly linked in its build process. \n\nFurthermore, both platforms resolve available fonts differently. While iOS fully supports Open Type fonts and can select fonts based on their metadata, Android requires explicit linking of the font file to the weight and style.\n\nReact Native, the underlying framework of Mendix native mobile apps, unifies the process of adding fonts. For example, fonts added under **assets/fonts** on Android are explicitly linked in the app. These fonts are then exposed directly in the framework for styling your widgets using the common CSS properties you use routinely.\n\nThere are limitations to mobile font capabilities. For example, Android supports a very limited set of font types: regular, bold, italic, and bold italic.\n\nWhat does that mean for your app's CSS styles? \n\nFor example, what would happen if you were to use the following snippet in your CSS styles:\n\n```\n{ \n    fontWeight: 550\n}\n```\n\nYour font, when running app on Android, would end up looking regular instead of the semi-bold font you would expect. This is because Android would first look up the available font styles registered. Unable to resolve the weight, it would fall back to the next best option. The same applies to styles.\n\nIn addition, Android expects the font filename to be a combination of the actual font family name, weight, and style. For example for Time New Roman bold italic, it expects something like *TimeNewRoman_bold_italic.ttf*. Failing to comply with these naming conventions makes the `fontFamily`, `fontWeight`, and `fontStyle` attributes fail to style text correctly.\n\nSo how can these issues be mitigated? First of all, explicitly styling text using the common CSS text attributes `fontWeight` and `fontStyle` should be avoided. The results will vary per platform. Instead, use postscript names. Specifically, instead of a single `fontFamily` attribute with multiple weights and styles, a font family needs to be defined per weight and style combination.\n\nFor example, instead of writing this: \n\n```\nexport const bold = {\n    fontFamily: \"Times New Roman\",\n    fontWeight: \"bold\" | \"500\"\n}\n```\n\nDefine a constant like this: \n\n```\nexport const timesNewRomanFontFamily = {\n    regular: \"TimesNewRomanPSMT\",\n    boldItalic: \"TimesNewRomanPS-BoldItalicMT\",\n    bold: \"TimesNewRomanPS-BoldMT\",\n    italic: \"TimesNewRomanPS-ItalicMT\",\n};\n```\n\nThen define the styles as follows: \n\n```\nexport const boldText = { \n    fontFamily: timesNewRomanFontFamily.bold,\n}\n```\n\nNow wherever you use `boldText`, you will get the expected result on both platforms consistently.\n\n## 2 Prerequisites {#prerecs}\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\nBefore adding fonts [using the Mendix Native Mobile Builder](#fonts-nbui):\n\n* Run through the Native Mobile Builder's wizard at least once\n\nBefore [adding fonts manually](#manual):\n\n* Understand the native mobile [local build process](/howto/mobile/native-build-locally/)\n* Locally check out your repository \n* Understand git and have a git tool installed\n* Have XCode installed for the iOS sections below\n\n## 3 Adding Custom Fonts With the Mendix Native Mobile Builder {#fonts-nbui}\n\nThe Mendix Native Mobile Builder simplifies adding custom fonts to your app. It configures both Android and iOS app and also provides the snippets needed to simply copy and paste in your Mendix app's native styles. To add custom fonts to your app, follow these steps: \n\n1.  Start the Mendix Native Mobile Builder:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/distribution/build-native-apps/deploying-native-app/start-nbui.png\" alt=\"Start Native Builer\"   width=\"350\"  >}}\n\n1.  Navigate to **Custom Fonts**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/advanced-fonts.png\" alt=\"Custom fonts screen\"   width=\"350\"  >}}\n\n1.  Drag and drop the font files you would like to apply. For example, Times New Roman is being used here. When the process is complete you should see the font family uploaded in the list:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/advanced-fonts2.png\" alt=\"Custom fonts screen filled\"   width=\"350\"  >}}\n\n1.  Extend the list using the arrow to the right. Verify the expected fonts are available. You can continue by adding as many fonts as you prefer:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/advanced-fonts2.png\" alt=\"Custom fonts screen filled & extended\"   width=\"350\"  >}}\n\n1.  Click the snippet button to get the code snippet which you can copy to your styles:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/advanced-fonts4.png\" alt=\"Custom fonts screen code snippet\"   width=\"350\"  >}}\n\n1. Build your app to get a new binary with fonts included. \n\n## 4 Using Custom Fonts in Your App\n\nTo use the new fonts to style your content, follow these instructions:\n\n1.  Copy the snippet from the Native Mobile Builder:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/advanced-fonts4.png\" alt=\"Custom fonts screen code snippet\"   width=\"350\"  >}}\n\n1.  Open your styles *js* file and paste the snippet there. For this example, the *custom-variables.js* file is being used. For more information on styling your app, see [How to Style Your Mendix Native Mobile App](/howto/mobile/how-to-use-native-styling/):\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/custom-variables.png\" alt=\"Custom variables file\"   width=\"350\"  >}}\n\n1.  The constant can now be imported and used to define the font family of any test style. Elements styled using these classes will now be styled using the font:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/custom-style.png\" alt=\"Custom style\"   width=\"350\"  >}}\n\n## 5 Adding Custom Fonts Manually {#manual}\n\nWhile the Mendix Native Mobile Builder simplifies adding fonts, you might find yourself in a situation where you must add fonts manually instead.\n\n### 5.1 Adding Custom Fonts to an Android App\n\nTo manually add custom fonts to your Android app, follow these instructions: \n\n1. Collect all the fonts you would like to use.\n1.  Use a tool like [Open Type Inspector](https://opentype.js.org/font-inspector.html) and derive the PostScript names for each font:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/postscript-name.png\" alt=\"Open Type Inspector name metadata\"   width=\"350\"  >}}\n\n1. Rename the fonts to match the Postscript name. The Times New Roman font used in our example has these options: \n    * TimesNewRomanPSMT, for regular\n    * TimesNewRomanPS-BoldMT, for bold\n\n1. Copy the renamed fonts to the `android\\app\\src\\main\\assets\\fonts` folder.\n1.  If you plan on using the tool to build your app, commit your changes:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/custom-fonts-android-repo.png\" alt=\"GitHub repo after uploading cutom fonts\"   width=\"350\"  >}}\n\n1. Build your Android app using your preferred method.\n\nCongratulations, you have learned how to add fonts to an Android app.\n\n### 5.2 Adding Custom Fonts to an iOS App\n\nUse XCode to manually add fonts to an iOS app:\n\n1. Collect all the fonts you would like to use.\n1.  Use a tool like [Open Type Inspector](https://opentype.js.org/font-inspector.html) and derive the PostScript names for each font:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/postscript-name.png\" alt=\"Open Type Inspector name metadata\"   width=\"350\"  >}}\n\n1. Rename the fonts to match the Postscript name. The Times New Roman font used in our example has these options: \n    * TimesNewRomanPSMT, for regular\n    * TimesNewRomanPS-BoldMT, for bold\n\n1. Open XCode and select the workspace at **ios\\NativeTemplate.xcworkspace**.\n1. Drag and drop the renamed fonts to the **Resources/Fonts** folder in App Explorer. \n1.  Select both targets from the dialog box that shows up:\n\n     {{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/custom-fonts-xcode-dialog.png\" alt=\"XCode option dialog for adding files\"   width=\"350\"  >}}\n\n1.  Your folder structure should look like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/custom-fonts-project-explorer-filled.png\" alt=\"App Explorer with fonts\"   width=\"350\"  >}}\n\n1.  Open the *Info.plist* file by pressing <kbd>{⌘}</kbd> + <kbd>{Shift}</kbd> + <kbd>{0}</kbd>` and searching for the file. Press <kbd>{Enter}</kbd> to open it:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/xcode-open-infoplist.png\" alt=\"XCode Open file dialog\"   width=\"350\"  >}}\n\n1.  Find the key `Fonts provided by the application`. Expand it if needed:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/xcode-plist-fonts.png\" alt=\"Plist fonts key\"   width=\"350\"  >}}\n\n1. Press the **+** button next to the key to create a new, empty item in the list.\n1.  Type the font file name you wish to add as the value. In this case, we are adding the regular Times New Roman font, therefore the filename value is `TimesNewRomanPSMT.ttf`:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/xcode-plist-fonts-filled.png\" alt=\"Plist fonts key filled\"   width=\"350\"  >}}\n\n1.  If you plan on using the tool to build your app, commit your changes:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-custom-fonts/custom-fonts-ios-repo.png\" alt=\"GitHub repo after uploading cutom fonts\"   width=\"350\"  >}}\n\n1. Build your iOS app with your preferred method.\n\nCongratulations, you have learned how to add fonts to an iOS app. \n\n## 6 Read More\n\n* [Implement Native Mobile Styling](/howto/mobile/native-styling/)\n* [Troubleshoot Common Native Mobile Issues](/howto/mobile/common-issues/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/native-deep-link.md",
    "header": {
      "title": "Set Up Deep Links in Native Mobile Apps",
      "url": "/howto/mobile/native-deep-link/",
      "parent": "implementation",
      "weight": "30",
      "description": "Connect URLs to your native mobile app by adding a deep link.",
      "tags": [
        "deep link",
        "url",
        "native",
        "mobile",
        "developer app",
        "make it native"
      ]
    },
    "body": "\n## 1. Introduction\n\nWhile URLs typically open websites, they can also open an installed app on your mobile device. With this tutorial you will learn how to connect the URL `app://myapp` to your Mendix native app installed on your Android or iOS device. It is also possible to pass additional data using paths, query parameters, and hashes. Passing additional data could look like this: `app://myapp/task/123?action=close#info`.\n\nA URL is constructed of these parts (everything after **path** is defined as a detail):\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/url-parts.png\" alt=\"url details\" >}}\n\nYou can also register the handling of a normal weblink beginning with `http://` or `https://`. However this requires some more work for iOS, and is not covered in this tutorial. For iOS see [Universal Links: Make the Connection](https://www.raywenderlich.com/6080-universal-links-make-the-connection) by Owen L. Brown. Android does allow for both types of weblink handling out of the box. \n\nWhen an app is installed it registers the `schema` and optionally the `host` so its operating system knows which application should be opened when the URL is clicked. If you tap the link, the application will be opened whether it is running, running in the background, or closed.\n\n### 1.1 Testing With the Make It Native App\n\nFor this tutorial we recommend running your app from source against a local instance of Mendix Studio Pro. This will save you time when rebuilding and redeploying your app. To do this, follow the steps in [How to Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/) to make an app and link it to the Make It Native mobile testing app.\n\nPlease note that the Make It Native app has already the registered schema `makeitnative://` and can be used out of the box. To use the Make It Native app with that schema, see the [Using Deep Linking in Your App](#using-deep-linking) section below. If you want to change this schema, see [How to Create a Custom Developer App](/howto/mobile/how-to-devapps/) to build your own custom developer app and then use the [Setting up App Deep Linking](#set-up) section below to change its schema.\n\n## 2. Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Complete the [Prerequisites](/howto/mobile/deploying-native-app/#prerequisites) section of *How to Deploy Your First Mendix Native Mobile App*\n* Make sure your [Native Mobile Resources](/appstore/modules/native-mobile-resources/) module is up to date\n* Install git [command line](https://git-scm.com/downloads) tool for working with the Native Mobile App Builder CLI\n* Install Mendix Studio Pro v 8.15.0 or above in order to use the Native Mobile App Builder\n\n## 3. Setting up App Deep Linking {#set-up}\n\nIf you do not already have a native template for your app, you can create one by following the section below.\n\n### 3.1 Using the Native Mobile App Builder\n\nSet up a native template with the **Native Mobile App Builder** by following these instructions:\n\n1.  Launch the Native Mobile App Builder from the **App** menu. Walk through the wizard and configure the app's details and tokens (for more information, see [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)):\n\n    {{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/launch-native-mobile-app-builder.png\" alt=\"launch native mobile builder\"   width=\"400\"  >}}\n\n2.  Once done with the wizard you will enable deep linking capabilities. First, select the **Capabilities** menu item:\n\n    {{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/capability-menu-option.png\" alt=\"capability menu option\"   width=\"400\"  >}}\n    \n3.  Enter the `schema` name without the appending `://`:\n\n    {{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/deep-link-input-field.png\" alt=\"deep link input field\"   width=\"400\"  >}}\n    \n4. Click the **Save** button. \n\n5. Navigate to the build page and click **Build**.\n\n{{% alert color=\"info\" %}}\nWhen running locally from source, on iOS you have to run `pod install` once more\n{{% /alert %}}\n\n## 4 Using Deep Linking in Your App {#using-deep-linking}\n\nNow your app is ready to use links, so you will set up the additional path and query data handling. If you skip this section, the links to your app will just open the app. Nothing will be done with the additional data available in your URL.\n\n### 4.1 Native Deep Link Nanoflow Actions \n\nNow you have to handle the incoming URL in your Mendix application. To do this, you will use the Nanoflow Actions **Register Deep Link** and **Parse Url To Object** found in the [Native Mobile Resources](/appstore/modules/native-mobile-resources/) module. This module is automatically included in your app if it began as an up-to-date Starter App. If you do not see these actions available in your app, please update the module through the Marketplace.\n\n#### 4.1.1 Registering Deep Link\n\nThe Register Deep Link nanoflow action registers a callback nanoflow, which is called each time the app is opened using a URL. This **URL Handler** nanoflow will receive the URL, of type string, as an input parameter. \n\n{{% alert color=\"info\" %}}\nThe name of the input parameter is case sensitive and can not be changed.\n{{% /alert %}}\n        \n#### 4.1.2 Parsing a URL To a Mendix Object\n\nThe Register Deep Link nanoflow action will create a new Mendix object, split a URL, and set all the object attributes with their values. For example, the URL https://john.doe:secret@www.example.com:123/forum/questions/?tag=networking&order=newest#top has the following attributes and values:\n\n| Attribute                                                   | Value                                                                                        |\n| ----------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| href                                                        | https://john.doe:secret@www.example.com:123/forum/questions/?tag=networking&order=newest#top |\n| protocol                                                    | https:                                                                                       |\n| hash                                                        | top                                                                                          |\n| query                                                       | ?tag=networking&order=newest                                                                 |\n| pathname                                                    | /forum/questions/                                                                            |\n| auth                                                        | john.doe                                                                                     |\n| host                                                        | www.example.com:123                                                                          |\n| port                                                        | 123                                                                                          |\n| hostname                                                    | www.example.com                                                                              |\n| password                                                    | secret                                                                                       |\n| username                                                    | john.doe                                                                                     |\n| origin                                                      | https://www.example.com:123                                                                  |\n| **Dynamically based on the number of slashes in the paths** |\n| path0                                                       | forum                                                                                        |\n| path1                                                       | questions                                                                                    |\n| **Dynamically based on the number of query keys**           |\n| tag                                                         | networking                                                                                   |\n| order                                                       | newest                                                                                       |\n\n### 4.2 Using Utilities in Your App\n\nNow that the **Native Deep Link** nanoflow actions are available in Studio Pro, you have the utilities to register and process an URL. You will now  use them in your application:\n\n1. In your app add the **App events** widget, which is also part of the Native Mobile Resource module, on your home page.\n1.  Double-click the **App events** widget. In **App events** tab, select **Page load** > **On load** > **Call a nanoflow**, and create a new nanoflow named *OL_RegisterDeepLink*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/app-events-register-deep-link.png\" alt=\"app event register deeplink\" >}}\n\n\tThis nanoflow will be called only once when the app is started.\n\n1.  In the **OL_RegisterDeepLink** nanoflow, add the action **Register DeepLink**, and in that action's **Url handler** create an nanoflow named *DL_ShowUrlDetails*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/nanoflow-register-deep-link.png\" alt=\"nanoflow register deeplink\" >}}\n   \n\tThis nanoflow will be called every time the app is opened using a URL.\n\n1. To parse the URL into an object, you will use a non-persistable entity named **DeepLinkParameter** from the **NativeMobileResources** module in the next step. For now, go to **NativeMobileResources** > **Domain Model** and examine this entity. If you use query strings or more, you can copy this entity to your own module. The attributes are all optional and you should only add the attributes your implementation requires. Besides the standard list of possible URL parts, you can also add the query string's keys (for example `?name=Jhon&title=sir`). The attributes are not case sensitive. You can add attributes for path segments of the URL which will be split into `Path0` , `Path1`, and more:\n\n    {{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/entity-parameter.png\" alt=\"parameter entity\" >}}\n\nNext you will implement the deep link handler nanoflow **DL_ShowUrlDetails** so that it can pass URL data:\n\n1. In **DL_ShowUrlDetails** drag and drop a parameter into your nanoflow's white space.\n1. Double-click the parameter, give it the name *URL* (which is case sensitive) and the type **String**.\n1. Add a **Parse URL to Object** activity to your nanoflow. Double-click it and configure it like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/parse-url.png\" alt=\"parse url\" >}}\n\n1. Add a **Show message** activity to the right of your **Parse URL to Object** activity.\n1. Double-click the **Show message** activity.\n1. In **Template** write *Your deep link callback URL {1} host = {2}*.\n1. Click **Parameters** > **New**, write *$Parameter/Href*, and click **OK**.\n1. Click **Parameters** > **New**, write *$Parameter/Host*, and click **OK**.\n1. Right-click your **Parse URL to Object** activity, click **Set error handling**, and click **Custom without rollback**.\n1. Drop an **End event** below your **Parse URL to Object** activity. Drag a line from **Parse URL to Object** down to the end event, right click it, and click **Set as error handler**.\n1. Add a **Show message** activity to this line. Set it as type **Error**, and into template type *Failed to parse deep link data.*. Your finished nanoflow will look like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-deep-link/deep-link-nano-full.png\" alt=\"full nanoflow\" >}}\n\n### 4.3 Testing Deep Linking\n\nAdd a few test link buttons, for example {app://myapp/task/123} or {makeitnative://task/123}, to your web page, then re-run your app. Open the your app in your device's browser by typing *{your local IP address}:8080* into the browser. With the app loaded, tap the links to test. You should be brought out of your browser and into your app's page!\n\n## 5. Read more\n\n*   [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n*   [React Native Linking](https://facebook.github.io/react-native/docs/linking)\n*   [Deep Linking Android](https://developer.android.com/training/app-links/deep-linking)\n*   [Deep Linking iOS](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app)\n*   [Universal Linking iOS](https://developer.apple.com/ios/universal-links/)\n*   [URL Schema vs Universal Link](https://medium.com/wolox-driving-innovation/ios-deep-linking-url-scheme-vs-universal-links-50abd3802f97)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/native-styling/_index.md",
    "header": {
      "title": "Implement Native Mobile Styling",
      "url": "/howto/mobile/native-styling/",
      "parent": "implementation",
      "weight": "25",
      "description": "General information for native styling in Mendix.",
      "tags": [
        "styling",
        "design",
        "native"
      ]
    },
    "body": "\n## 1 Introduction\n\nYou can build native mobile apps with custom styling in Mendix Studio Pro. Styling native mobile apps uses JavaScript style sheets, which are new to Mendix Studio Pro. Consult the guidelines below for information on theme folder structure, classes, and design properties.\n\n## 2 Theme Folder Structure\n\nFor each app, styling is stored in the **theme** and **themesource** folders. From there styling is split into **native** and **web** folders. Both have the same structure. \n\nThese folders have strict protocols:\n\n* Users should only add or change styling in **theme/native** or in their own user-defined module **themesource/your-module/native** folder (if they plan to create a reusable theming module)\n* The **native** folder has two files: *main.js* and *custom-variables.js* — when changing the styling, always copy the variable you want to change from *themesource/atlas_core/native/variables.js* to *theme/native/custom-variables.js*\n* The *custom-variables.js* file will overwrite the *variables.js* file — do not change anything in the **themesource/atlas_core/native** folder directly, as this makes updating Atlas more difficult\n* Any variables you want to change or add should be put in *custom-variables.js* \n* Any classes you want to change or add should be put in *theme/native/main.js* or in your own user-defined module's *themesource/your-module/native/main.js*.\n\nThe **themesource/atlas_core/native/core/base** folder contains global helper classes. These classes are generic and can be put on all widgets. Some of them are also available as design properties in Mendix Studio Pro.\n\nThe **themesource/atlas_core/native/core/helpers** folder contains helper classes for widgets. Every widget has its own file which contains its design properties and some extra classes.\n\nThe **themesource/atlas_core/native/core/_functions** folder contains multiple helper functions. These functions can help you style more easily. For example, the `adjustFont` function receives a font and adjusts it to the screen size. This will make your font sizes responsive. For more information about these helper classes, see their descriptions in the code.\n\nThe **themesource/atlas_core/native/core/widgets** folder contains the default widget styling. Every widget has its own file which contains its default class name.\n\nIn **themesource/atlas_nativemobile_content/native** you will find resource package styling. Here you can find all styling related to building blocks, page templates and layouts.\n\n## 3 Classes\n\nDefault class names—which are the class names set by Mendix Studio Pro—will always be named in Pascal case. All other classes will be in lowerCamelCase. This keeps changes to default widget styles clear.\n\n## 4 Design Properties\n\nAvailable in Mendix Studio and Mendix Studio Pro, design properties are an easier way to apply classes. Atlas already offers several useful design properties out of the box. You can see them by clicking on a widget and looking at the **Properties** panel. A design property can be either a drop-down menu or a toggle. A toggle will toggle one class, while a drop-down menu will apply a different class for each drop-down item. \n\n## 5 Read More\n\n* [Mendix Atlas UI](/howto/front-end/atlas-ui/)\n* [Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling.md",
    "header": {
      "title": "Style Your Mendix Native Mobile App",
      "url": "/howto/mobile/how-to-use-native-styling/",
      "parent": "native-styling",
      "weight": "30",
      "description": "A how-to for styling your first Mendix Native App.",
      "tags": [
        "styling",
        "design",
        "classes",
        "native"
      ]
    },
    "body": "\n## 1 Introduction\n\nYou have the capacity to alter design properties with Mendix Studio Pro. Furthermore, because all native mobile styling is written in JavaScript, you have new ways of applying your styling customizations. For more details on native styling, class names, and widget styling, see the [Native Mobile Styling Reference Guide](/refguide/native-styling-refguide/).\n\n## 2 Prerequisites \n\n* Install an integrated development environment (IDE) of your choice (Mendix recommends [Microsoft Visual Studio Code](https://code.visualstudio.com/))\n* Create a Mendix app based on the Blank Native Mobile App template by following the [Creating a New App Based on the Quickstart App](/howto/mobile/getting-started-with-native-mobile/#quickstartapp) section of *Get Started with Native Mobile*\n* Download the Make It Native 9 app on your mobile device via either the [Google Play](https://play.google.com/store/apps/details?id=com.mendix.developerapp.mx9) store or the [Apple App Store](https://apps.apple.com/us/app/make-it-native-9/id1542182000) so you can text your app and see your styling changes\n\n### 3 Customizing the Quickstart App\n\nThe [Blank Native Mobile App](https://marketplace.mendix.com/link/component/109511/) is styled using an Atlas UI resources package. This package consists of:\n\n* Widgets\n* Building blocks\n* Page templates\n* Page layouts \n\nThese resources let you style your app with a wide variety of interface parts. However, you can customize them further by following these steps:\n\n1. On your **Home_Native** home page, delete the **Intro screen** content.\n1.  Place a button widget on your app's home page:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/button-one.png\" alt=\"button\" >}}\n\n2.  Click the play button (**Run Locally**) and then click **View App** to see your app. The button will be blue with white text, which is its default styling.\n3. Open *theme/native/custom-variables.js* using your IDE of choice.\n4. Change the `brand.primary` from **#0595DB** to *rosybrown*:\n\n\t```javascript\n\t//Brand Style\n\texport const brand = {\n\t\tprimary: \"rosybrown\",\n\t\tsuccess: \"#76CA02\",\n\t\twarning: \"#f99b1d\",\n\t\tdanger: \"#ed1c24\",\n\t};\n\t```\n\n5. Save your file.\n6.  Click the play button (**Run Locally**) to apply your changes:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/brand-primary-rosybrown.png\" alt=\"rosybrown button\" >}}\n\n\tYou have successfully altered a default button to look rosy brown These screenshots employ the Make It Native app's [Dark Mode](/releasenotes/mobile/make-it-native-app/#new-features-5).\n\n## 4 Classes\n\nClasses are groups of styling properties which define how certain elements of your app will be rendered. Once you make a class, one which applies to a button for example, you can reuse that class to easily style subsequent buttons in the same way. To learn how to apply a class to a widget, follow the steps below.\n\n1. Place a second button widget on your app's home page.\n2. Run your app to view your button.\n3. Select the button widget, and then click the **Properties** panel. Under **Common** you will see the button's **Class** field.\n4.  Type *btnSuccess* into the **Class** field:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/btn-success.png\" alt=\"class field\" >}}\n\n5.  Click the play button (**Run Locally**) to save and refresh your app. Notice the button turned green:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/green-button.png\" alt=\"green button\" >}}\n\t\n\tYou have successfully applied an Atlas-provided class to a button widget.\n\n## 5 Design Properties\n\nDesign properties are easy-to-use classes in Mendix Studio Pro which you do not need to look up before using. Design properties are present inside Mendix Studio Pro with every widget they apply to. They can be accessed in the **Properties** panel, or by double-clicking the widget and clicking the **Appearance** tab for more advanced options. Design properties are particularly useful for creating generic styling for use on multiple widgets. Below you will use design properties to alter a button widget.\n\n1. Place a third button widget on your app's home page.\n2. Select the button, and find its **Design Properties** in the **Properties** panel.\n3.  Click the **Button style** drop-down arrow and select **Warning**.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/btn-warning.png\" alt=\"warning button\" >}}\n\n4.  Run your app again to see the *design* button's new color:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/orange-button.png\" alt=\"orange button\" >}}\n\n\tUsing design properties, you have changed the blue default button widget to orange. For any other warning buttons, you could easily apply the same design property.\n\n## 6 Creating Your Own Classes {#creating-your-own-classes}\n\nWhen you have specific design requirements, you will need to build custom classes to fit. To harness the power of custom classes, follow the instructions below.\n\n1. Place a fourth button widget on your app's home page.\n2. Navigate to your Mendix app's folder using your IDE.\n3. Open the **theme** folder of your app.\n4. Open *native/main.js*.\n5. Copy this code snippet into *native/main.js*:\n\n\t```javascript\n\texport const className = {\n\t\tcontainer: {\n\t\t\t<ViewStyle properties>\n\t\t},\n\t\ticon: {\n\t\t},\n\t\tcaption: {\n\t\t\t<TextStyle properties>\n\t\t}\n\t}\n\t```\n\t\n\tTo alter a class on your own, consult the [Native Mobile Styling Reference Guide](/refguide/native-styling-refguide/) to understand widget structures.\n\n6. Now you will edit the code you pasted. Apply a transparent background color to customize the the default button widget:\n\n\t```javascript\n\texport const className = {\n\t\tcontainer: {\n\t\t\tbackgroundColor: \"transparent\"\n\t\t},\n\t\ticon: {\n\t\t},\n\t\tcaption: {\n\t\t}\n\t}\n\t```\n\n7. Because your app already has default styling, you can remove the icon and caption properties. Also, change the constant to a unique, self-explanatory value such as `btnBordered`: \n\n\t```javascript\n\texport const btnBordered = {\n\t\tcontainer: {\n\t\t\tbackgroundColor: \"transparent\"\n\t\t},\n\t}\n\t```\n\n8. Save your work.\n9. In Mendix Studio Pro, select your fourth button. In the **Properties** panel, type *btnBordered* into the **Class** field.\n10.  Click the play button (**Run Locally**) to see that your button's background color is transparent:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/bordered-button.png\" alt=\"bordered button\" >}}\n\t\n\tYou have successfully customized a simple button widget. Using these basic principles, you can go on to customize widgets with distinct looks.\n\n## 7 Implementing Custom Design Properties\n\nIn this section you will learn to turn the class you made into a design property, so that it can be easily used by other people.\n\n1. Place a fifth button widget on your app's home page.\n2. Open *themesource/your-module/native/design-properties.json* in your IDE.\n3. Find the `ActionButton` class. There are already design properties in `ActionButton`. Next, you will add some of your own.\n4. Place this object under the first one in `ActionButton`:\n\n\t```json\n\t{\n\t\t\"name\": \"Bordered\",\n\t\t\"type\": \"Toggle\",\n\t\t\"description\": \"Create a bordered button.\",\n\t\t\"class\": \"btnBordered\"\n\t},\n\t```\n4. In Mendix Studio Pro, press <kbd>F4</kbd> to synchronize your app directory.\n5.  Select the fifth button. In **Properties** > **Design Properties**, your **Bordered** design property should now be visible:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/bordered-design-property.png\" alt=\"bordered design property\" >}}\n\n6.  Enable the **Bordered** design property by clicking its drop-down menu and selecting **Yes**.\n\n7.  Click the play button (**Run Locally**) again and view your app:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/native-styling/how-to-use-native-styling/design-property-border-button.png\" alt=\"design properties border\" >}}\n\n\tYou have implemented your own custom design property. Other users can quickly harness your design property without having to consult a class name list.\n\nCongratulations! By completing this how-to, you have learned how to alter a styling property, apply classes and design properties, and create your own classes and design properties.\n\n## 8 Read More\n\n* [How to Implement Native Mobile Styling](/howto/mobile/native-styling/)\n* [Native Mobile Styling Reference Guide](/refguide/native-styling-refguide/)\n* [Mendix Atlas UI](/howto/front-end/atlas-ui/)\n* [How to Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/_index.md",
    "header": {
      "title": "Use Notifications",
      "url": "/howto/mobile/notifications/",
      "parent": "implementation",
      "weight": "54",
      "description": "Tutorials for configuring push and local notifications.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase"
      ]
    },
    "body": "\n## 1 Introduction {#intro}\n\nThese guides will teach you to configure push notifications (also known as remote notifications) for your Mendix apps. The guides are meant to be completed in order, and will teach you to **send a test push notification to a single device**. Depending on your app's starting template your app may already satisfy certain prerequisites and conditions. Complete only the steps which apply to your use case, and skip what does not apply.\n\n* [Add Module Dependencies](/howto/mobile/notif-add-module-depends/) — Install the required dependency modules so your app can use push notifications.\n* [Implement the Push Notifications Module](/howto/mobile/notif-implement-module/) — Learn to implement the Push Notifications Connector module.\n* [Set Up the Google Firebase Cloud Messaging Server](/howto/mobile/setting-up-google-firebase-cloud-messaging-server/) — Set up a Firebase account and configure the service in your app so that you can send push notifications.\n* [Configure Push Notifications](/howto/mobile/notif-config-push/) — Learn to configure push notifications in the runtime.\n* [Implement Push Notifications in Your Native App](/howto/mobile/notif-implement-native/) — Implement push notifications for a native app.\n* [Build a Native App with Push Notifications Enabled](/howto/mobile/notif-build-native/) — Build a native app with push notifications enabled.\n* [Send Your First Test Push Notification](/howto/mobile/notif-send-test/) — Send a test notification to confirm your app is working properly.\n\nAfter you complete the how-to's above, you may wish to do more advanced tasks with notifications. For information on **sending push notifications to multiple devices**, use this how-to:\n\n* [Send Notifications to Multiple Devices](/howto/mobile/notif-mult-devices/)\n\nThe documentation described above is specifically for native mobile apps. For information on push notifications in hybrid apps, see [Set Up Hybrid Push Notifications](/howto/mobile/setting-up-hybrid-push-notifications/). For information on local notifications, see [Use Local Notifications](/howto/mobile/local-notif-parent/).\n\nTo get started, begin with the series' first entry: [Add Module Dependencies](/howto/mobile/notif-add-module-depends/)."
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/_index.md",
    "header": {
      "title": "Use Local Notifications",
      "url": "/howto/mobile/local-notif-parent/",
      "parent": "notifications",
      "weight": "88",
      "description": "Tutorials for setting up local push notifications which do not use an internet connection.",
      "tags": [
        "mobile",
        "push notification",
        "local",
        "push",
        "notification"
      ]
    },
    "body": "\nThese step-by-step guides will teach you to build local notifications for native mobile applications. Local notifications will only allow you to schedule and send notifications confined to one mobile device. These notifications do not use an internet connection. One use of a local notification might be an alarm app which sends a notification after an amount of time has elapsed.\n\n**These how-to's will teach you how to do the following:**\n\n* [Part 1: Local Notifications](/howto/mobile/native-local-notifications/) – Trigger native notifications from Mendix app's microflow, configure your notification permissions, and test the notifications on a device\n* [Part 2: Badges](/howto/mobile/local-notif-badges/) – Make your notifications leave badge indicators on your application's icon\n* [Part 3: Actions](/howto/mobile/local-notif-action/) – Configure notifications to do an action after being tapped (in this case, show a page)\n* [Part 4: Data](/howto/mobile/local-notif-data/) – Enable notifications to pass data and bring a user to a page with specific parameters set\n* [Part 5: Scheduling](/howto/mobile/local-notif-schedule-cancel/) – Make notifications trigger at a certain time and cancel them\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action.md",
    "header": {
      "title": "Part 3: Actions",
      "url": "/howto/mobile/local-notif-action/",
      "parent": "local-notif-parent",
      "weight": "30",
      "description": "A tutorial for making your push notifications trigger actions when tapped.",
      "tags": [
        "mobile",
        "push notification",
        "local",
        "push",
        "notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nSeveral apps which use push notifications will also need actions to trigger after a user taps a notification. This step-by-step guide will teach you to make a tapped notification show a specific page.\n\n{{% alert color=\"warning\" %}}\nThe Make It Native app is currently experiencing limitations which interfere with notifications. We are currently fixing those limitations. To test your local notification actions, please use a native release app installed on a mobile testing device instead of the Make It Native app. To build a native release app, please complete [How to Deploy a Native App](/howto/mobile/deploying-native-app/) and use that app to test local notification actions.\n{{% /alert %}}\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Review the [basic differences](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/) between local notifications and push notifications\n* Install the [Make It Native](/refguide/getting-the-make-it-native-app/) app on your mobile device\n* Complete the preceding tutorials in this [Use Local Notifications](/howto/mobile/local-notif-parent/) series\n\n## 3 Setting an Action for When a Notification is Tapped\n\nIn this section you will learn to show a page when a user taps a notification.\n\n1.  Drag and drop a **Notifications** widget onto your native home page. \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action/notif-widget.png\" alt=\"notifications widget\"   width=\"400\"  >}}\n\n2. Double-click the widget.\n3. Click **Actions** > **New**. \n4. Name your action *show_page*.\n5. Select **On open to** > **Show a Page**.\n6. Click **New** to make a new page.\n7. Type *NotifPage* into **Page Name**.\n8. Click **Blank** pane on the left and select the **Blank** page template. \n9. Click **OK** to create your page. \n10. Drag and drop an **Open page button** widget onto **NotifPage**.\n11. When prompted, click your **Home_Native** page:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action/home-native-select.png\" alt=\"click home page\"   width=\"400\"  >}}\n\n12. Click **Select**. Now you have a button which will bring you back to your home screen when you are testing:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action/nav-button.png\" alt=\"click home page\" >}}\n\n13. Navigate back to your **ACT_CreateAndSendNotification** nanoflow. \n\nIn **ACT_CreateAndSendNotification** you will set up the logic for tapping a notification which brings you to a page. This process requires you set up a string variable. However, because this string variable will never be used with other variables—it will only be used for internal notification functionality—you will not set it up by dragging and dropping a create variable activity like you did before. You will set it up with an expression.\n\n1.  Double-click your **Display Notification** activity:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action/set-action-name-display.png\" alt=\"click display notification\" >}}\n\n2. Click **Action Name** > **Edit** \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action/add-action-name.png\" alt=\"edit action name\"   width=\"500\"  >}}\n\n3.  Type `'show_page'` into the expression field:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-action/show-page-exp.png\" alt=\"show page expression\"   width=\"400\"  >}}\n\n4. Click the **OK** buttons until you are back at your nanoflow.\n\nGreat job setting up your notification. Now you can test it:\n\n1. Click **Run Locally** to update your app.\n2. Start the app on your mobile device.\n3. Tap your **Send notification** button.\n4. Tap the notification to navigate to the page you selected.\n5. Tap the **Return to home page** button to navigate back to your home page.\n\nNow you can show pages after notifications are tapped. Next, in [How to Use Local Notifications Part 4: Data](/howto/mobile/local-notif-data/), you will learn to pass data to such pages.\n\n## 4 Read More\n\n* [Build JavaScript Actions](/howto/extensibility/build-javascript-actions/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges.md",
    "header": {
      "title": "Part 2: Badges",
      "url": "/howto/mobile/local-notif-badges/",
      "parent": "local-notif-parent",
      "weight": "20",
      "description": "A tutorial for setting up badges for local push notifications.",
      "tags": [
        "mobile",
        "push notification",
        "local",
        "push",
        "notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nBadges are crucial for many apps on iOS and Android. Badges differ in appearance based on platform, and often indicate important information in applications. For example with messaging applications, it is good practice to employ badges which alert users to new messages.\n\nYou will need to build badge functionality into your app so that when a user gets a notification, the app shows a badge on its app's icon. Also, badges are *not automatically decreased or removed* when a user checks an app. These two functions must be built manually by a developer. \n\nIn this document you will learn to add badge functionality to your app, as well as how to remove a badge.\n\n## 2 Prerequisites \n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Review the [basic differences](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/) between local notifications and push notifications\n* Install the [Make It Native](/refguide/getting-the-make-it-native-app/) app on your mobile device\n* Complete the preceding tutorial in this [Use Local Notifications](/howto/mobile/local-notif-parent/) series\n\n## 3 Setting a Badge Number\n\nSince you know how to send a simple local notification, you can now set the badge number by following these steps:\n\n1. Open **ACT_CreateAndSendNotification**.\n2.  Drag and drop a **Create variable** activity to the right of the three string variables you made:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/new-variable-badge.png\" alt=\"new create variable\"   width=\"500\"  >}}\n\n3. Double-click the variable activity and select **Data type** > **Integer/Long**.\n4. Type *1* into the expression value field. \n5.  Type *badge_number* into the **variable name** field:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/badge-1.png\" alt=\"badge number\"   width=\"400\"  >}}\n\n6. Click **OK**.\n7.  Drag and drop a **Set badge number** JavaScript action to the right of your merge activity:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/set-badge-act.png\" alt=\"drag set badge number\" >}}\n\n8. Double-click the badge number activity.\n9.  Set the value of **Badge number** to **$badge_number**\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/badge-input.png\" alt=\"value badge number\" >}}\n\n10. Click **OK**.\n\nStart and load the app on your mobile device and tap the button which calls your nanoflow. You will see a notification. Go to your device's start screen to see the notification badge on your app:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/badge-mobile.png\" alt=\"badge number on mobile\"   width=\"300\"  >}}\n\n## 4 Reducing a Badge Number\n\nTo make your badge disappear after your user opens your app, follow the instructions below.\n\n1. Drop an **App events** widget onto **Home_Native** (you have this widget because it is included in the [Blank Native Mobile App](https://marketplace.mendix.com/link/component/109511/)):\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/app-events.png\" alt=\"app event widget\" >}}\n\n2. Double-click your **App events** widget.\n3. Select **On load** > **Call a nanoflow**.\n4. Click **New** and make a new nanoflow: *ACT_ClearBadge*.\n5. Go to **ACT_ClearBadge**.\n6. Drag and drop a **Set badge number** activity onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/clear-set-badge.png\" alt=\"set badge activity\" >}}\n\n7. Double-click your **Set badge number** activity.\n8. Click **Badge number** > **Edit**.\n9. Type *0* and click **OK**.\n10. Set **Use Return Value** to **No**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/clear-badge-settings.png\" alt=\"return value\"   width=\"400\"  >}}\n\n11. Drag and drop a **Log message** activity onto your microflow.\n12. Double-click your **Log message** activity, write *Your notification has been cleared* into **Template**, and click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/clear-text-log.png\" alt=\"clear text\"   width=\"500\"  >}}\n\n13. Go back to your **Home_Native** page and double-click your **App events** activity.\n14. Make sure **Page load** > **On load** is set to **Call a nanoflow**, and specify that nanoflow as **ACT_ClearBadge**. This will make sure your badge clears on page load.\n15. Set **App resume** > **On resume** is set to **Call a nanoflow**, and specify that nanoflow as **ACT_ClearBadge**. This will make sure your badge clears when your app is resumed:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/app-event-final-settings.png\" alt=\"app event final settings\"   width=\"300\"  >}}\n\n16. Click **OK** and save your changes.\n\nYou can now test your badge clearing.\n\n1. Start and load the app on your mobile device and tap the button which calls your nanoflow. You will see a notification. \n2. Go to your device's start screen to see the notification badge on your app:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/badge-mobile.png\" alt=\"badge number on mobile\"   width=\"300\"  >}}\n\n3. Tap your app again to open it.\n4. Navigate to your device's home screen and see that your Make It Native app has no more badge:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-badges/cleared-badge-icon.png\" alt=\"cleared-badge-icon.png\"   width=\"300\"  >}}\n\n5. Check your Studio Pro **Console** to read the **Your notification has been cleared** text you set up.\n\nCongratulations! You successfully implemented basic badge clearing. Next, in [How to Use Local Notifications Part 3: Actions](/howto/mobile/local-notif-action/), you will learn how to configure a notification so that when a user taps a notification, they are brought to a page.\n\n## 5 Read More\n\n* [Build JavaScript Actions](/howto/extensibility/build-javascript-actions/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data.md",
    "header": {
      "title": "Part 4: Data",
      "url": "/howto/mobile/local-notif-data/",
      "parent": "local-notif-parent",
      "weight": "40",
      "description": "A tutorial for integrating data into your push notifications.",
      "tags": [
        "mobile",
        "push notification",
        "local",
        "push",
        "notification"
      ]
    },
    "body": "\n##  1 Introduction\n\nSeveral apps make it so that when user taps a notification, the user is taken to specific page with specific parameters set. You can achieve this by sending data along with a notification. \n\nFor example, a user could tap a notification about an entity object. They should be brought to a details page which shows an entity object's details. But in order to make that happen, you must set your notification up to pass that particular entity to its details page.\n\nEvery entry in the Mendix database has an unique ID. If you want to pass an object, your GetGUID JavaScript action must retrieve that object's GUID and pass it to your local notification. When the notification is tapped, the widget can use the object's GUID to retrieve that object using the GetObjectByGUID JavaScript action. Finally, your object will be passed to the action you specify in your notification.\n\nYou will create the following things to send data to pages:\n\n* **Two entities** – *TestEntity* to test how to show particular object, and *Notification* to help pass data to your page\n* **One page** – *DetailTestEntity* which will be shown on tapping a notification\n* **One microflow** – *DS_TestEntity* to create dummy data for testing\n* **Three nanoflows** – *DS_Notification* to create a dummy notification object, *ACT_PassGUIDToNotification* to pass a GUID, and *On_tapNotification* to process data from your notification\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Review the [basic differences](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/) between local notifications and push notifications\n* Install the [Make It Native](/refguide/getting-the-make-it-native-app/) app on your mobile device\n* Complete the preceding tutorials in this [Use Local Notifications](/howto/mobile/local-notif-parent/) series\n\n## 3 Sending Data to Pages\n\nTo make your two entities, do the following:\n\n1. Navigate to your domain model.\n2.  Drag and drop a new entity onto your domain model: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/new-entity.png\" alt=\"new entity\"   width=\"500\"  >}}\n\n2.  Double-click it and name it *TestEntity*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/test-entity.png\" alt=\"test entity\"   width=\"500\"  >}}\n\n3.  Click **Attributes** > **New**, name it *StringAttribute_1*, and click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/first-string-attribute.png\" alt=\"string attribute\"   width=\"400\"  >}}\n\n4. Click **OK** again until you are back at the domain model.\n5.  Create an entity named *Notification* on your domain model with a string attribute *GUIDString*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/guid-notification.png\" alt=\"GUID string\"   width=\"500\"  >}}\n\nTo set up a notification nanoflow, do the following:\n\n1. Create a nanoflow named *DS_Notification*. <br />\n2. Drag and drop a create object activity onto your nanoflow.\n3. Double-click your create object activity.\n4. Click **Entity** > **Select**.\n5. Click **Notification**, then click **Select**.\n6. Click **OK**.\n5.  Right-click your create object activity and select **Set $NewNotification as return value**: <br />\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/create-notif-nano.png\" alt=\"create notification nanoflow\"   width=\"500\"  >}}\n\nTo set up your microflow, do the following:\n\n1. Create a microflow named *DS_TestEntity*.\n2. Drag and drop a create object activity onto your microflow.\n3. Double-click your create object activity.\n4. Click **Entity** > **Select**.\n5. Click **NativeMobile.TestEntity**.\n6. Click **Select**.\n7. Check **Commit** \n8. Click **OK**.\n9. Double-click your end event, make sure its **Type** is **Boolean**, type *true* into the value field, and click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/end-event-true.png\" alt=\"end event true\"   width=\"500\"  >}}\n\nTo make this microflow run after startup, do the following:\n\n1.  Double-click **Settings** in your App Explorer:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/pe-settings.png\" alt=\"app explorer\"   width=\"400\"  >}}\n\n2.  Click the **Runtime** tab:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/runtime-tab.png\" alt=\"click runtime\"   width=\"400\"  >}}\n\n3.  Click **After startup** > **Select**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/after-startup.png\" alt=\"select after start up\"   width=\"500\"  >}}\n\n4.  Click **DS_TestEntity** then click the **Select** button to achieve this result:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/select-ds-entity.png\" alt=\"select test entity\"   width=\"500\"  >}}\n\n5. Click **OK**\n\nTo make your page, do the following: \n\n1. Crete a new blank native page named *DetailTestEntity*.\n2. Drag and drop a data view widget onto your new page.\n3. Double-click your data view widget.\n4. In **Data Source**, click **Entity (path)** > **Select**.\n5. Click **TestEntity**.\n6.  Click **Select** to see the following:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/data-view-source.png\" alt=\"entity test entity\" >}}\n\n7.  Click **OK**. \n8.  When asked **\"Do you want to automatically fill the contents of the data view?\"** click **Yes**.\n9.  This will be the page your user sees when they tap the notification:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/page-with-data-view.png\" alt=\"page with data view\"   width=\"300\"  >}}\n\nNext you will learn how to pass data to pages after you have tapped a notification. First, make a nanoflow:\n\n1. Create a nanoflow named *ACT_PassGUIDToNotification*.\n\n2. Add a retrieve action to your nanoflow, set **Source** to **From Database**, and set **Range** to **First**. Click **Entity** > **Select** and select the **TestEntity**. In **Object name** type *FirstTestEntityObject*. Then click **OK**. This will be the object that gets the GUID: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/retrieve-object.png\" alt=\"retrieve object\" >}}\n\n3. Add a JavaScript Action Call activity to your nanoflow.\n4. Double-click the action call activity.\n5. Click **JavaScript Action** > **Select**.\n6. Type *GetGuid* into the search field, click **GetGuid**, and click **Select**. (You are able to find the GetGuid JavaScript action because it is included in the NanoflowCommons module inside the Native Quickstarter template.)\n7. Click **Entity Object** drop-down and click **$FirstTestEntityObject**.\n8. In **Variable name** field type **GUIDForFirstObject**.\n9. Click **OK**.\n10. Drag and drop four create variable activities onto your nanoflow: *Title*, *Subtitle*, *Body*, and *ActionName*. Give them the values *'title1'*, *'subtitle1'*, *'body1'*, and *'OpenPageWithParams'* respectively:\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/title1-activity.png\" alt=\"title1\"   width=\"400\"  >}}\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/subtitle1-activity.png\" alt=\"subtitle1\"   width=\"400\"  >}}\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/body1-activity.png\" alt=\"body1\"   width=\"400\"  >}}\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/actionname-activity.png\" alt=\"actionname\"   width=\"400\"  >}}\n\n\tThis is how all of your activities will look:\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/guid-nano-with-four-strings.png\" alt=\"actionname\"   width=\"500\"  >}}\n\t\n11. Drag and drop a JavaScript action call activity onto your nanoflow. \n12. Double-click the action call.\n13. Click **JavaScript action** > **Select**.\n14. Type *DisplayNotification* into the search field, click the corresponding JavaScript action, and click **Select**.\n15. Set the **Body**, **Title**, **Subtitle**, **Action name**, and **Action guid** to the corresponding variables you created previously, and set **Play Sound** to **True**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/first-guid-action.png\" alt=\"first guid action\"   width=\"500\"  >}}\n\n16. Click **OK**.\n17. Drag and drop this nanoflow onto your app's **Home_Native** page to create a button which calls it, and name the button *Pass GUID to Notification*:\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/pass-guid-button.png\" alt=\"guid button\"   width=\"500\"  >}}\n\t\n\nGood job! When a user taps a notification from the **Pass GUID to Notification** button, they will now be brought to the **DetailTestEntity** page. Next you will create a nanoflow which receives **notificationEntity** as a parameter, retrieves an object via this parameter, and passes the object to a page.\n\n1. Make a new nanoflow named *ON_tapNotification*.\n2. Drag and drop a parameter onto your nanoflow. \n3. Click **Data Type** > **Select**. Click **Notification**, then click **Select**.\n4. Fill **Name** in as *notificationEntity*.\n5.  Click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/notif-entity.png\" alt=\"guid button\" >}}\n\n6. Drag and drop a JavaScript action call onto your nanoflow.\n\n7. Double-click the JavaScript action call, then click **Select**. \n\n8. Type *GetObjectByGuid* into the search field, click that action, then click **Select**. \n\n9. Click **TestEntity** and then click **Select**.\n\n10. Next to the **Object guid** drop-down menu click **Edit**.\n\n11. Type *$NotificationEntity/GUIDString* into your argument field and click **OK**.\n\n12. Select **Use Return Value** > **Yes**.\n\n13. In **Object name** write *ReturnedObjectByGUID*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/get-object-by-guid-settings.png\" alt=\"guid settings\"   width=\"500\"  >}}\n\n14. Click **OK** to save and close your JavaScript Action settings:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/guid-activity.png\" alt=\"guid activity\"   width=\"500\"  >}}\n\n15. Drop a **Change object** activity onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/new-change-object.png\" alt=\"change object\"   width=\"500\"  >}}\n\n16. Double-click the change object activity.\n17. Select **Object** > **ReturnedObjectByGUID (NativeMobile.TestEntity)** from the drop-down menu.\n18. Click **Action** > **New**, make sure **Member** is set to the string attribute, and into **Value** type *'Your notification has forwarded you here!'*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/change-object-action.png\" alt=\"change object action\"   width=\"400\"  >}}\n\n19. Click **OK**. Check that your dialog box looks like this, then click **OK** again to close it: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/change-object-final.png\" alt=\"change object final\"   width=\"400\"  >}}\n\nNext you are going to create a show page action for **ON_tapNotification**.\n\n1.  Drag a **Show Page** activity onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/add-show-page.png\" alt=\"new show page\"   width=\"500\"  >}}\n\n2. Double-click the **Show Page** activity.\n\n3. From the **Object to pass** drop-down menu select **ReturnedObjectByGuid**.\n\n4.  Click **Page** > **Select**, click **DetailTestEntity**, then click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/show-page-settings.png\" alt=\"guid button\"   width=\"400\"  >}}\n\n5. Click **OK** to close the **Show Page** activity settings, then navigate to your **Home_Native** page.\n\nNow you will set up a data view on your home page.\n\n1. Drag and drop a **Data View** widget on your **Home_Native** page.\n2. Double-click your data view.\n3. Select **Data source** > **Type** > **Nanoflow**.\n4. Click **Nanoflow** > **Select** and choose **DS_Notification**.\n5. Click **OK** to go back to your home page, and click **OK** on the subsequent data view dialog box.\n6. Move the **Notifications** widget inside this data view.\n7.  Confirm that the text box in your data flow is using **GUIDString** as its data source:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/GUID-data-source.png\" alt=\"first guid action\"   width=\"500\"  >}}\n\n8. Double-click your notifications widget.\n9. Click **GUID** > **Select**.\n10. Click **GUIDString (String (200))**, then click **Select**. Your results will look like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/set-guid-string.png\" alt=\"guid string\"   width=\"500\"  >}}\n\n9. Click **Actions** > **New**.\n10. Create a **New Action** named *OpenPageWithParams*, set **On open** to **Call a nanoflow**, and select **ON_tapNotification**.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-data/notif-action-2.png\" alt=\"notification action\"   width=\"500\"  >}}\n\nGreat job! Now you will test your data notification functionality.\n\n1. Start and load the app on your mobile device.\n2. Tap the button which sends a notification.\n3. Tap the notification to navigate to the **DetailTestEntity** page with the proper object.\n\nCongratulations! You have harnessed the power of data to enhance your push notifications. Next, in [How to Use Local Notifications Part 5: Scheduling](/howto/mobile/local-notif-schedule-cancel/), you will learn how to schedule notifications for specific times and cancel them.\n\n## 4 Read More\n\n* [Build JavaScript Actions](/howto/extensibility/build-javascript-actions/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel.md",
    "header": {
      "title": "Part 5: Scheduling",
      "url": "/howto/mobile/local-notif-schedule-cancel/",
      "parent": "local-notif-parent",
      "weight": "50",
      "description": "A tutorial for scheduling and cancelling push notifications.",
      "tags": [
        "mobile",
        "push notification",
        "local",
        "push",
        "notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nLocal notifications should rarely notify a user right after they perform an action. Here you will learn to configure local notifications to trigger after a period of time. To do this, you will use a JavaScript action named **ScheduleNotification**. After that, you will learn how to cancel scheduled notifications.\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Review the [basic differences](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/) between local notifications and push notifications\n* Install the [Make It Native](/refguide/getting-the-make-it-native-app/) app on your mobile device\n* Complete the preceding tutorials in this [Use Local Notifications](/howto/mobile/local-notif-parent/) series\n\n## 3 Scheduling a Notification\n\nTo schedule a notification for a specific time, do the following:\n\n1. Navigate to your **ACT_CreateAndSendNotification** nanoflow. \n2.  Replace your **Display notification** JavaScript action with a new **Schedule notification** action:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/new-schedule-action.png\" alt=\"schedule action replace\"   width=\"500\"  >}}\n\n3. Double-click your new **Schedule notification activity**.\n4. Set the **Date** to **EndOfCurrentMinute**.\n5. Change the **body**, **title**, and **subtitle** to the variables that you created.\n6. Set **Play sound** to **true**.\n7. For now, set **Notification id** to **empty**.\n8. Set **Action name** and **Action guid** to **empty**.\n9. Click **OK**.\n10. Start and load the app on your mobile device.\n11. Tap the **Send notification** button, then quickly minimize your app.\n\nThe notification should be displayed at the end of the minute.\n\nIf your app is open, it will not show the notification due to iOS and Android user guidelines. However, notifications for open apps can still trigger onReceive events. This allows you to design custom actions for notifications, such as showing a page with pop-up layout. Follow these steps to model an onReceive event:\n\n1. Make a new nanoflow named *ON_ReceiveNotification*.\n2. Drag and drop a **Log message** activity on your nanoflow.\n3. Double-click this activity. \n4. In **Template** write *I triggered on receive notification* then click **OK**.\n5. Double-click your home page's notifications widget.\n6. Click **Actions** > **New**.\n7.  Create a **New Action** named *TriggerOnReceive*, set **On receive** to **Call a nanoflow**, and select **ON_ReceiveNotification**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/on-receive-action.png\" alt=\"on receive settings\"   width=\"500\"  >}}\n\n8. Click **OK** then **OK** again.\n8. In **ACT_CreateAndSendNotification**, double-click your schedule notification activity.\n10. Click **Action name** > **Edit**.\n11. Type *'TriggerOnReceive'* into the argument field and click **OK**.\n11. Click **OK**.\n12. Start and load the app on your mobile device.\n13. Tap the **Send notification** button, and *do not* minimize your app.\n14. You will see the log **I triggered on receive notification** in the Studio Pro console.\n\nBut what if you want to cancel a scheduled notification? Read on to learn more.\n\n## 4 Cancelling Scheduled Notifications\n\nTo cancel a scheduled notification, you can use either the **Cancel Scheduled Notification** or **Cancel All Scheduled Notification** JavaScript actions. To cancel a specific notification, provide an identifier of that particular notification to **Cancel Scheduled Notification**. To cancel all notifications, call the **Cancel All Scheduled Notification** JavaScript action. For further information, see the subsections below.\n\n### 4.1 Cancelling all Scheduled Notifications\n\nTo cancel all scheduled notifications, do the following:\n\n1. Create a nanoflow named  *ACT_CancelAllScheduledNotifications*.\n2.  Drag and drop a JavaScript action named **Cancel all scheduled notifications** onto your nanoflow: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/cancel-all-action.png\" alt=\"cancel scheduled action\"   width=\"500\"  >}}\n\n3. Double-click your new cancel notification action.\n4. Select  **Use return value** > **No**.\n5. Click **OK**.\n6.  Drag and drop this nanoflow to your home screen and name its button *Cancel all*.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/cancel-button.png\" alt=\"cancel button\"   width=\"300\"  >}}\n\nTo test your new cancel button, do the following:\n\n1. Start and load the app on your mobile device.\n2. Tap your **Send notification** button.\n3. Tap your **Cancel all** button.\n4. Minimize your app.\n\nYou will not see a notification at the end of the minute, proving your cancel action a success!\n\n### 4.2 Cancelling a Specific Scheduled Notification\n\nTo cancel a specific scheduled notification, you will need to supply a notification ID for the notification you wish to cancel. \n\n1. Navigate to **ACT_CreateAndSendNotification**.\n2. Double-click your **Schedule notification** activity.\n3. Click **Notification id** > **Edit**. \n4.  Type *'testID'* into the argument field and click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/test-id-arg.png\" alt=\"test id argument\" >}}\n\n5. Click **OK** once more to close the dialog box. \n6. Create a nanoflow named *ACT_CancelScheduledNotifications*.\n7.  Drag and drop a JavaScript Action named **Cancel scheduled notification** onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/cancel-scheduled-notif.png\" alt=\"cancel one notification\" >}}\n\n8. Double-click your new cancel notification action.\n9. Click **Notification id** > **Edit**.\n10. Type *'testID'* into the parameter argument field and click **OK**.\n11. Click **OK** again to close the dialog box.\n12. Drag and drop this nanoflow onto your home screen and name its button *Cancel a specific notification*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/local-notif-schedule-cancel/cancel-specific-button.png\" alt=\"cancel one button\"   width=\"300\"  >}}\n\nTo test your new cancel button, do the following:\n\n1. Start and load the app on your mobile device.\n2. Tap your **Send notification** button.\n3. Tap your **Cancel a specific notification** button.\n4. Minimize your app.\n\nYou will not see a notification at the end of the minute, proving your cancel action a success! Congratulations on completing this series and mastering the power of local notifications.\n\n## 5 Read More\n\n* [Build JavaScript Actions](/howto/extensibility/build-javascript-actions/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications.md",
    "header": {
      "title": "Part 1: Local Notifications",
      "url": "/howto/mobile/native-local-notifications/",
      "parent": "local-notif-parent",
      "weight": "10",
      "description": "A tutorial for setting up local push notifications which do not use an internet connection.",
      "tags": [
        "mobile",
        "push notification",
        "local",
        "push",
        "notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis how-to will teach you to build local notifications for native mobile applications. Local notifications will only allow you to schedule and send notifications confined to one mobile device. These notifications do not use an internet connection. One use of a local notification might be an alarm app which sends a notification after an amount of time has elapsed.\n\n**This how-to will teach you how to do the following:**\n\n* Build a button connected to a nanoflow which calls a local notification\n* Make your notification nanoflow request device permission for local notifications\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Review the [basic differences](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/) between local notifications and push notifications\n* Install the [Make It Native](/refguide/getting-the-make-it-native-app/) app on your mobile device\n\n{{% alert color=\"info\" %}}\nTo use push notifications with apps created with the Native Builder, make sure you have completed [How To Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/) and the how-to's described in [Use Notifications](/howto/mobile/notifications/)\n{{% /alert %}}\n\n\n## 3 Creating an App and Configuring Notifications\n\nFollow the instructions below to set up your first local notification:\n\n1. Open Mendix Studio Pro.\n2. Select **File** > **New App**.\n3.  Select the **Blank Native Mobile App** (also available online [here](https://marketplace.mendix.com/link/component/109511/)):\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/quickstart.png\" alt=\"Blank Native Mobile App\" >}}\n\n4.  Click **Use this starting point**.\n5.  Click **Create App** to close the dialog box:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/app-settings.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n6.  Make sure you have a **Native phone** profile enabled:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/native-profile.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n7.  Drag and drop a **Call nanoflow button** onto your app's home page, then click **New** to make a new nanoflow (note: you may wish to rename this button *Send Notification*): \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/call-button.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n8.  Name the nanoflow *ACT_CreateAndSendNotification* and click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/name-nano.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n9.  In **ACT_CreateAndSendNotification**, drag and drop three **Create variable** activities onto your nanoflow and set them as string variables titled *Title*, *Subtitle*, and *Body*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/create-string-variables.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n10. Double-click your **Title** activity and then configure it:<br />\n\ta. Make sure **Data type** is set to **String**.<br />\n\tb. Click **Generate**.<br />\n\tc. Type *Title* into the **Constant** field.<br />\n\td. Type *Title* into **Output** > **Variable**.<br />\n\te. Click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/title-activity.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n11. Double-click your **Subtitle** activity and configure similarly to your **Title** activity.\n\n12. Double-click your **Body** activity and configure similarly to your **Title** activity.\n\nNow you will set up the final logic necessary for your app to display a notification. A user must give permission for an app to send notifications. You will include a **Request notification permission** activity in your nanoflow to account for this, and include a few other activities.\n\n1.  Drag and drop a **Has notification permission** activity onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/has-notif.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n2.  Double-click your **Has notification permission** activity, type *NotificationPermission* into **Variable**, then click **OK**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/set-haspermission-variable.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n3.  Drag and drop a decision after your **Has notification permission** activity onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/new-decision.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n4.  Double-click that decision and give it the **Caption** *Permission*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/decision-caption.png\" alt=\"app settings\"   width=\"500\"  >}}\n\t\n5.  Click **Expression wizard**, select **Variable** > **NotificationPermission (Boolean)**, and then click **OK** until you are back at your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/expression-variable.png\" alt=\"app settings\"   width=\"500\"  >}}\n\t\n6.  Drag and drop a **Request notification permission** activity onto your nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/request-notif.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n7.  Double-click your **Request notification permission** activity and set **Output** > **Variable** to *PermissionGranted*:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/permission-granted.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n8.  Drag and drop a decision next to your **Request notification permission** activity.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/decision-1.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n9.  Connect your activities and decisions, and set those connections' values like so:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/connections-1.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n10. Double-click the decision, then set the **Caption** as *Permission?*.\n11. Click **Expression wizard**\n12. Select **Value** > **Variable** > **Permission (Boolean)** from the drop-down menu. When finished, your **Decision** should look like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/decision-1-config-new.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n13. Navigate back to your nanoflow.\n\n14. Drag and drop a **Show message** activity on your nanoflow and connect it like this: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/show-message.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n15.  Double-click your **Show message** activity, then do the following:<br />\n\ta. Select **Type** > **Error** from the drop-down menu.<br />\n\tb. Into **Template** type *No notification permissions, go to your app permission settings to grant permission*.<br />\n\tc. Click **OK**.\n\n16. Drag and drop an **End event** under your **Show message** and connect them like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/error-end-event.png\" alt=\"app settings\"   width=\"400\"  >}}\n\nNow you will set up the final piece of your nanoflow's logic. \n\n1.  Delete the end event in the upper-right corner of your nanoflow, drag and drop a **Merge** in its place, and rebuild your connections:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/merge.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n2.  Drag and drop a **Display Notification** activity and connect it to your merge like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/display-notif-merge.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n4.  Set its **Body**, **Title**, and **Subtitle** to the variables that you created in the same nanoflow:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/tsb-variables.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n5.  Set **Play sound** to **true**.\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/sound.png\" alt=\"app settings\"   width=\"500\"  >}}\n\n6.  Set **Action name** and **Action guid** to **empty**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/notif-action-actionguid.png\" alt=\"app settings\"   width=\"500\"  >}}\n\t\n7.  Select **Use return value** > **no**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/return-no.png\" alt=\"app settings\" >}}\n\n8. Click **OK**, then navigate back to your nanoflow.\n9.  Add a final **End event** next to your **Display notification** activity and connect it like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/final-end-event.png\" alt=\"app settings\" >}}\n\n10. When you are all finished, your nanoflow will look like this:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/finished-flow.png\" alt=\"app settings\"   width=\"500\"  >}}\n\nNow you can run your app and see if your notification works.\n\n1.  Start and load your app in your mobile device, then tap **Send Notification**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/app-1.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n2. When prompted to **Allow notifications**, tap **OK**.\n3.  After you allow notifications, you will receive a notification:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/local-notif-parent/native-local-notifications/basic-notif.png\" alt=\"app settings\"   width=\"400\"  >}}\n\n\tIf you did not see a notification, try clicking **Run Locally** to reload your app. Then, tap the **Send Notification** button again.\n\nCongratulations! You can now see local notifications on your device. Next, in [How to Use Local Notifications Part 2: Badges](/howto/mobile/local-notif-badges/), you will learn how to configure notification badges.\n\n## 4 Read More\n\n* [Build JavaScript Actions](/howto/extensibility/build-javascript-actions/)\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-add-module-depends.md",
    "header": {
      "title": "Add Module Dependencies",
      "url": "/howto/mobile/notif-add-module-depends/",
      "parent": "notifications",
      "weight": "52",
      "description": "Tutorial for adding push notification module dependencies.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis how-to will help you add module dependencies for the [Push Notifications Connector](https://marketplace.mendix.com/link/component/3003) module. You only need to install the modules your use case requires. Once your app has the modules it needs, you may move on to [Implement the Push Notifications Module](/howto/mobile/notif-implement-module/).\n\n## 2 Implementing the Encryption Module\n\nSkip this section if the [Encryption](https://marketplace.mendix.com/link/component/1011) module is already implemented in your app. Implement this module by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Encryption*.\n1. Open the [Encryption](https://marketplace.mendix.com/link/component/1011) module. \n1. Click **Download**.\n1. Follow the instructions on the [Encryption marketplace guide](https://docs.mendix.com/appstore/modules/encryption) to set up this module.\n\n## 3 Implementing the Community Commons Module\n\nSkip this section if the [Community Commons](https://marketplace.mendix.com/link/component/170) module is already implemented in your app. Implement this module by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Community Commons*.\n1. Open the [Community Commons](https://marketplace.mendix.com/link/component/170) module.\n1. Click **Download**.\n1. No further installation is required. If you want to know more about the module visit the [Community Commons marketplace guide](https://docs.mendix.com/appstore/modules/community-commons-function-library).\n\n## 4 Implementing the Nanoflow Commons Module\n\nSkip this section if the [Nanoflow Commons](https://marketplace.mendix.com/link/component/109515/Mendix/Nanoflow-Commons) module is already implemented in your app, or if you do not plan on using using local or native push notifications. Implement this module by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Nanoflow commons*.\n1. Open the [Nanoflow commons](https://marketplace.mendix.com/link/component/109515/Mendix/Nanoflow-Commons) module.\n1. Click **Download**.\n1. No further installation is required. If you want to know more about the module visit the [Nanoflow Commons marketplace guide](https://docs.mendix.com/appstore/modules/nanoflow-commons).\n\n## 5 Implementing the Native Mobile Resources Module\n\nSkip this section if the [Native Mobile Resources](https://marketplace.mendix.com/link/component/109513/Mendix/Native-Mobile-Resources) module is already implemented in your app, or if you do not plan on using using local or native push notifications. Implement this module by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Native mobile resources*.\n1. Open the [Native mobile resources](https://marketplace.mendix.com/link/component/109513/Mendix/Native-Mobile-Resources) module.\n1. Click **Download**.\n1. No further installation is required. If you want to know more about the module visit the [Native mobile resources marketplace guide](https://docs.mendix.com/appstore/modules/native-mobile-resources).\n\n## 6 Implementing the Atlas Core Module\n\nImplement the Atlas Core module for apps in Mendix Studio Pro 9.0 and above. Skip this section if the [Atlas Core](https://marketplace.mendix.com/link/component/117187/Mendix/Atlas-Core) module is already implemented in your app. Implement this module by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Atlas Core*.\n1. Open the [Atlas Core](https://marketplace.mendix.com/link/component/117187/Mendix/Atlas-Core) module.\n1. Click **Download**.\n1. No further installation is required. If you want to know more about the module visit the [Atlas UI marketplace guide](https://docs.mendix.com/appstore/modules/atlas-ui-resources).\n\n## 7 Implementing the Data Widgets Module\n\nImplement the Data Widgets module for apps in Mendix Studio Pro 9.0 and above. Skip this section if the [Data Widgets](https://marketplace.mendix.com/link/component/116540/Mendix/Data-Widgets) module is already implemented in your app. Implement this module by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Data Widgets*.\n1. Open the [Data Widgets](https://marketplace.mendix.com/link/component/116540/Mendix/Data-Widgets) module.\n1. Click **Download**.\n1. No further installation is required. If you want to know more about the module visit the [Data Widgets marketplace guide](https://docs.mendix.com/appstore/modules/data-widgets).\n\n## 8 Implementing the Pop-Up Menu Widget\n\nImplement the Pop-Up Menu widget for apps in Mendix Studio Pro 9.0 and above. Skip this section if the [Pop-Up Menu](https://marketplace.mendix.com/link/component/115826/Mendix/Pop-Up-Menu) widget is already implemented in your app. Implement this widget by doing the following:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Pop-Up Menu*.\n1. Open the [Pop-Up Menu](https://marketplace.mendix.com/link/component/115826/Mendix/Pop-Up-Menu) widget.\n1. Click **Download**.\n1. No further installation is required. If you want to know more about the widget visit the [Pop-Up Menu marketplace guide](https://docs.mendix.com/appstore/widgets/popup-menu).\n\nNow that you have installed the dependencies you need, you can move on to [Implement the Push Notifications Module](/howto/mobile/notif-implement-module/).\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-build-native.md",
    "header": {
      "title": "Build a Native App with Push Notifications Enabled",
      "url": "/howto/mobile/notif-build-native/",
      "parent": "notifications",
      "weight": "60",
      "description": "Tutorial for building a native app with push notifications enabled.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase"
      ]
    },
    "body": "\n## 1 Introduction\n\nNow that you have implemented push notifications, it is time to build and deploy the native mobile app. Deploying your iOS or Android app allows the server to send push notifications to mobile devices which have your app installed.\n\n## 2 Building Your Native App {#build-native-app}\n\n1.  In Studio Pro top bar navigation, click **App** > **Build Native Mobile App**: </br>\n\ta. If you are building your native app for the first time, click [here](/howto/mobile/native-build-locally/) for instructions.</br>\n1. After choosing the type of build (local development or distribution) go to **App capabilities**.</br>\n1. Under **Firebase configuration** switch **Push notifications** to **On**.</br>\n1.  Scroll down and upload the Firebase configurations:</br>\n    a. *google-services.json* for the Android build.</br>\n    b. *GoogleServices-Info.plist* for the iOS build.</br>\n\n    These files contain the information and private keys necessary to enable push notifications in your iOS and Android apps. \n\n    | **File**    | **Source**   | **Usage**      |\n    | -------- | -------- | ------- |\n    | **google-services.json** | Google Firebase | Firebase configuration and private key, bundled as part of your Android application. |\n    | **GoogleServices-Info.plist** | Google Firebase | Firebase configuration and private key, bundled as part of your iOS application. |\n1. Save the configuration. Now you are ready to build.\n\nWhen building for local development, keep in mind that Mendix's Make it Native does not support push notifications. In order to use and test push notifications, you will have to build your own native app as described above and distribute it to an emulator (Android only) or test device.\n\nNow you are able to build, the next step is to run your app in an emulator or test device so you can try to [Send Your First Test Push Notification](/howto/mobile/notif-send-test/). "
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-config-push.md",
    "header": {
      "title": "Configure Push Notifications",
      "url": "/howto/mobile/notif-config-push/",
      "parent": "notifications",
      "weight": "56",
      "description": "Tutorial for configuring push notifications.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase"
      ]
    },
    "body": "\n## 1 Introduction \n\nThis how-to will teach you to configure the runtime for using push notifications in native apps. \n\n## 2 Configuring Your Notifications\n\nIf you have completed [Add Module Dependencies](/howto/mobile/notif-add-module-depends/) and [Implement the Push Notifications Module](/howto/mobile/notif-implement-module/) per your use case, do the following to configure your push notifications:\n\n1. Open your app in Mendix Studio Pro.\n1. Log in as the Administrator user you [previously designated](/howto/mobile/notif-implement-module/#config).\n1. Navigate to the **Administration** page.\n\nThe first time you open this page it will present you with a wizard to set up the Firebase configuration. If you have not set up Firebase yet, see [Set Up the Google Firebase Cloud Messaging Server](/howto/mobile/setting-up-google-firebase-cloud-messaging-server/). \n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-config-push/push-setup-wizard.png\" alt=\"test entity\"   width=\"350\"  >}}\n\nWhen selecting a platform to support, the wizard will ask for the Google Firebase project ID and service account private key. Upload the private key file here.\n\n| **File**    | **Source**   | **Usage**      |\n| -------- | -------- | ------- |\n| **{project_id}-firebase-adminsdk-{identifier}.json** | Google Firebase | Private key for the Firebase service account, used in runtime configuration. |  \n\nNow you completed the initial setup wizard, you can move on to [Native Push Notification Implementation](/howto/mobile/notif-implement-native/)."
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-implement-module.md",
    "header": {
      "title": "Implement the Push Notifications Module",
      "url": "/howto/mobile/notif-implement-module/",
      "parent": "notifications",
      "weight": "54",
      "description": "Tutorial for implementing the push notification module.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase, ios, android"
      ]
    },
    "body": "\n## 1 Introduction\n\nNow that you have implemented the prerequisites in your app, you must implement the [Push Notifications Connector](https://marketplace.mendix.com/link/component/3003) module. Complete the steps below to enable the basic configuration.\n\n## 2 Downloading From Marketplace\n\nIf you have not done so, make sure to download the **Push Notification Connector** module from the Marketplace:\n\n1. Open up the Marketplace from Studio Pro.\n1. Search for *Push Notification Connector*.\n1. Open the **Push Notification Connector** module.\n1. Click **Download**.\n\n## 3 Configuring Your App {#config}\n\nIn order for your app to use to use the Push Connections Module, configure the following things:\n\n1. Open **App** > **Security** in the App Explorer.\n1. Go to **User roles**.<br />\n1. Adjust the user roles that should have access to the push notifications:<br />\n\ta. The `Administrator` module role should be assigned to at least one user executing configuration and administrative tasks. <br />\n\tb. The `Anonymous` module role may be assigned to your anonymous app user role. <br />\n\tc. The `User` role is for any user role that needs to interact with notifications without being an `Administrator` or `Anonymous` user.\n1. Save the Security settings.\n1. Open up **App** > **Navigation** in the App Explorer.\n1. Add a new open page navigation item to the **Responsive** navigation profile.\n1. Select the **Administration** page from the **PushNotifications** module. This page is located in the **_USE ME/Web** folder of the **PushNotifications** module.\n1. Add a microflow sub-call to your **Afterstartup** microflow for the microflow **AfterStartup_PushNotifications**:<br />\n\ta. If you do not have an **Afterstartup** microflow configured yet, read the [After Startup](/refguide/project-settings/#after-startup) section of *App Settings* for more information.\n\nNow you are able to start your app and move on to the next step: [Set Up the Google Firebase Cloud Messaging Server](/howto/mobile/setting-up-google-firebase-cloud-messaging-server/).\n"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-implement-native.md",
    "header": {
      "title": "Implement Push Notifications in Your Native App",
      "url": "/howto/mobile/notif-implement-native/",
      "parent": "notifications",
      "weight": "58",
      "description": "Tutorial for implementing push notifications in a native app.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis how-to will help you set up the elements which allow your native app to handle push notifications sent from your server Mendix application. After completing this step you will be able to build a native app with support for push notifications.\n\nTo make setup easy, the Push Notifications Connector module includes snippets that will help you with the initial setup. Do the following:\n\n1. Expand the **Marketplace modules** > **PushNotifications** > **USE ME** folder.\n1. Find and copy the **Native** folder.\n1. Paste the **Native** folder contents into your own app's navigation.\n1. In your app's navigation, expand the new **Native** folder.\n1. Copy the **NativeHomepage_Snippet** snippet.\n1. Paste the snippet into your Native navigation’s homepage.\n\n## 2 App Events Widget\n\nCompleting the previous section brings the **App events** widget into your app. This widget is already configured and part of a snippet, so you should not need to change it. \n\nIf you already had an **App events** widget on your homepage, follow these steps:\n\n1. Open the **App events** widget.\n1.  In  **Page load**, select **Call a nanoflow** from the **On load**  drop-down list. \n2.  For **Nanoflow**, click **Select** and specify the nanoflow **OnPageLoad_RegisterPushNotifications** from the **PushNotifications** module:<br /> \n\ta. If you already have a nanoflow selected, make a **Call nanoflow** activity to the nanoflow in that existing nanoflow.<br />\n1. In **App resume**, select **Call a nanoflow** from the **On Resume** drop-down list. \n1. For **Nanoflow**, click and specify the nanoflow **OnPageLoad_RegisterPushNotifications** from the **PushNotifications** module: <br />\n    a. If you already have a nanoflow selected, make a **Call nanoflow** activity to the  nanoflow in that existing nanoflow. <br /> \n\n## 3 Notifications Widget\n\nThe snippet also adds the **Notifications** widget which lets users interact with the notifications the app receives.\n\nBy default this widget is configured with an **Example** action. It uses a non-persistable entity ([NPE](/refguide/persistability/#non-persistable)) that stores data received from the notifications. It then uses that data in the nanoflow upon receiving or opening the notification. Use this example to make your own actions. \n\n## 4 Customizing Offline Synchronization\n\nTo ensure push notification integration executes properly on your native app you must adjust the objects that are synchronized to your mobile device:\n\n1. Open your app's **Navigation**.\n1. Click the **Native mobile (tablet & phone)** navigation tab.\n1. Click the **Synchronization configuration** button.\n1. If it is not already added, add the **DeviceRegistration** entity from the **PushNotifications** module.\n1. From the **Download** dropdown menu, select **All Objects** for that entity and click **OK**.\n\nThis will ensure that the correct objects are synchronized to your native apps.\n\nNow that you have everything set up, it is time to deploy your native app. See [Build a Native Mobile App with Push Notifications](/howto/mobile/notif-build-native/) for instructions on enabling push notifications when building a native app. "
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-mult-devices.md",
    "header": {
      "title": "Send Notifications to Multiple Devices",
      "url": "/howto/mobile/notif-mult-devices/",
      "parent": "notifications",
      "weight": "71",
      "description": "Learn to send notifications to multiple devices with the Native Mobile Builder.",
      "tags": [
        "mobile",
        "push notification",
        "remote",
        "push",
        "notification"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis tutorial will teach you to send test push notifications to multiple devices.\n\n{{% alert color=\"info\" %}}\nPush notifications only work with apps created through the Mendix Native Mobile Builder. You cannot send notifications to an app inside the Make it Native app.\n{{% /alert %}}\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisite:\n\n* Send one test push notification as described in [Use Notifications](/howto/mobile/notifications/)\n\nIf you want to use push notifications with custom apps created with Mendix Native Mobile Builder, make sure you have completed the following prerequisite:\n\n* Complete [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/) through the end of the *Making Your First Build* section\n\n## 3 Sending Notifications to Multiple Devices\n\nWhat if you want to send messages to all your users' devices with a single button push, but you do not want to handle the GUID retrieval? The section below will address this scenario. Specifically, you will send a push notification containing a data object to your users' devices via the Push Notifications API.\n\n### 3.1 Creating a Microflow to Send a Data Object Push Notification \n\nCreate a microflow *ACT_SendProductToAllDevices* with the following elements:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-mult-devices/SendProductToAll.png\" alt=\"SendProductToAll\"   width=\"300\"  >}}\n\n1. Add a *Product* data parameter to your microflow.\n2. Retrieve the *PushNotifications.Device* entity list from a database:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-mult-devices/retrieveDevices.png\" alt=\"retrieveDevices\"   width=\"300\"  >}}\n    \n3. Drag and drop the **PrepareMessageData** microflow from *PushNotifications/_USE ME/API* onto **ACT_SendProductToAllDevices** and configure the following:<br />\n\ta. Title: *myTitle*.<br />\n\tb. Body: *myBody*.<br />\n\tc. TimeToLive: *0*.<br />\n\td. Badge: *0*.<br />\n\te. ActionName: *sendProduct*.<br />\n\tf. ContextObjectGuid: *empty*:\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-mult-devices/prepareMessageData.png\" alt=\"prepareMessageData\"   width=\"300\"  >}}\n\n\t**ContextObjectGuid** is set to empty since you will pass the object itself to the **SendMessageToDevices** Java action where it will be retrieved automatically. \n\n4. Drag and drop the **SendMessageToDevices** Java action from *PushNotifications/_USE ME/API* onto **ACT_SendProductToAllDevices** and configure the following:<br />\n\ta. **Message data param**: **$MessageToBeSent**.<br />\n\tb. **Device param**: **$Devices**.<br />\n\tc. **Context object**: **$Product**:\n\t\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-mult-devices/sendMessagesJava.png\" alt=\"sendMessagesJava\"   width=\"300\"  >}}\n  \n5. Go to **Product_NewEdit** and drag and drop **ACT_SendProductToAllDevices** inside of that page's data view:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-mult-devices/sendProductToAllButton.png\" alt=\"sendProductToAllButton\"   width=\"300\"  >}}\n\n### 3.2 Testing the Implementation\n\nTest your new push notification capabilities by doing the following:\n\n1. Run your native app in your device's background.\n2. In your web browser, go to **Product_NewEdit** and click your **ACT_SendProductToAllDevices** microflow button. \n\nThis will send a notification to all available devices. When you tap the notification, you will be redirected to the particular product page you modeled.\n\n## 4 More Java Action Explanations\n\nFor more detail on Java actions available in the Push notifications module, see the sections below.\n\n### 4.1 PrepareMessageData Microflow\n\nThis allows users to create their own user interfaces in order to alter and create a push notification message. \n\n### 4.2 SendMessageToDevice and SendMessageToDevices Java Actions\n\nThese Java actions have the following parameters:\n\n* **MessageDataParam** (PushNotifications.MessageData): this parameter can be generated by the **PrepareMessageData** microflow\n* **DeviceParam** (List of PushNotifications.Device or PushNotification.Device): this parameter can be used to send the same message to a list of devices\n* **ContextObject**: this parameter will allow any Mendix object to be passed to the notification\n\n### 4.3 SendMessageToUsers and SendMessageToUser Java Actions\n\nEvery user is allowed to have more than one device. When sending push notifications to every device of a particular user, use  the **SendMessageToUser** Java action.\n\nTo send a push notification to all users, use the **SendMessageToUsers** Java action.\n\n## 5 Troubleshooting Notification Issues\n\nIf you run into issues, see the [Troubleshoot Notification Issues](/howto/mobile/notif-send-test/#troubleshoot) section of *Send Your First Test Push Notification*.\n\n## 6 Read More\n\n* [Use Notifications](/howto/mobile/notifications/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/notif-send-test.md",
    "header": {
      "title": "Send Your First Test Push Notification",
      "url": "/howto/mobile/notif-send-test/",
      "parent": "notifications",
      "weight": "64",
      "description": "Tutorial for testing your push notifications.",
      "tags": [
        "mobile",
        "native",
        "push",
        "local",
        "firebase"
      ]
    },
    "body": "\n## 1 Introduction\n\nAfter setting up your configuration on the server, and deploying your native app it is now time to send your first test push notification.\n\n## 2 Sending the Test Notification\n\nTo send your first test notification, do the following:\n\n1. Login to your web application. \n1. Go to the push notification administration page you added earlier to your navigation.\n1. Go to the **Devices** tab.\n1. Select the your test device.\n1. Click **New Message** (or double click your test device).\n1. Fill in any **Title**/**Body** that you want for your notification.\n1. Set the **Action name** to *Example*.\n1. Leave the remaining fields to the defaults.\n1.  Click **Send**:\n\n    {{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/notif-send-test/push-send-message.png\" alt=\"test entity\"   width=\"350\"  >}}\n\nYou should now receive the notification on your device. If the application is already opened, the action will log a message (on log node **ExampleNotification**) and show a dialog box in the app.\n\nIf the app is not open (or running in the background) it will deliver and show the notification in the usual location for Android or iOS devices. Click on the notification to trigger the in-app action.\n\nCongratulations, you have just sent your first push notification! \n\nIf you did not receive the message, check the application's logs to see if the message was sent successfully. See the troubleshooting section below for solutions to the most common issues.\n\n## 3 Troubleshooting Notification Issues {#troubleshoot}\n\n| Issue | Cause | Solution |\n|-----|----|-----|\n| Sending a message causes a **SenderId mismatch** error or **403: Forbidden**. | Your native mobile app registered the device within your Mendix applications, but not with Firebase. | Follow the [Build Your Native App](/howto/mobile/notif-build-native/#build-native-app) section in *Build a Native App with Push Notifications Enabled* and make sure you add the *google-services.json* file. |\n| Sending a message causes a **Request contains an invalid argument** error or **400: Bad Request**. | Your **Project ID** does not match the **project_id** in your private key *json* file. | Upload the correct file or [generate a new private key](/howto/mobile/setting-up-google-firebase-cloud-messaging-server/#setting-up-a-service-account) in Firebase and upload it. |\n| Mendix Runtime exception on JavaAction 'DecryptString': **Key should not be empty**. | This module depends on the **Encryption** module, which requires a key. | Set the constant **EncryptionKey** in the **Encryption** module with a key of exactly 16 characters. |\n| Error sending message: **Error reading credentials from stream, 'type' field not specified. at PushNotifications.SendFCMMessages (JavaAction : 'GetFCMAccessToken')**. | The wrong private key file was uploaded. | Upload the correct file or [generate a new private key](/howto/mobile/setting-up-google-firebase-cloud-messaging-server/#setting-up-a-service-account) in Firebase and upload it. |"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server.md",
    "header": {
      "title": "Set Up the Google Firebase Cloud Messaging Server",
      "url": "/howto/mobile/setting-up-google-firebase-cloud-messaging-server/",
      "parent": "notifications",
      "weight": "55",
      "tags": [
        "mobile",
        "push notification",
        "google",
        "firebase",
        "server"
      ]
    },
    "body": "\n## 1 Introduction\n\nYou can use Google's Firebase Cloud Messaging (FCM) service to send push notifications to both Android and iOS devices. To send push notifications using FCM from the Push Notifications Connector module, you must set up a Firebase account with FCM enabled. This how-to will teach you how to register for FCM and configure the service in your app.\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Have a Firebase account (https://firebase.google.com)\n\n## 3 Setting up a Firebase Project\n\nThere are two possible scenarios: you can create a new FCM project, or you can update your existing GCM project to FCM. Both scenarios are described below.\n\n### 3.1 Migrating a GCM project to FCM\n\nTo prevent the degraded reliability of push notifications delivery, you should migrate existing GCM projects to FCM and upgrade credentials if needed.\n\n#### 3.1.1 Signing into the Developer's Console\n\nOpen the [Firebase developer's console](https://console.firebase.google.com/) and sign in with your Google ID.\n\n#### 3.1.2 Importing the Project\n\nTo import your project, do the following:\n\n1. In the Firebase console, select **Import Google Project**. \n1.  Select your GCM project from the list of existing projects, select a region, and click **Add Firebase**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/Add_Firebase_to_a_Google_Project.png\"   width=\"350\"  >}}\n\nWith that done, continue with [Configuring APNs Credentials](#configuring) below.\n\n### 3.2 Creating a New FCM Project\n\n#### 3.2.1 Signing into the Developers Console\n\nOpen up the [Firebase developers console](https://console.firebase.google.com/) and sign in with your Google ID.\n\n#### 3.2.2 Creating the Project\n\nTo create a project, do the following:\n\n1. Click **Create new project**.\n1. Fill in your application's project name and region. \n1.  Click **Create**\"\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/Create_Firebase_Project.png\"   width=\"350\"  >}}\n\n## 4 Adding an Android or iOS App {#native-apps}\n\nBefore you add an app to FCM, you must retrieve your app's bundle ID. Its location depends on your type of your mobile app.\n\nFor a native mobile app, your bundle ID will be what you specify for the **App identifier** in the NBUI. You can find this ID later in your generated GitHub repo:\n\n* For Android, open *android/app/build.gradle* and consult **applicationId** to find your ID \n* For iOS, open *ios/Config/config.xcconfig* and consult **BUNDLE_IDENTIFIER** to find your ID\n\nClick **Deploy**, then **Mobile App**. Your ID is listed as **App Identifier**:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/hybrid_app_identifier.png\"   width=\"350\"  >}}\n\nDo the following to add your app to FCM:\n\n1.  Click the **Project Overview** cogwheel and select **Project settings**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/project_settings.png\"   width=\"350\"  >}}\n\n1.  Go to the **General** tab and click **Add app**:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/add_app.png\"   width=\"350\"  >}}\n\n1.  Select Android and, fill in the bundle_id, and skip the rest of the steps: \n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/android_setup.png\"   width=\"350\"  >}}\n\nBundle ID must be matching with your package ID. Make sure to repeat this step for iOS as well.\n\n## 5 Configuring APNs Credentials (Optional) {#configuring}\n\nIf you wish to send push notifications to iOS devices through FCM, you will need to configure your APNs credentials:\n\n1. Click in the upper-left corner of the screen and select **Project settings**.\n1.  Navigate to the **Cloud messaging** tab:\n\n\t{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/push_notifications_cloud_messaging.png\"   width=\"350\"  >}}\n\n1. On this tab, upload either your APNs key or your APNs certificate(s) as configured in your [Apple Developer account](https://developer.apple.com).\n\n## 6 Setting Up a Service Account {#setting-up-a-service-account}\n\nIn the upper-left corner of the screen, click the cogwheel and select **Project settings**. Then navigate to the **Service accounts** tab.\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/push_notifications_service_accounts.png\"   width=\"350\"  >}}\n\nOn this page, press **Generate new private key**. Store the resulting file in a secure location. You will use this file when configuring FCM in the back-end of your Mendix application.\n\nThe file you just created gives API access to all available Firebase services for your app. If you want a more restrictive service account, click **Manage all service accounts** in the upper-right side of the screen, then create a service account that is restricted to using the Cloud Messaging functionality.\n\n## 7 Downloading the Google Services Config Files {#downloading-the-google-services-config-files}\n\nIn addition to the back-end configuration set up in the previous steps, you will need additional files that will be bundled as part of your mobile application. To obtain these, again click the cogwheel on the upper-left side of the screen and select **Project settings**. Then navigate to the **General** tab:\n\n{{< figure src=\"/attachments/howto/mobile/native-mobile/implementation/notifications/setting-up-google-firebase-cloud-messaging-server/push_notifications_platforms.png\"   width=\"350\"  >}}\n\nThe list at the bottom shows the Android and iOS applications that you have configured for your Firebase project. Select the Android application and click *google-services.json*. Then click the iOS application and click *GoogleService-Info.plist*. Store both files in a secure location. You will need these when building your mobile application.\n\n{{% alert color=\"warning\" %}}\nOnly create an iOS application in your Firebase project when you plan on using FCM for sending push notifications to iOS devices. If you plan to keep using APNS to send push notifications to iOS devices, you do not have to create an iOS application in your Firebase project, and you do not have to download a *GoogleService-Info.plist* config file.\n{{% /alert %}}\n\n## 8 Read More\n\n* [Set Up Push Notifications](/howto/mobile/notifications/)\n* [Set Up Hybrid Push Notifications](/howto/mobile/setting-up-hybrid-push-notifications/)"
  },
  {
    "file": "../docs/content/en/docs/howto/mobile/native-mobile/testing-mendix-native-apps-using-appium.md",
    "header": {
      "title": "Test Mendix Native Apps Using Appium",
      "url": "/howto/mobile/testing-mendix-native-apps-using-appium/",
      "parent": "native-mobile",
      "weight": "95",
      "description": "This how-to will teach you how to write end-to-end tests once and run them on both platforms using Appium.",
      "tags": [
        "test",
        "testing",
        "appium",
        "mobile",
        "native"
      ]
    },
    "body": "\n## 1 Introduction\n\nMendix lets you create native mobile apps for both Android and iOS from a single app. To verify that your apps work as expected, you can test them using Appium. Using Appium can help you because it supports both iOS and Android with a single API that resembles Selenium's. This how-to will teach you how to write end-to-end tests once and run them on both platforms, all while using a familiar API. You will also learn how to run and test your apps on emulators.\n\n**This how-to will teach you how to do the following:**\n\n* Understand how Mendix Studio and Studio Pro widgets relate to your native app\n* Set up Appium GUI to spy on a Mendix native iOS app\n* Set up Appium GUI to spy on a Mendix native Android app\n* Set up automatic testing for your Mendix native app\n\n## 2 Prerequisites\n\nBefore starting this how-to, make sure you have completed the following prerequisites:\n\n* Install [Appium Desktop](https://github.com/appium/appium-desktop)\n* Install, run, and fix any issues found by [appium-doctor](https://github.com/appium/appium-doctor)\n\n## 3 Understanding How Widgets Relate to Your Native App\n\nFor each widget in the page editor of Studio and Studio Pro, the value of the named property will map to a property of the corresponding UI element in the native app. For iOS these UI elements will have an `accessibility id` property and for Android there will be a `view-tag` property. `view-tag` properties can only be read with the Espresso Android driver.\n\nUnder the hood, Mendix uses react-native to create your native apps. React-native's components have a property called `testID` that can be set. This `testID` is created specifically for end-to-end testing. For every component Mendix fills this with the value of the name property of the corresponding widget in the page editor. The `testID` is then mapped to a UI element's property in the native app by React Native. For iOS these UI elements will have an `accessibility id` property, and for Android there will be a `view-tag` property.\n\nHowever, the default Appium Android driver (UIAutomator2) is unable to read the `view-tag` property. For Appium to be able to read that property, you will need to configure it to use another driver: the Espresso driver. The Espresso driver requires you to install instrumentation in your app to work.\n\n## 4 Setting Up Appium Desktop to Spy on a Mendix Native iOS App\n\n1. Build a native iOS app for your Mendix app (see [How to Build Native Apps](/howto/mobile/build-native-apps/) for more information).\n1. Build the WebDriverAgent project that is shipped with your Appium Desktop installation as described [here](http://appium.io/docs/en/advanced-concepts/wda-custom-server/). For Appium Desktop, the WDA project can be found in */Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-webdriveragent*.\n1. Start Appium Desktop\n1. Click **Start Server**.\n1. On the new screen, click the **Start Inspector Session** magnifier image in the top-right.\n1. In the new window, add the following capabilities:\n\n    ```json\n    {\n    \"automationName\": \"XCUITest\",\n    \"deviceName\": \"desired device here, for instance 'iPhone 11'\",\n    \"platformName\": \"iOS\",\n    \"platformVersion\": \"desired platform version, for instance '14.3'\",\n    \"app\": \"location of your .app iOS app file\",\n}\n    ```\n\n1. Click **Start Session** and wait until your app starts.\n1. Click on the blue **Select Elements** button, and then click on an element in the app preview to spy on that element.\n\n## 5 Setting Up Appium Desktop to Spy on a Mendix Native Android App\n\n1. Add the Espresso dependencies by following the setup instructions [here](https://developer.android.com/training/testing/espresso/setup).\n\n1. Build a native Android app for your Mendix app (See [How to Build Native Apps](/howto/mobile/build-native-apps/) for more information).\n\n1. Start Appium Desktop.\n\n1. Click **Start Server**.\n\n1. On the new screen, click the **Start Inspector Session** magnifier image in the top-right.\n\n1. In the new window, add the following capabilities:\n\n    ```json\n    {\n    \"deviceName\": \"arbitrary name of your Android device\",\n    \"avd\": \"snake-cased name of your Android emulator\",\n    \"platformName\": \"Android\",\n    \"udid\": \"udid of your Android device\",\n    \"appPackage\": \"the package name of your app\",\n    \"appActivity\": \"the main activity name of your app\",\n    \"automationName\": \"Espresso\",\n    \"app\": \"location of your .apk Android app file\",\n}\n    ```\n\n1. Click **Start Session** and wait until your app starts.\n\n1. Click on the blue **Select Elements** button, and then click on an element in the app preview to spy on that element.\n\n{{% alert color=\"info\" %}}\nWhile using Espresso in combination with Mendix apps, we observed a `No static method lifecycleEventObserver` error. More information about this can be found [here](https://github.com/appium/appium-espresso-driver/issues/639). You can fix this by adding the `espressoBuildConfig` property to the capabilities. It should point to a JSON file containing:\n\n```json\n{\n\"additionalAndroidTestDependencies\": [\"androidx.lifecycle:lifecycle-common:2.2.0\"]\n}\n```\n\n{{% /alert %}}\n\n{{% alert color=\"info\" %}}\nWhile using Espresso in combination with Mendix apps, there have been occasional package conflicts. You can fix this by adding the `espressoBuildConfig` property to the capabilities. It should point to a JSON file containing your desired tools and versions:\n\n```json\n{\n\"toolsVersions\": {\n    \"compileSdk\": \"30\"\n    ...\n}\n}\n```\n\n{{% /alert %}}\n\n## 6 Automatically Testing Your Mendix Native App\n\nOnce you have the capabilities you want that work with Appium Desktop, you can also use them with Appium CLI to run automated tests. Everything you need to create your first automated test can be found [here](http://appium.io/docs/en/about-appium/getting-started/?lang=en). You can use the the Appium Desktop Inspector to find the right locators.\n\n## 7 Read More\n\n* [How To Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/)\n* [How To Troubleshoot Common Native Mobile Issues\n](/howto/mobile/common-issues)"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/_index.md",
    "header": {
      "title": "Mobile",
      "url": "/refguide/mobile/",
      "weight": "50",
      "tags": [
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nMendix allows you to quickly build true [native mobile apps](#nativemobile) and [progressive web apps](/refguide/progressive-web-app/). This document gives an overview of mobile app development with Mendix. \n\nWith Mendix, you can create different channels (for example, responsive, native phone) from a single model using navigation profiles. These mobile profiles can be added and removed separately. If you add a profile, you must also provide a home page for it. For more information on navigation profiles, see [Navigation](/refguide/navigation/). \n\n## 2 Native Mobile Apps {#nativemobile}\n\nWith Mendix 9, it is possible to build fully native mobile apps. Native mobile apps they do not render inside a web view, but use native UI elements instead. This results in fast performance, smooth animations, natural interaction patterns (like swipe gestures), and improved access to all native device capabilities.  To make such responsive native mobile apps, Mendix leverages the popular open-source framework [React Native](https://facebook.github.io/react-native/).\n\nYou can use pages, widgets, nanoflows, JavaScript actions, microflows, and many other familiar elements to build your app. For more information on how to to build a native mobile app, see [Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/).\n\nNative mobile apps' theming and styling is based on JavaScript. For more information on styling, see [Native Styling](/refguide/native-styling-refguide/). \n\n## 3 Progressive Web Apps {#pwa}\n\nProgressive web apps (PWAs) are an evolution of traditional web apps. Overall, PWAs tend to behave more like native mobile apps. One key difference, however, is that PWAs do not need to be distributed via an app store but can be accessed directly via the browser.\n\nProgressive web apps have three main characteristics:\n\n* **Installable —** PWAs let you add your app to your user’s home screen and start a full screen app. This makes PWAs feel more fully-capable native apps.\n* **Reliable —** Using service workers, PWAs can work offline or partially offline. Mendix PWAs can work partially offline (resources like styling, pages, and images are cached) or fully offline (like native mobile apps).\n* **Capable —** PWAs can leverage several device capabilities like the camera and location, and can offer support for web push notifications. Note that support for features depend on which browser is used.\n\n## 4 Offline-First Apps\n\nWith Mendix, you can build apps which work regardless of internet connection. Offline-first applications provide end-users with a continuous experience and the confidence that their data is secure in all situations. Pages and logic interact with an offline database on the device itself, and data is synchronized with the server when possible. This results in a nicer UI, increased reliability, and improved device battery life. For more information on offline-first app capabilities, see [Offline First](/refguide/offline-first/).\n\nMendix's native mobile apps are always configured with offline-first capabilities. When building an app, you can choose to build an online app which continously connects with a server, or an offline-first app that works even without an internet connection. This can be configured by choosing the corresponding navigation profile in Mendix Studio Pro. For more instructions on setting up such a profile, see [Navigation](/refguide/navigation/).\n\n## 5 Main Documents in This Category\n\n* [Native Mobile](/refguide/native-mobile/) – presents information on building fully native mobile apps with the Mendix Platform that utilize native UI elements\n* [Progressive Web Apps](/refguide/progressive-web-app/) – explains the capabilities and configurations of progressive web apps\n* [Hybrid Mobile](/refguide/hybrid-mobile/) – describes the depreciated state of hybrid mobile in Mendix 9 \n* [Offline First](/refguide/offline-first/) – provides details on the architectural concepts of offline-first applications in Mendix\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/ar-widgets.md",
    "header": {
      "title": "Augmented Reality Widgets",
      "url": "/refguide/ar-widgets/",
      "category": "Mobile",
      "weight": "55",
      "tags": [
        "mobile",
        "augmented reality",
        "studio pro",
        "AR",
        "VR"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis reference guide will place the Augmented Reality (AR) widgets into context, as well as explain how they can be used\nto create AR experiences. The following terms will be used frequently:\n\n* Augmented reality (AR): adding virtual objects to the real world, through the mobile phone camera view\n* AR scene: the place where all objects are placed in\n* Billboard: describes the rotation behavior of an object, where it will always face the camera\n* Origin: the starting position, specifically (0,0,0)\n\n## 2 Overview of AR Widgets\n\nThere are 9 total AR Widgets. Some are structure widgets, while others are visual widgets:\n\nStructure  widgets:\n\n1.  **Container (AR)**\n2.  **Image Tracker (AR)**\n3.  **Plane Selector (AR)**\n4.  **Node (AR)**\n\nVisual widgets:\n\n5.  **3D Object (AR)**\n6.  **Text (AR)**\n7.  **Cube (AR)**\n8.  **Sphere (AR)**\n9.  **Square (AR)**\n\n## 3 Structure Widgets \n\nThis are the AR widgets that can contain other widgets:\n\n* **Container (AR)**\n* **Image Tracker (AR)**\n* **Plane Selector (AR)**\n* **Node (AR)**\n\nThese widgets do not necessarily add something visual to the AR scene. Instead, they provide functionality or allow you to group other widgets. Structure  widgets function as new starting points for the widgets embedded in them. When you start an AR app, the location of your phone serves as the origin.\n\n### 3.1 Container (AR)\n\nStarts the AR camera view, and contains all other AR widgets. This widget is the start of every AR app.\n\n### 3.2 Image Tracker (AR)\n\n**ImageTracker (AR)** takes an image to track, when this image is found in the camera view it becomes the new origin of\nevery AR widget that is embedded in it. For example, if you use a **ImageTracker (AR)** to recognize an image, and put a\n**Cube (AR)** in it, the cube will start in the exact middle of your image:\n\n{{< figure src=\"/attachments/refguide/mobile/ar-widgets/scale-one.jpg\" alt=\"Cube\"   width=\"300\"  >}}\n\n### 3.3 Plane Selector (AR)\n\n**PlaneSelector (AR)** finds surfaces that could fit your specified size. A user first scans their room by walking around the room with their phone while scanning. During this, all the surfaces are found and checked for size. On the large enough surfaces, an object similar to **Square (AR)** is shown and can be clicked to be selected. This will then be the starting point of embedded widgets.\n\n### 3.4 Node (AR)\n\nA **Node (AR)** can help group other widgets. Everything embedded in a **Node (AR)** can be oriented with fixed distances and rotations from each other. **Node (AR)** also has a feature that can make the objects in it 'billboard' to the camera, which is useful for UI like elements. To see an example of this, check **AR-Examples** > **Car Color Picker** and note the the spheres above the car.\n\n## 4 Visual widgets\n\nVisual widgets are widgets that add a virtual object to the scene.\n\n### 4.1 Cube (AR)\n\n{{< figure src=\"/attachments/refguide/mobile/ar-widgets/Cube.gif\" alt=\"Cube\" >}}\n\n### 4.2 Sphere (AR)\n\n{{< figure src=\"/attachments/refguide/mobile/ar-widgets/Sphere.gif\" alt=\"Sphere\" >}}\n\n### 4.3 Square (AR)\n\n{{< figure src=\"/attachments/refguide/mobile/ar-widgets/Square.gif\" alt=\"Square\" >}}\n\n### 4.4 3D Object (AR)\n\n{{< figure src=\"/attachments/refguide/mobile/ar-widgets/3DObject.gif\" alt=\"3DObject\" >}}\n\nBeyond using simple 3D objects, there are also ways to add more complex and custom objects to your scene. The 3D object widget takes either a URL or a FileDocument (you have to upload its model later). There are currently 3 types supported: *.obj*, *.gltf*, and *.glb*. Each with their own benefits. Using a custom material like with the simple visual widgets is only supported in the *.obj* format.\n\n### 4.5 Text (AR)\n\n{{< figure src=\"/attachments/refguide/mobile/ar-widgets/Text.gif\" alt=\"Text\" >}}\n\n**Text (AR)** can be used to have 3D or 2D text floating in space. It is best practice to add only a few lines of text to the scene in this way. Bigger paragraphs are better communicated through a 2D text field on another place in your app.\n\n## 5 Common Properties\n\nAll AR widgets share these properties:\n\n* Position\n* Rotation\n* Scale\n* Material\n* Interaction\n\n### 5.1 Position\n\n**Position** describes where an object should be. In AR, position can be a bit confusing. This is why most positioning is relative to a parent node.\n\nThis means that the origin of (0,0,0) is in the middle of either the **ImageTracker (AR)**, or (0,0,0) is exactly where the user tapped\non the **PlaneSelector (AR)**. \n\nIt is possible to set a position on visual widgets that is not relative by adding the widget directly into the **Container (AR)**. The 0,0,0 position is then exactly where the camera starts at the beginning of the scene. After the scene has started, the position will not move along with the camera anymore.\n\n### 5.2 Rotation\n\n**Rotation** can be used to turn an object on three different axes. When using rotation for custom 3D objects it will turn around the pivot point of the 3D file — the center of the object is not automatically selected.\n\n### 5.3 Scale\n\n**Scale** is used for setting the size of objects. Widgets that have a set object (**Cube (AR)**, **Sphere (AR)**, or **Square (AR)**) will have a size of 1 or 2 meters. Objects that are added through the 3D Object widget might not conform to that standard unless they are correctly exported with the 1 unit = 1 meter scale. Without that standard scale, objects added with the 3D Object widget can be much larger or smaller than what the scale is set to.\n\n### 5.4 Material\n\nThe **Material** tab sets things like color and also the realism of the object that has to be rendered. For example, setting the rendering mode to PBR will enable physically-based rendering (do not forget to set an HDR image as the reflection map and light source in the **Container (AR)**).\n\n**Material** configurations actually render a 3D element in the camera view. **Cube (AR)**, **Sphere (AR)**, and **Square (AR)** each render a simple 3D object. Only the **Square (AR)** widget can sometimes be invisible from one side. The simple visual widgets come with a way to customize them through scale and material. A material for a 3D object describes what it should look like — think of it like styling. You can add a texture (image), color, different lighting, or even a video to play on the 3D object. The only difference between these objects is in appearance — the configuration is the same on each widget.\n\n### 5.5 Interaction\n\nInteraction is used for all actions your 3D objects can do that interact with the environment or the user.\n\n#### 5.5.1 Physics\n\nPhysics allows your 3D object to react to the world, using gravity, or other object using the collision event. Note that the real world environment will not automatically stop your 3D object from falling when gravity is enabled. You have to add these objects yourself. These are the different physics types: \n\n* **Kinematic** — Objects with this physics type can only be moved by user input, not by other objects in the scene.\n* **Dynamic** — Dynamic objects can be moved both by user input and by other objects in the scene. For example, if another object with gravity\nfalls onto this object, the object will move. \n* **Static** — Static objects will never move and cannot move through any physics interactions. Static objects can still be moved when specifically changing the position on them.\n\n#### 5.5.2 Dragging\n\nBy enabling dragging users can move this object around in their space. The dragging type allows users to either have the\nobject at the same distance when they are dragging it. Effectively this means the object is 'stuck' to the phone while\nthey move it around. By changing the type to fixed to world, the object will now be stuck to floors and walls while the\nuser drags it around.\n\n#### 5.5.3 Pinching\n\nBy enabling pinching, and selecting pinch to scale, you allow the user to scale the object through the pinching gesture.\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/hybrid-mobile.md",
    "header": {
      "title": "Hybrid Mobile",
      "url": "/refguide/hybrid-mobile/",
      "category": "Mobile",
      "weight": "3",
      "tags": [
        "mobile",
        "hybrid",
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nHybrid mobile apps are deprecated as of Mendix 9. This means that hybrid mobile apps are still supported in Mendix 9 but their usage is discouraged. Accordingly, the creation of new hybrid navigation profiles is disabled.\n\nFor more information see this [Hybrid Mobile Apps Deprecation with Mendix 9](https://www.mendix.com/blog/hybrid-mobile-apps-deprecation-with-mendix-9/) blog entry.\n\nFor hybrid mobile documentation see these Mendix 8 documents:\n\n* [Hybrid Mobile How To Documentation](/howto8/mobile/hybrid-mobile/)\n* [Hybrid Mobile Reference Guide](/refguide8/hybrid-mobile/)\n\n\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/managing-app-signing-keys.md",
    "header": {
      "title": "Managing App Signing Keys",
      "url": "/refguide/managing-app-signing-keys/",
      "category": "Mobile",
      "weight": "21",
      "tags": [
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nTo create a mobile app, you need platform-specific app signing keys. A mobile app is signed with a digital signature by its developers before publication. These signatures are used by both app stores and devices to verify that the app is authentic.\n\nDepending on which platforms you want to target, you will need to create the required signing keys. The following sections describe (per platform) how to create those keys.\n\n{{% alert color=\"warning\" %}} Building hybrid apps in the cloud uses the PhoneGap Build service from Adobe. Because Adobe no longer maintains this service, building hybrid apps in the cloud and publishing them to app stores is no longer possible.\n\nThe parts of this document mentioning PhoneGap Build will be updated with instructions soon. {{% /alert %}}\n\n## 2 iOS{#ios}\n\nUnfortunately, signing keys are always required for iOS app deployment, even if you just want to test the app on your personal device and do not want to publish to the Apple App Store. This section describes how to create the required files.\n\nIt is convenient to have an Apple Mac available, but it is not a requirement. You do always need an Apple Developer Account.\n\n### 2.1 On Apple Macs\n\nIf you have an Apple Mac available, see the Apple developer documentation on [certificate management](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html) for information on how to obtain an iOS signing certificate and distribution profile. Next, see the Apple documentation on [how to create the required distribution profile](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html). \n\n### 2.2 On Other Platforms\n\nIf you do not have an Apple Mac available, you can create a certificate signing request manually. First, create a private key and certificate signing request with the OpenSSL utilty. The following steps assume you have a Windows machine, but these are equally applicable to Linux machines, which usually have the OpenSSL package pre-installed.\n\nTo create a certificate signing request manually, follow these steps:\n\n1.  Download [OpenSSL for Windows](https://www.openssl.org/community/binaries.html) and install it. You just need to download and install the **Win32 OpenSSL Light** package (get the latest version at the top of the list).\n    *   If the setup process complains about a missing VC++ redistributable libraries package, cancel the installation, and first download and install the **Visual C++ 2008 Redistributables** from the same list of packages (you will be redirected to a Microsoft download page). Install OpenSSL to, for example, *C:\\OpenSSL* (make note of this directory, as you will need it in step 3).\n2.  Open a command line interface (CLI) such as Command Prompt. On most systems, you need to do this as an administrator (right-click the Windows start menu link and select **Run as Administrator**).\n3.  Generate a private key with the OpenSSL program that you just installed. Replace `C:\\OpenSSL` with where you installed OpenSSL in step 1. The private key file is stored at the location specified after the `-out` parameter. The following example will store the file in the root directory of your C: drive (you can change this to anything you want, just select a convenient place and keep track of where the file is stored): `\"C:\\OpenSSL\\bin\\openssl.exe\" genrsa -out \"C:\\private.key\" 2048`. The command will output \"Generating RSA private key, 2048 bit long modulus\" and lots of dots and plus signs.\n4.  Generate a certificate signing request (CSR). The file is again stored in the same folder, but can be placed anywhere. Make sure to point to the private key file that was created in the previous step: `\"C:\\OpenSSL\\bin\\openssl.exe\" req -new -key \"C:\\private.key\" -out \"C:\\ios.csr\"`. The command will print some text and then ask you for several different pieces of information related to your identity. Only the **Common Name** is relevant. Fill in your own name, so that the certificate is easily recognized later on after uploading it to the Apple Developer Member Center.\n\nThe resulting *ios.csr* file must be uploaded to the Apple Developer Member Center to generate a signed certificate. Follow these steps to do that:\n\n1.  Open the [Apple Developer Member Center](https://developer.apple.com/account/overview.action).\n2.  Under **iOS, tvOS, watchOS**, click **Certificates, All**.\n3.  In the **iOS Certificates** overview, click the plus button on the top-right. This will open the **Add iOS Certificate** wizard in the **Select Type** step with the caption \"What type of certificate do you need?\".\n    *   If the plus button is disabled (greyed out), you do not have enough rights. Ask the company account administrator to give you extra rights.\n4.  Under **Development**, select **iOS Development Certificate**.\n5.  Click **Continue**. You are now at step **About Creating a Certificate Signing Request (CSR)**. This page describes how to create a certificate signing request on Macs. You can ignore it.\n6.  Click **Continue** again. You are now at step **Generate**, captioned **Generate your certificate**.\n7.  Under **Upload CSR file**, click **Choose File ...**.\n8.  Select the *ios.csr* certificate signing request file that you created.\n9.  Click **Continue**. Apple will sign your CSR and make the signed certificate available for download.\n    *   If you are presented with a message that says that your certificate signing request is pending approval, you do not have enough rights. Ask the company account administrator to approve your certificate signing request.\n10.  Click **Download** and store the *.cer* file on your disk at a convenient place (for example, next to the private key and CSR files).\n11.  Click **Done**. The **iOS Certificates** overview page becomes visible again. Your new certificate should be in the list. Here, you can download it again, or you can revoke it (in case you lose the corresponding private key).\n\n### 2.3 Creating the Required Distribution Profile\n\nOnce you have the certificate file, you need to obtain a distribution profile. The Apple Developer Member Center allows you to define an app identifier, a test device, and finally a distribution profile. For more information, check the Apple documentation on how to [maintain identifiers, devices and profiles](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html).\n\n## 3 Android{#android}\n\nAndroid apps can be developed and deployed to Android devices without signing the apps. However, to publish to app stores, signed apps are required. This requires you generate a keystore and then upload it to Adobe PhoneGap Build.\n\n### 3.1 Generating a Keystore {#generating-a-keystore}\n\nTo generate a keystore for Android, follow these steps:\n\n1. Install Java JDK either for Mac or Windows. Remember where you installed your JDK, as the JDK bin folder will be used later.\n2. Open your **Command Prompt** and run your new *keytool.exe* located in your JDK’s bin folder.\n3.  The *keytool.exe* program can be found in the bin directory of your Java installation (for example: *C:\\Program Files\\Java\\jre1.8.0_20\\bin*):\n\n\t{{< figure src=\"/attachments/refguide/mobile/managing-app-signing-keys/cmdjdkexe.png\" alt=\"keytool location\" >}}\n\t\n4.  Type in the following command line prompt while still pointing to the *keystore.exe*: \n\n\t```\n\t\"{{keytool -genkey -v -keystore file.keystore -alias YOUR_ALIAS_NAME -storepass YOUR_ALIAS_PWD -keypass YOUR_ALIAS_PWD -keyalg RSA -validity 36500}}\"\n\t```\n\n\tBe sure to replace `YOUR_ALIAS_NAME` and `YOUR_ALIAS_PWD` with your alias name and password:\n\t\n\t{{< figure src=\"/attachments/refguide/mobile/managing-app-signing-keys/ktoolsetup.png\" alt=\"name and password\" >}}\n\t\n5.  Answer the subsequent questions, click **Enter** after each question, and type *yes* when asked to confirm your information: \n\t\n\t{{< figure src=\"/attachments/refguide/mobile/managing-app-signing-keys/qanda.png\" alt=\"info questions\" >}}\n\t\n6. Finishing these questions generates a keystore which will be saved into a *file.keystore* file in your current working directory. "
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/native-mobile/_index.md",
    "header": {
      "title": "Native Mobile",
      "url": "/refguide/native-mobile/",
      "category": "Mobile",
      "weight": "1",
      "tags": [
        "mobile",
        "native",
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nWith Mendix you can build powerful native apps. Native mobile apps differ from hybrid apps in that they do not render inside a web view. Instead, they use native UI elements. This enables fast performance, smooth animations, swipe gestures, and improved access to all native device capabilities.\n\n## 2 Documents in This Section\n\n* [Getting the Make It Native App](/refguide/getting-the-make-it-native-app/)\n* [Native Navigation](/refguide/native-navigation/)\n* [Native Template](/refguide/native-template/)\n* [Native Mobile Styling](/refguide/native-styling-refguide/)\n* [Working with Vector Graphics](/refguide/native-svg/)"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/native-mobile/getting-the-make-it-native-app.md",
    "header": {
      "title": "Getting the Make It Native App",
      "url": "/refguide/getting-the-make-it-native-app/",
      "parent": "native-mobile",
      "weight": "10",
      "tags": [
        "Android",
        "iOS",
        "native",
        "debug"
      ]
    },
    "body": "\n## 1 Introduction\n\nThe Make It Native app allows developers to preview, test, and debug native mobile apps in conjunction with Mendix Studio Pro. It currently comes in two versions: \n\n* The **Make It Native 8 app** for Mendix Studio Pro 8 (v8.8 and above) \n* The **Make It Native 9 app** for Studio Pro v9.0 and above\n\nBoth of these apps are available for both Android and iOS devices.\n\nFor more information on using the Make It Native app to test an app, see [How To Get Started with Native Mobile](/howto/mobile/getting-started-with-native-mobile/). For advanced information on debugging with the Make It Native app, see [Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/). If your app will require custom dependencies, such as custom widgets or fonts, see [How to Create a Custom Developer App](/howto/mobile/how-to-devapps/).\n\nFor information on which mobile operating systems are supported by the Make It Native app, see the [Mobile Operating Systems](/refguide/system-requirements/#mobileos) section of *System Requirements*.\n\nTo download the Make It Native app, search for *Make It Native* in your device's app store.\n\n## 2 Archives {#archives}\n\nOccasionally Mendix will introduce features, bug fixes, and functionality that will make the Make It Native app incompatible with older versions of the Mendix Studio Pro.\n\nFor example, you might be working on a time-critical app where updating to the latest Mendix Studio Pro version might be difficult, and due to incompatible changes on the Make It Native app your latest app might not work.\n\nTo solve this issue and others like it, the apps provided in this document can be installed side by side with the latest Make It Native app. Those apps working together will allow you to continue your work unimpeded.\n\n### 2.1 Android\n\nTo acquire the archive you need, see the [Android Make It Native Archive](https://www.dropbox.com/sh/37s3d4gumhej6j3/AAAdXd97G3s8W0sUE1TQyYW9a?dl=0). To install the APKs, navigate with your device to the link provided, choose the version you would like to install, then download and install it on your device.\n\n### 2.2 iOS\n\niOS archive versions for Make It Native are served via TestFlight links. To join a specific TestFlight version of the Make It Native app and install it, tap the appropriate link using the device with the account you would like to join TestFlight with. Use the TestFlight app to install the version of the app you already joined.\n\n## 3 Direct Download Links {#direct-links}\n\nFor Make it Native 9 apps, please download them in their app stores. If you would like to download an older Make it Native 8 version directly, see the section below.\n\n### 3.1 Make It Native for Studio Pro 8.8 and Below:\n\n|                                  Android                                  |                                iOS                                |\n| :-----------------------------------------------------------------------: | :---------------------------------------------------------------: |\n| {{< figure src=\"/attachments/refguide/mobile/native-mobile/getting-the-make-it-native-app/qr-android-8.8.png\" alt=\"Android QR Code\" >}} | {{< figure src=\"/attachments/refguide/mobile/native-mobile/getting-the-make-it-native-app/qr-ios-8.8.png\" alt=\"iOS QR Code\" >}} |\n|   [Link](https://www.dropbox.com/s/z0255q1gcxpvlwl/MiN%208.8.apk?dl=0)    |        [Link](https://testflight.apple.com/join/ra3QR6iG)         |\n\n\n## 4 Read More\n\n* [How to Deploy Your First Mendix Native Mobile App](/howto/mobile/deploying-native-app/)\n* [How to Create a Custom Developer App](/howto/mobile/how-to-devapps/)\n* [How to Debug Native Mobile Apps (Advanced)](/howto/mobile/native-debug/)\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/native-mobile/native-navigation.md",
    "header": {
      "title": "Native Navigation",
      "url": "/refguide/native-navigation/",
      "parent": "native-mobile",
      "weight": "11",
      "tags": [
        "mobile",
        "navigation",
        "native",
        "iOS",
        "Android"
      ]
    },
    "body": "\n## 1 Introduction\n\nAlthough you model native mobile apps in similar ways to web applications, some aspects of navigation in native mobile apps differ from those in web applications. This guide will explain those navigation differences.\n\n### 1.1 Web Apps\n\nGenerally in web apps, there is only one page open at any given time. This is because when you open a page, the previous page is replaced with a new one. When you navigate back, the page you started on is loaded again to replace the current page. This pattern of page loading slows performance.\n\n### 1.2 Native Mobile Apps\n\nIn native mobile apps, pages are kept open by default. This makes it possible to instantly navigate back (for example by tapping the back button or by swiping) while retaining the state of previous pages such as scroll location and active tab information. This greatly benefits your app's user experience. We recommend, however, taking open pages into account when developing mobile apps. Specifically, make sure that there will not be too many pages open at once (which will result in bad performance), and that data is refreshed or updated when needed. To achieve these ends, Mendix gives you granular control over your exact navigation flow.\n\n## 2 Layout Types\n\n### 2.1 Default\n\nAfter opening a page that has a default layout, you can navigate back to the previous page by using the back button in the header, the back button of the device (for Android), or by swiping from the left side of the screen (for iOS). When the app’s home page is open, pressing the Android back button closes the app.\n\n### 2.2 Pop-Up\n\nA page with a pop-up layout looks like a default page, but it shows up with a distinct animation and has a close icon instead of a back icon. On iOS it can also be closed by swiping down from the top of the pop-up. On Android it can be closed using the back button of the device. Pop-ups cannot have a bottom bar. A page with a pop-up layout cannot be used as the default home page, nor can it be added to the bottom bar.\n\nPop-ups can be very useful when asking for input in certain contexts. For example, they work well when you must scan a QR code. They also make wizards (forms with multiple steps) easier, as you can return to previous steps and change things until the process is finished and all pop-ups are closed.\n\n## 3 Navigation-Related Layout Components\n\nNative layouts have helpful properties that enable the most common patterns used in native apps.\n\n### 3.1 Header\n\nA layout that has the header property enabled will always show a bar at the top of the screen. A header consists of three parts: \n\n* Left part: not configurable, but can show a back icon or a close icon depending on the layout type\n* Center part: shows the page's title \n* Right part: configurable with widgets and is often used to contain buttons\n\nThis is an example of the default header on iOS:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-navigation/header.png\" alt=\"An example of the default header on iOS.\"   width=\"250\"  >}}\n\n### 3.2 Bottom Bar\n\nYou can add bottom bar items in the native navigation profile. These items will show up on any page that has a layout with the bottom bar property enabled.\n\nEvery item in the bottom bar has its own navigation stack. This means that if you open a few pages in the first tab, then switch to the second tab and back to the first tab again, your first tab's pages will still be open as you left them.\n\n{{% alert color=\"warning\" %}}\nPages without a bottom bar are created in a separate stack. If you navigate from a page *without* a bottom bar to a page *with* a bottom bar, then all pages in that stack are closed.\n{{% /alert %}}\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-navigation/bottombar.png\" alt=\"An example of the default bottom bar on iOS.\"   width=\"250\"  >}}\n\n## 4 How does Mendix Native Navigation Work?\n\nBy default pages are kept open to provide a better user experience, but they must also be managed correctly for your app to have great performance and a logical flow through the app.\n\n### 4.1 Stacks\n\nTo keep pages open, the navigation system uses multiple stacks of pages. A mobile app can contain multiple stacks at the same time. A stack can be compared to a pile of cards: you can add cards to the top, and you can remove cards from the top.\n\n#### 4.1.1 Single Stack\n\nIf your app does not use a bottom bar, then there is a single stack. This situation resembles navigation on the web most closely. However, it is important to keep in mind that all pages in the stack are kept open until you explicitly close them or press the back button.\n\nThe first page on the stack is always the home page. When you tap a button that opens a page, then there are two pages on the stack, and so on.\n\nWhen you close a page (via a back button, a close action, or swipe to go back (iOS)), only the current page is closed and the previous page becomes visible again.\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-navigation/singlestack.gif\"   width=\"250\"  >}}\n\n#### 4.1.2 Multiple Stacks\n\nIf an app has bottom bar items, every item in the bottom bar will have a separate stack. Within a stack you can navigate by opening and closing pages.\n\nIf a bottom bar item is not focused, pressing it will focus that item. Switching to another bottom bar item will not close pages in the focused one. If the item is already focused, pressing it again will dismiss all pages from its stack.\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-navigation/multiplestacks.gif\"   width=\"250\"  >}}\n\n#### 4.1.3 Pop-Ups\n\nWhen a page with a pop-up layout is opened, a new stack is created and all pages in this stack fully cover the screen. To get back to the previous stack, the pop-up has to be closed.\n\nIt is possible to open other pop-up pages inside the pop-up, and all of those together behave as a single stack. When opening a normal page from the pop-up, the pop-ups will be closed first.\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-navigation/popups.gif\"   width=\"250\"  >}}\n\n### 4.2 Opening and Closing Pages\n\nOften you need to have control of page history to determine, for example, which page is shown when you navigate back. By default, the Close page action only closes a single page in the current stack, but it can be configured to close more pages.\n\n#### 4.2.1 Closing Multiple Pages\n\nYou can navigate back through multiple pages in history at once by setting the appropriate number of pages in your Close page action. A Close page action that closes multiple pages results in a single animation.\n\nYou can configure this behavior either on Close page actions that you have modeled on your pages, or on the Close page activity in your nanoflows. This number can be set using an expression so that you can set either a static number, or a snapshot-calculated one for more complex cases.\n\nThe **All** option can be used to close all pages in the current stack.\n\n#### 4.2.2 Combining Closing and Opening Pages\n\nFor more complex scenarios, it is possible to transparently remove one or more pages from the history from the current stack when navigating to a new page. Doing so ensures that users cannot inadvertently navigate back to pages that are no longer relevant. For example, when a user reaches the end of a three-step wizard flow, you can configure the Open page activity to open the third page and close the previous two pages at the same time. As a result, the user will see a single transition, and navigating back will not lead them to the first two pages.\n\nThe **All** option can be used to close all pages in the current stack.\n\nIn addition, you can configure the Open page action to **Clear history** when navigating to a page. This effectively resets the entire navigation system, not just the current stack, and the user will not be able to navigate back from the target page.\n\n### 4.3 Updating Data\n\nIt is important to remember that any changes you make to your data will be immediately reflected on all active screens. However, this does not mean that these changes are also committed to the database; that remains an explicit action. Another consequence of this is that your app is responsible for keeping track of (and possibly reverting) changes to data when the user decides to navigate back (for example by pressing the back button) without saving their changes. \n\n## 5 Best Practices and Patterns\n\n### 5.1 Make it Simple for the User\n\nIt is important for a user to always understand where they are in the app, and what their next options are. Overall it is useful to show the bottom bar so that the user sees where they are and where they can go. However, in some flows it makes sense to create focus and remove distractions by using a layout without a bottom bar or by using a pop-up layout.\n\n### 5.2 Minimize Open Pages to Improve Performance\n\nWhile the user navigates through an app, all pages stay open in the background. This uses the device's resources, and having too many open pages can cause performance issues. The consequence of this is that the choice between using an Open page or a Close page action should be made more deliberately than with web applications.\n\nWhere possible, use the Close page action (or the above-mentioned variants of the Show page action) as often as possible to ensure that you do not keep too many unnecessary pages open.\n\n### 5.3 Use Pop-Ups for Modal Interactions\n\nMost applications consist of a set of primary user flows, and each primary flow may have secondary flows, for example to request some additional user input. In the case of a calendar app, browsing upcoming events would be the primary flow, and editing one event might be a secondary flow. In general, secondary flows should not disrupt the primary flow, meaning that after the user completes this secondary flow, they should end up where they were in the primary flow.\n\nAlthough such behavior can be modeled using the ability to close multiple pages, we recommend using pop-up pages for such scenarios. Pop-up pages exist entirely outside of the navigation stack, and can be opened and closed without disrupting your app's navigation history.\n\n### 5.4 Startup Flows\n\nThe Open page action's **Clear history** option can be used to model out complex behavior, but one of its most common use cases is a startup flow. Imagine an app that should show a series of tutorial screens on startup. After these screens, the user should land on the main page. From these, it should not be possible to navigate back. This can be achieved by using the Open page action with the **Clear history** option to navigate from the final tutorial screen to the main page.\n\n## 6 Customization\n\nOut of the box, the bottom bar and top bar have a default styling. To change this styling, see the [Pages](/refguide/native-styling-refguide/#pages) section of the *Native Styling Reference Guide*. However, if you want to further customize the styling to match your design, you can create pluggable widgets to replace some of the default navigation components. For more information, see the [Pluggable Widgets API Documentation](/apidocs-mxsdk/apidocs/pluggable-widgets/)\n\n## 7 Read More\n\n* [Show Page Reference Guide](/refguide/show-page/)\n* [Close Page Reference Guide](/refguide/close-page/)\n* [Native Navigation Styling Reference Guide](/refguide/native-styling-refguide/#navigation-widget)\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/native-mobile/native-styling-refguide.md",
    "header": {
      "title": "Native Mobile Styling",
      "url": "/refguide/native-styling-refguide/",
      "parent": "native-mobile",
      "weight": "20",
      "description": "This reference guide will contextualize the style elements Mendix uses in native mobile apps, as well as explain the classes and style properties of Mendix’s widgets.",
      "tags": [
        "Native",
        "Class",
        "Design",
        "Property",
        "Style",
        "Widget",
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nThis reference guide will contextualize the style elements Mendix uses in native mobile apps, as well as explain the classes and style properties of Mendix’s widgets. To learn the basics of native styling, you can consult [How to Implement Native Mobile Styling](/howto/mobile/native-styling/) and then follow [How to Style Your Mendix Native Mobile App](/howto/mobile/how-to-use-native-styling/).\n\nMendix apps use layouts to dictate how pages can look and function. For native mobile apps specifically, you can use a native layout to easily integrate navigation and settings optimized for native functionality. For more information on layouts, see [Layout](/refguide/layout/).\n\nTo keep widgets responsive, Mendix apps use Flexbox. Using Flexbox, a component can set the layout of its child components. This allows your app to retain a consistent layout across multiple form factors. For more information on layout, see React Native’s [Flexbox documentation](https://reactnative.dev/docs/flexbox).\n\nYou can use the `height` and `width` properties to set a widget component’s dimensions. For more information on size, see React Native’s [Height and Width documentation](https://reactnative.dev/docs/height-and-width).\n\n## 2  Style Objects {#style-objects}\n\nA widget is composed of various elements, and each can be styled individually. You can customize your widgets using style objects. A style object is a JavaScript object with a set of attributes specific for each widget. Some of the attributes reuse properties of other elements, such as React Native’s ViewStyle, TextStyle, ImageStyle, and Colors elements. You can consult the following property sets for more information on styling properties as you customize your app:\n\n* **ViewStyle** – React Native’s [View Style](https://reactnative.dev/docs/view-style-props) property set helps you alter borders, opacity, and other general aspects of your app (the view style property set also contains layout, shadow, and transform properties)\n* **TextStyle** – React Native’s [Text](https://reactnative.dev/docs/text-style-props) property set will allow you to style text – using these props you can control text’s font, selection status, and more (the text property set also contains layout properties)\n* **ImageStyle** – React Native’s [Image](https://reactnative.dev/docs/image-style-props) property set will allow you to style images from network sources, a local library, and temporary local images – using these properties you can alter an image’s size, border, and more, while the image property set also contains layout properties (the `resizeMode` value `repeat` is not supported)\n* **Colors** – React Native’s [Color Reference](https://reactnative.dev/docs/colors) property set will allow you to alter colors – you can customize colors using red-green-blue notation, change hue or saturation, and more \n\n### 2.1  Class Names\n\nEach style object has a name, referred to as the object’s class name. You can create new custom classes, and then apply styling to a single widget by setting a class name onto a widget class property. Here you can see the code for creating a `customClassName`:\n\n```javascript\n// A custom styling class\nexport const customClassName = {\n\tcontainer: {\n\t\t// ViewStyle properties\n\t\tpaddingTop: 5\n\t},\n\ttext: {\n\t\t// TextStyle properties\n\t\tfontWeight: \"bold\"\n\t}\n}\n```\n\nThat custom class can be easily accessed in Mendix Studio Pro:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/custom-class.png\" alt=\"custom class\"   width=\"400\"  >}}\n\nWhen you want to apply styling to one instance of a widget, you can extend that widget’s default class. Each widget's default class is named in the [Data Containers](#understanding-data-widgets) section below. The example below shows how to extend a default class:\n\n```javascript\nexport const ActionButton = {\n\tcontainer: {\n\t\t// ViewStyle properties\n\t\tborderWidth: 3\n\t},\n\tcaption: {\n\t\t// TextStyle properties\n\t\tfontSize: 20\n\t},\n};\n```\n\nAdd-on widgets each have their own default styling classes based on their full widget IDs (found in *{widget name}.xml*), and can be created by replacing the dots with underscores. The example below shows a pluggable widget’s default styling class:\n\n```javascript\nexport const com_mendix_widget_native_badge_Badge = (Badge = {\n\ttext: {\n\t\t// TextStyle properties\n\t\tcolor: \"#00FF00\",\n\t}\n});\n```\n\nFor more information on creating your own classes, see the [Creating Your Own Classes](/howto/mobile/how-to-use-native-styling/#creating-your-own-classes) section in *Style Your Mendix Native Mobile App*. That document also shows how to use custom classes as design properties.\n\n## 3  Data Containers {#understanding-data-widgets}\n\nData containers are essential to many Mendix apps. These widgets will allow your users to create and handle data objects, and can be customized to fit your app’s needs.\n\n### 3.1 Data View Widget\n\nThe data view widget shows the contents of one data object. For more information about this widget, see [Data View](/refguide/data-view/).This widget has no user interface, so it does not support any styling.\n\n### 3.2 List View Widget {#list-view}\n\nThe list view shows a list of objects arranged vertically or horizontally. For more information about this widget, see [List View](/refguide/list-view/). This is not the default list view, but how a list view widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/list-view.png\" alt=\"list view\"   width=\"350\"  >}}\n\nThis is how the widget’s code is structured:\n\n```xml\n<container>\n\t<listItem>content</listItem>\n\t<listItem>content</listItem>\n</container>\n```\n\nThe widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | All ViewStyle properties |       |\n| `container` | `numColumns` | This is the number of columns that the list should render (defaults to 1). |\n| `listItem`  | All ViewStyle properties |          |\n| `listItem`  | `rippleColor` | This is the color of the ripple on Android, and will be applied only when the item has an on click action set, otherwise it will be ignored (defaults to `rgba(0, 0, 0, 0.2)`). |\n| `listItem`  | `underlayColor` | This is the color while pressing the item on iOS, and will be applied only when the item has an on click action set, otherwise it will be ignored and defaulted to opacity only. |\n| `listItemDisabled`  | Same properties as `listItem` | Overrides `listItem` styles if the item has an on click action and the action cannot be executed or is disabled during action. |\n\nThe default class to style all list views is named `ListView`.\n\n## 4 Text Widgets\n\nText widgets are used in almost all app pages. Because of their ubiquity, learning to style text widgets will make a large difference for your apps.\n\n### 4.1 Text\n\nThe text widget shows text which can optionally contain parameters. For more information on these widgets, see [Text Widgets](/refguide/text/). The widget’s style properties are as follows:\n\n```xml\n<container>\n\t<text>content</text>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |                 |\n| `text`      | This has all TextStyle properties. |                 |\n\nThe default class to style all texts is named `Text`.\n\n### 4.2 Page Title \n\nThe page title widget shows the title of the page on which it is used. This can be the title defined on the page itself, or the override title defined when showing a page. For more information on this widget, consult [Page Title](/refguide/page-title/). The widget’s style properties are as follows:\n\n```xml\n<container>\n\t<text>Page Title</text>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |                 |\n| `text`      | This has all TextStyle properties. |                 |\n\nThe default class to style all page titles is named `PageTitle`.\n\n## 5 Structure Widgets\n\nStructure  widgets are a set of tools that allow you to provide structure for your page’s content. There is also a specific widget called container widget detailed below. For more information on these widgets, see [Structure](/refguide/structure-widgets/).\n\n### 5.1 Layout Grid\n\nThe layout grid widget can be used to structure the content on your page. You are able to create rows and columns which you can configure to have fixed or dynamic sizing.\n\nThe widget’s style properties are divided over several objects: `LayoutGrid`, `row`, `noGuttersRow`, `col`, `colFitToContent`, `col1`, `col2`, `col3`, `col4`, `col5`, `col6`,  `col7`, `col8`, `col9`, `col10`, `col11`, `col12`, and `noGutters`.\n\n`col` is being applied when the Width property on a column is *Auto-fill*.\n\n`colFitToContent` is being applied when the Width property on a column is *Auto-fit content*.\n\n`col1`, `col2`, `col3`, `col4`, `col5`, `col6`,  `col7`, `col8`, `col9`, `col10`, `col11`, `col12` are applied when the Width on a column property is *Manual*. Only one class is applied based on the related Size property.\n\n`noGuttersRow` (Row) and `noGutters` (Column) are being applied when the Spacing between columns property on a row is set to *No*.\n\nThe main `LayoutGrid`:\n\n```xml\n<container></container>\n```\n\nThe `row`, `noGuttersRow`:\n\n```xml\n<container></container>\n```\n\nThe `col`, `colFitToContent`, `col1`, `col2`, `col3`, `col4`, `col5`, `col6`,  `col7`, `col8`, `col9`, `col10`, `col11`, `col12`, `noGutters`:\n\n```xml\n<container></container>\n```\n\nThe resulting DOM looks like this:\n\n```xml\n<container>\n\t<row>\n\t\t<col></col>\n\t</row>\n</container>\n```\n\n### 5.2 Container \n\nA container widget can be used to style or hide a group of widgets. This widget does not have a visual representation by default, though styling can be used to add spacing. The widget’s style properties are as follows:\n\n```xml\n<container>\n\tcontent\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |        |\n| `container` | `rippleColor` | This is the color of the ripple on Android, and will be applied only when the container has an on click action set, otherwise it will be ignored (defaults to `rgba(0, 0, 0, 0.2)`). |\n| `container`  | `underlayColor` | This is the color while pressing the container on iOS, and will be applied only when the container has an on click action set, otherwise it will be ignored and defaulted to opacity only. |\n| `containerDisabled` | Same properties as `container` | This overrides `container` styles if the there is an on click action set and the action cannot be executed or is disabled during action. |\n\nThe default class to style all page titles is named `Container`.\n\n### 5.3 Tab Container\n\nTab containers are used to show information categorized into multiple tab pages. Tab containers can help display information which exceeds a device’s screen space. This is how a default tab container widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/tab-container.png\" alt=\"tab container\"   width=\"350\"  >}}\n\nThis is how the widget’s code is structured:\n\n```xml\n<container>\n\t<tabBar>\n\t\t<tab>\n\t\t\t<activeLabel>PAGE 1</activeLabel>\n\t\t\t<badgeContainer><badgeCaption /></badgeContainer>\n\t\t</tab>\n\t\t<tab>\n\t\t\t<label>PAGE 2</label>\n\t\t</tab>\n\t\t<indicator>\n\t<tabBar>\n\tcontent\n</container>\n```\n\nThe widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |     |\n| `tabBar`    | This has all ViewStyle properties. |     |\n| `tabBar` | `bounces` | This is a Boolean value indicating whether the tab bar bounces when scrolling. |\n| `tabBar` | `pressColor` | This is a color for material ripple (Android only). |\n| `tabBar` | `pressOpacity` | This is opacity for a pressed tab. |\n| `tabBar` | `scrollEnabled` | This is a Boolean value enabling scrollable tabs. |\n| `tabBar` | `tabBarPosition` | This is the position of the tab bar in the tab view, and possible values are `top` and `bottom` (defaults to `top`). |\n| `indicator` | This has all ViewStyle properties. |     |\n| `tab`       | This has all ViewStyle properties. |     |\n| `label`     | This has all TextStyle properties. |     |\n| `activeLabel`     | This has all TextStyle properties. |     |\n| `badgeContainer`  | This has all ViewStyle properties. |     |\n| `badgeCaption`    | This has all TextStyle properties. |     |\n\nThe default class to style all tab containers is named `TabContainer`.\n\n### 5.4 Scroll Container\n\nA scroll container is used to make enable scrolling for a part of a page. This widget does not have a visual representation by default, though styling can be used to add spacing.  The widget’s style properties are as follows:\n\n```xml\n<container>\n\tscrollable content\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |            |\n\nThe default class to style all scroll containers is named `ScrollContainer`.\n\n## 6 Input Elements\n\nInput elements are typically used to show data to the user and allow them to edit data. For more information on these widgets, see [Input Elements](/refguide/input-widgets/).\n\n### 6.1 Text Box {#text-box}\n\nA text box can be used to display or edit a textual value. This is how a text box widget with validation feedback and a plain text box widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/text-box.png\" alt=\"text box\"   width=\"350\"  >}}\n\nThe widget’s style properties are structured as follows:\n\n```xml\n<container>\n\t<label>Text box</label>\n\t<inputError>Content invalid</inputError>\n\t<validationMessage>Input validation feedback message</validationMessage>\n</container>\n<container>\n\t<label>Text box</label>\n\t<input>Valid text</input>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties.   |   |\n| `containerDisabled` | Same properties as `container` | Overrides `container` styles if the text box is non-editable. |\n| `input` | This has all TextStyle properties. |  |\n| `input` | `autoCapitalize` | This automatically capitalizes certain characters when the user types:<br><br>* `characters`: capitalizes all characters<br>* `words`: capitalizes the first letter of each word<br>* `sentences`: capitalizes the first letter of each sentence (default)<br>* `none`: capitalizes nothing |\n| `input` | `placeholderTextColor` | This is the text color of the placeholder string. |\n| `input` | `selectionColor` | This is the highlight and cursor color of the text input. |\n| `input` | `underlineColorAndroid` | This is the color of the `input` underline. |\n| `inputFocused` | Same properties as `input` | Overrides `input` styles if the text box is focused (with Studio Pro v8.15). |\n| `inputError` | This has the same properties as `input` | Overrides `input` styles if there are validation errors. |\n| `inputDisabled` | Same properties as `input` | Overrides `input` styles if the text box is non-editable. |\n| `label` | This has all TextStyle properties |   |\n| `label` | `numberOfLines` | This is the maximum number of lines to wrap the label text. If the text is any longer, it will be cut off with an ellipsis (defaults to `1`). |\n| `labelDisabled` | Same properties as `label` | Overrides `label` styles if the text box is non-editable. |\n| `validationMessage` | This has all TextStyle properties.   |    |\n\nThe default class to style all text boxes is named `TextBox`.\n\n### 6.2 Text Area\n\nA text box can be used to display or edit a textual value with multiple lines. This widget supports the same style properties and structure as the [Text Box](#text-box) widget above. This is how a text area widget with validation feedback and a plain text area widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/text-area.png\" alt=\"text area\"   width=\"350\"  >}}\n\nThe default class to style all text areas is named `TextArea`.\n\n### 6.3 Drop-Down {#drop-down}\n\nA drop-down is an input widget that can be used to display and edit enumeration attributes.\n\nSince Studio Pro v8.11, the drop-down widget has a new style property called `useUniformDesign: boolean` which enables the uniform design in both platforms.\n\nThe widget’s render hierarchy is as follows for non-uniform:\n\n```xml\n<container>\n\t<label>Drop down enumeration</label>\n\t<value>Content invalid</value>\n\t<validationMessage>Validation feedback enumeration</validationMessage>\n</container>\n<picker>\n\t<pickerBackdropIOS/>\n\t<pickerTopIOS><button>close</button></pickerTopIOS>\n\t<pickerIOS>\n\t\t<pickerItemIOS>First</pickerItemIOS>\n\t\t<pickerItemIOS>Second</pickerItemIOS>\n\t\t<pickerItemIOS>Third</pickerItemIOS>\n\t</pickerIOS>\n</picker>\n```\n\nThe widget’s render hierarchy is as follows for uniform:\n\n```xml\n<container>\n\t<label>Drop down enumeration</label>\n    <valueContainer>\n        <value>First</value>\n\t<icon/>\n    </valueContainer>\n\t<validationMessage>Validation feedback enumeration</validationMessage>\n</container>\n<menuWrapper>\n\t<selectedItemContainer>\n\t\t<selectedItem>First</selectedItem>    <= Selected\n\t</selectedItemContainer>\n    <itemContainer>\n        <item>Second</item>\n    </itemContainer>\n    <itemContainer>\n        <item>Third</item>\n    </itemContainer>\n</menuWrapper>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `containerDisabled` | Same properties as `container` | Overrides `container` styles if the drop-down is non-editable. |\n| `label` | This has all TextStyle properties. | |\n| `label` | `numberOfLines` | The maximum number of lines to wrap the label text. If the text is any longer it will be cut off with an ellipsis. Defaults to `1`. |\n| `labelDisabled` | Same properties as `label` | Overrides `label` styles if the drop-down is non-editable. |\n| `pickerIOS` | This has all ViewStyle properties. |  |\n| `pickerBackdropIOS` | This has all ViewStyle properties. |   |\n| `pickerTopIOS` | This has all ViewStyle properties. |   |\n| `validationMessage` | This has all TextStyle properties. | Styles the validation message (with Studio Pro v8.11).|\n| `value`  | This has all TextStyle properties  | Styles the value button which toggle's dropdown and PickerIOS items. If placeholder is selected, placeholderTextColor will be applied |\n| `useUniformDesign` | `boolean` | Enables new uniformDesign (with Studio Pro v8.11). |\n| `iconStyle`  | This has all TextStyle properties | Styles the arrow down icon next to the value (with Studio Pro v8.15).|\n| `value`  | `placeholderTextColor: string` | If placeholder is selected, placeholderTextColor will be applied (with Studio Pro v8.11).|\n| `valueFocused`  | Same properties as `value` | Overrides `value` styles if the dropdown box is focused. (with Studio Pro v8.15).|\n| `valueContainer` | This has all ViewStyle properties & rippleColor | Styles the value button's container (with Studio Pro v8.11).|\n| `valueContainerFocused` | Same properties as `valueContainer` | Overrides `valueContainer` styles if the dropdown box is focused (with Studio Pro v8.15).|\n| `menuWrapper` | This has all ViewStyle properties | Styles the wrapper view surrounding all the menu items (with Studio Pro v8.11).|\n| `itemContainer` | This has all ViewStyle properties | Styles all the item containers in dropdown menu including selected item container (with Studio Pro v8.11).|\n| `item` | This has all TextStlye properties | Styles all the items in dropdown menu including selected item (with Studio Pro v8.11).|\n| `selectedItem` | This has all TextStyle properties | Styles the selected item in dropdown menu (with Studio Pro v8.11).|\n| `selectedItemContainer` | This has all ViewStyle properties | Styles the selected item's container in dropdown menu (with Studio Pro v8.11).|\n\n### 6.4 Check Box\n\nA check box input widget can be used to display and edit Boolean attributes and is rendered as either a switch or a checkbox. This is how a check box widget in switch render mode looks by default:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/check-box.png\" alt=\"check box\"   width=\"350\"  >}}\n\nThis is how a check box widget in checkbox render mode looks by default:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/check-box-checkbox.png\" alt=\"check box in checkbox render mode\"   width=\"350\"  >}}\n\nThe widget’s style properties structure is as follows:\n\n```xml\n<container/>\n<containerDisabled/>\n<label>\n    <numberOfLines/>\n</label>\n<labelDisabled/>\n<input>\n    <thumbColorOn/>,\n    <trackColorOn/>\n    <trackColorOff/>\n    <thumbColorOff/>\n</input>\n<inputDisabled>\n    <thumbColorOn/>,\n    <trackColorOn/>\n    <trackColorOff/>\n    <thumbColorOff/>\n</inputDisabled>\n<inputError>\n    <thumbColorOn/>,\n    <trackColorOn/>\n    <trackColorOff/>\n    <thumbColorOff/>\n</inputError>\n<checkboxInput>\n    <color/>\n    <size/>\n</checkboxInput>\n<checkboxInputDisabled>\n    <color/>\n    <size/>\n</checkboxInputDisabled>\n<checkboxInputDisabled>\n    <color/>\n    <size/>\n</checkboxInputDisabled>\n<validationMessage/>\n```\n\n| Element | Style Properties    | Description | Render mode |\n| --- | --- | --- | --- |\n| `container` | This has all ViewStyle properties.   |   | Both |\n| `containerDisabled` | Same properties as `container`. | Overrides `container` styles if the text box is non-editable. | Both |\n| `input` | This has all ViewStyle properties.   |   | Switch |\n| `input` | `trackColorOn` | Custom color for the switch track when turned on. | Switch  |\n| `input` | `trackColorOff` | Custom color for the switch track when turned off. | Switch |\n| `input` | `thumbColorOn` | Color of the foreground switch grip when turned on. If this is set on iOS, the switch grip will lose its drop shadow. | Switch |\n| `input` | `thumbColorOff` | Color of the foreground switch grip when turned off. If this is set on iOS, the switch grip will lose its drop shadow. | Switch |\n| `inputError` | This has the same properties as `input`. | Overrides `input` styles if there are validation errors. | Switch |\n| `inputDisabled` | This has the same properties as `input`. | Overrides `input` styles if the check box is non-editable. | Switch |\n| `checkboxInput` | This has all ViewStyle properties. |  | Checkbox |\n| `checkboxInput` | `color` | Custom color for the tick icon. | Checkbox |\n| `checkboxInput` | `size` | Custom size for the tick icon. | Checkbox |\n| `checkboxInputDisabled` | This has the same properties as `checkboxInput`. | Overrides `checkboxInput` styles if the check box is non-editable. | Checkbox |\n| `checkboxInputError` | This has the same properties as `checkboxInput`. | Overrides `input` styles if there are validation errors. | Checkbox |\n| `label` | This has all TextStyle properties.   |  | Both |\n| `label` | `numberOfLines` | The maximum number of lines to wrap the label text. If the text is any longer it will be cut off with an ellipsis. Defaults to `1`. | Both |\n| `labelDisabled` | Same properties as `label`. | Overrides `label` styles if the check box is non-editable. | Both |\n| `validationMessage` | This has all TextStyle properties.   |  | Both |\n\nThe default class to style all check box inputs is named `Checkbox`.\n\n### 6.5 Date Picker\n\nA date picker is an input widget that can be used to display and edit date or time attributes. This is how a date picker widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/date-picker.png\" alt=\"date picker\"   width=\"300\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<label>Drop down enumeration</label>\n\t<value>Content invalid</value>\n\t<validationMessage>Validation feedback enumeration</validationMessage>\n\t<pickerBackdropIOS>iOS picker modal shadow container\n\t\t<pickerIOS>iOS picker\n\t\t\t<pickerTopIOS>iOS picker modal header</pickerTopIOS>\n\t\t</pickerIOS>\n\t</pickerBackdropIOS>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `containerDisabled` | Same properties as `container` | Overrides `container` styles if the date picker is non-editable. |\n| `label` | This has all TextStyle properties. |  |\n| `label`  | `numberOfLines` | This is the maximum number of lines to wrap the label text. If the text is any longer, it will be cut off with an ellipsis (defaults to `1`.) |\n| `labelDisabled` | Same properties as `label` | Overrides `label` styles if the date picker is non-editable. |\n| `value` | This has all TextStyle properties |  |\n| `value` | `rippleColor` | This is the color of the ripple on Android, and will be applied only when the date picker is pressed (defaults to `rgba(0, 0, 0, 0.2)`). |\n| `value`  | `underlayColor` | This is the color while pressing the date picker on iOS, if not set it will be defaulted to opacity only. |\n| `valueDisabled` | This has all TextStyle properties | Overrides `value` styles if the date picker is non-editable. |\n| `placeholder` | This has all TextStyle properties |   |\n| `placeholderDisabled` | This has all TextStyle properties | Overrides `placeholder` styles if the date picker is non-editable. |\n| `validationMessage` | This has all TextStyle properties |  |\n| `pickerBackdropIOS` | This has all ViewStyle properties |  |\n| `pickerIOS` | This has all ViewStyle properties |  |\n| `pickerIOS` | `color` |  |\n| `pickerTopIOS` | This has all ViewStyle properties |  |\n\nThe default class to style all date picker inputs is named `DatePicker`.\n\n### 6.6 Reference selector\n\nThe reference selector is an input widget that can be used to display and edit associations. For more information on this widget, see [Reference Selector](/refguide/reference-selector/). This widget supports the same style properties and structure as the [drop-down](#drop-down) widget above.\n\nThe default class to style all reference selector inputs is named `ReferenceSelector`.\n\n## 7 Images, Videos & Files\n\nImages, videos & files help your user app manage images and other files. For more information on these widgets, see [Images, Videos & Files](/refguide/image-and-file-widgets/).\n\n### 4.2 Static Image {#image}\n\nThe static image widget can be used to show a predefined image on a page, layout, or snippet. For more information on this widgets, see [Static Image](/refguide/image/). The widget’s style properties are as follows:\n\n```xml\n<container>\n\t<image/>\n</container>\n```\n\n| Element             | Style Properties                    | Description                                                  |\n| ------------------- | ----------------------------------- | ------------------------------------------------------------ |\n| `container`         | This has all ViewStyle properties.  |                                                              |\n| `container`         | `rippleColor`                       | This is the color of the ripple on Android, and will be applied only when the container has an on click action set, otherwise it will be ignored (defaults to `rgba(0, 0, 0, 0.2)`). |\n| `container`         | `underlayColor`                     | This is the color while pressing the container on iOS, and will be applied only when the container has an on click action set, otherwise it will be ignored and defaulted to opacity only. |\n| `containerDisabled` | Same properties as `container`      | Overrides `container` styles if the image has an on click action and the action cannot be executed or is disabled during action. |\n| `image`             | This has all ImageStyle properties. |                                                              |\n| `imageDisabled`     | Same properties as `image`          | Overrides `image` styles if the image has an on click action and the action cannot be executed or is disabled during action. |\n\nThe default class to style all static image styles is named `Image`. Please note that images loaded from the model are styled with `NativeDynamicImage` as described in the [Dynamic Image](#dynamic-image) section below.\n\n### 7.1 Dynamic Image {#dynamic-image}\n\nA dynamic image can be used to display an image. This widget supports the same style properties and structure as the [Static Image](#image) widget above.\n\nThe default class to style all dynamic images is named  `NativeDynamicImage`.\n\n## 8 Buttons\n\nButtons help your user perform actions. For more information about these widgets, see [Buttons](/refguide/button-widgets/).\n\n### 8.1 Action Button\n\nAn action button can perform various actions such as calling a nanoflow, opening a page. \n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/action-button.png\" alt=\"action button\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<icon/><caption>primary</caption>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |    |\n| `container` | `rippleColor` | This is the color of the ripple on Android (defaults to `rgba(0, 0, 0, 0.2)`). |\n| `container`  | `underlayColor` | This is the color while pressing the button on iOS, if not set it will be defaulted to opacity only. |\n| `containerDisabled` | Same properties as `container` | Overrides `container` styles if the button has on click action set and it cannot be executed or is set with `Disable during action`. |\n| `caption` | This has all TextStyle properties. |   |\n| `captionDisabled` | Same properties as `caption` | Overrides `caption` styles if the button has on click action set and it cannot be executed or is set with `Disable during action`. |\n| `icon` | This has all ViewStyle properties. |   |\n| `icon` | `size` | This is the size of the button icon (defaults to `12`). |\n| `icon` | `color` | This is the color of the button icon. |\n| `iconDisabled` | Same properties as `icon` | Overrides `icon` styles if the button has on click action set and it cannot be executed or is set with `Disable during action`. |\n\nThe default class to style all actions buttons is named `ActionButton`. However, an action button in a header has the default class `ActionButtonHeader`.\n\n## 9 Pages {#pages}\n\nTo style pages, you can add classes to a page or its layout. The status bar and header are part of a page and can also be styled this way.\n\n```xml\n<page>\n\t<statusBar/>\n\t<header/>\n\t<container>\n\t\tapplication content\n\t</container>\n</page>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `statusBar` | `barStyle` | The style of the status bar, which can be either `dark-content` (black text) or `light-content` (white text). |\n| `statusBar` | `backgroundColor` | The background color of the status bar (Android only). |\n| `header` | `container` | This has all ViewStyle properties. |\n| `header` | `title` | This has all TextStyle properties. |\n| `header` | `backButtonText` | This has all TextStyle properties. |\n| `header` | `backButtonIcon` | This has all ImageStyle properties. |\n| `container` | This has all ViewStyle properties. |    |\n\nThe default classes for layouts and pages are `Layout` and `Page`.\n\n## 10 Navigation {#navigation-widget}\n\nThe navigation consists of the bottom bar (which allows users to navigate within your app) and the progress overlay (which can be used to show a loading indicator while waiting for something to load). This is how navigation could look like in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/nav-widget.png\" alt=\"navigation widget\"   width=\"300\"  >}}\n\nThe navigation style properties are as follows:\n\n```xml\n<app>\n\t<page/>\n\t<bottomBar/>\n<app>\n<progressOverlay>\n\t<background>\n\t\t<container>\n\t\t\t<activityIndicator/>\n\t\t\t<text/>\n\t\t</container>\n\t</background>\n</progressOverlay>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `bottomBar` | `container` | This has all ViewStyle properties. |\n| `bottomBar` | `label` | This has all TextStyle properties. |\n| `bottomBar` | `selectedLabel` | This has all TextStyle properties. |\n| `bottomBar` | `icon` | This has all ViewStyle properties. |\n| `bottomBar` | `selectedIcon` | This has all ViewStyle properties. |\n| `progressOverlay` | `background` | This has all ViewStyle properties. |\n| `progressOverlay` | `container` | This has all ViewStyle properties. |\n| `progressOverlay` | `activityIndicator` | This is the same as the [activity indicator](#activity-indicator) widget. |\n| `progressOverlay` | `text` | This has all TextStyle properties. |\n\nThe default class to style the navigation is named  `navigationStyle`. There is no support for custom class styling on navigation.\n\n## 11 Add-Ons\n\nAdd-on widgets are distributed through the [Native Mobile Resources](/appstore/modules/native-mobile-resources/) module, and are not shipped with Mendix Studio Pro. Other add-ons might also be distributed through app templates, as well as modules importing pages from other apps. \n\n### 11.1 Activity Indicator {#activity-indicator}\n\nThe activity indicator widget displays a circular loading indicator. This is how an activity indicator widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/activity-indicator.png\" alt=\"activity indicator\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```javascript\n<container>\n\t<indicator/>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `indicator` | `color` | This is the color of the indicator (defaults to `gray`). |\n| `indicator` | `size` | Possible values for indicator are `large` and `small` (defaults to `large`). |\n\nThe default class to style all activity indicators is named `com_mendix_widget_native_activityindicator_ActivityIndicator`.\n\n### 11.2 App Events\n\nThe app events widget allows you to set actions when your app’s network status is changed, and can let you set limits on action calls. This widget has no user interface so does not support any styling.\n\n### 11.3 Background Image\n\nThe background image widget enables layering one or more widgets on top of an image.\n\nThe widget’s style properties are as follows:\n\n```javascript\n<container>\n\t<image />\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `image` | This has all ImageStyle properties. |  |\n| `image` | `svgColor` | Property to set the color of an SVG image (defaults to `black`). |\n\nThe default class to style all background images is named `com_mendix_widget_native_backgroundimage_BackgroundImage`.\n\n### 11.4 Badge\n\nThe badge widget displays text or values as a badge. This is how a badge widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/badge.png\" alt=\"badge\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows: \n\n```xml\n<container>\n\t<text>New</text>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |      |\n| `text` | This has all TextStyle properties. |      |\n\nThe default class to style all badges is named `com_mendix_widget_native_badge_Badge`.\n\n### 11.5 Barcode Scanner\n\nThe barcode scanner widget allows your app to scan barcodes and QR codes. This widget renders a camera view in a styleable container.\n\nThe widget's style properties are as follows:\n\n```javascript\n<container>\n        <mask />\n<container />\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `mask` | This only allows the properties below. |  |\n| `mask` | `color` | Property to set the color of the mask border indicators (defaults to `#62B1F6`). |\n| `mask` | `width` | Property to set the width of the barcode reader. |\n| `mask` | `height` | Property to set the height of the barcode reader. |\n| `mask` | `backgroundColor` | Property to set the background color of the mask (defaults to `rgba(0, 0, 0, 0.6)`). |\n\nThe default class to style all barcode scanner widgets is named `com_mendix_widget_native_barcodescanner_BarcodeScanner`.\n\n### 11.6 Feedback\n\nThe feedback widget allows users to give direct feedback. This is how a feedback widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/feedback-two.png\" alt=\"feedback\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `floatingButton` | This has all ViewStyle properties. |    |\n| `dialog` | This has all ViewStyle properties. |  |\n| `title` | This has all TextStyle properties. |  |\n| `textAreaInput` | This has all TextStyle properties. |  |\n| `textAreaInput` | `placeholderTextColor` | This is the text color of the placeholder string. |\n| `textAreaInput` | `selectionColor` | This is the highlight and cursor color of the text input. |\n| `textAreaInput` | `underlineColorAndroid` | This is the underline color for Android devices. |\n| `textAreaInput` | `numberOfLines` | This is the height of the text area is based on this number of text lines. |\n| `switchLabel` | This has all TextStyle properties. |   |\n| `switchInput` | This has all TextStyle properties. |  |\n| `switchInput` | `trackColorOn` | This is the custom color for the switch track when turned on. |\n| `switchInput` | `trackColorOff` | This is the custom color for the switch track when turned off. |\n| `switchInput` | `thumbColorOn` | This is the color of the foreground switch grip when turned on. If this is set on iOS, the switch grip will lose its drop shadow. |\n| `switchInput` | `thumbColorOff` | This is the color of the foreground switch grip when turned off. If this is set on iOS, the switch grip will lose its drop shadow. |\n| `button` | `borderColor` | This is the color of dialog button borders. |\n| `button` | `borderWidth` | This is the width of dialog button borders. |\n| `button` | `color` | This is the color of dialog button text. |\n| `buttonDisabled` | `color` | This is the color of dialog button text when disabled. |\n| `activityIndicator` | `color` | This is the color of the activity indicator that is shown while feedback is being submitted. |\n\nThe default class to style all feedback widgets is named `com_mendix_widget_native_feedback_Feedback`. \n\n### 11.7 Floating Action Button\n\nThe floating action button widget lets you customize the appearance and functionality of floating action buttons. The widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | ---| --- |\n| `container` | This has all ViewStyle properties. |  |\n| `button` | This has all ViewStyle properties.  |  |\n| `button` | `size` | This is the radius of the button. |\n| `button` | `rippleColor` | This is the color of the ripple on Android. |\n| `buttonIcon` | This has all ImageStyle properties. |  |\n| `secondaryButton` | This has all ViewStyle properties.  |  |\n| `secondaryButton` | `size` | This is the radius of the secondary buttons. |\n| `secondaryButtonIcon` | This has all ImageStyle properties. |  |\n| `secondaryButtonCaption` | This has all TextStyle properties.  |  |\n| `secondaryButtonCaptionContainer` | This has all ViewStyle properties. |  |\n\nThe default class to style all floating actions buttons is named `com_mendix_widget_native_floatingactionbutton_FloatingActionButton`.\n\n### 11.8 Maps\n\nThe maps widget supports various digital map providers. This is how a maps widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/maps.png\" alt=\"maps\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `loadingOverlay` | This has all ViewStyle properties. |  |\n| `loadingIndicator` | `color` | This is the color of the loading indicator. |\n| `marker` | `color` | This is the color of the location marker. |\n| `marker` | `opacity` | This is the opacity of the location marker. |\n\nThe default class to style all map widgets is named `com_mendix_widget_native_maps_Maps`.\n\n### 11.9 Notifications\n\nThe notifications widget lets you display a custom message in your app. This widget has no user interface so does not support any styling.\n\n### 11.10 Progress Bar\n\nThe progress bar widget shows percentage of progress. This is how a progress bar widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/progress-bar.png\" alt=\"progress bar\"   width=\"300\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<bar><fill/></bar>\n\t<validationMessage/>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `bar` | This has all ViewStyle properties. |  |\n| `fill` | `backgroundColor` | This is the background color of the filled progress bar portion. |\n| `validationMessage` | This has all TextStyle properties. |  |\n\nThe default class to style all progress bars is named `com_mendix_widget_native_progressbar_ProgressBar`.\n\n### 11.11 Progress Circle\n\nThe progress circle widget displays progress in a circle using positive or negative values. This is how a progress circle widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/progress-circle.png\" alt=\"progress circle\"   width=\"300\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<circle><fill/></circle>\n\t<validationMessage/>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `circle` | `size` | This is the radius of the progress circle. |\n| `circle` | `borderWidth` | This is the border width of the progress circle. |\n| `circle` | `borderColor` | This is the color of the progress circle border. |\n| `fill` | `backgroundColor` | This is the color of the circle’s filled portion. |\n| `fill` | `width` | This is the width of the progress circle. |\n| `fill` | `lineCapRounded` | This determines if the rotating line’s front tip is rounded off or not. |\n| `text` | This has all TextStyle properties. |  |\n| `validationMessage` | This has all TextStyle properties. |  |\n\nThe default class to style all progress circles is named `com_mendix_widget_native_progresscircle_ProgressCircle`.\n\n### 11.12 QR Code\n\nThe QR code widget generates a QR code based on a value, which a user can then scan. This is how a QR code widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/qr-code.png\" alt=\"qr code\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<qrcode/>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |   |\n| `qrcode` | `size` | The size of the QR code. |\n| `qrcode` | `color`| The color of the QR code. |\n| `qrcode` | `backgroundColor` | The background color behind the QR code. |\n\nThe default class to style all QR codes is named `com_mendix_widget_native_qrcode_QRCode`.\n\n### 11.13 Range Slider {#range-slider}\n\nThe range slider widget allows you to change a range of values using a slider with maximum and minimum bound values. This is how a range slider widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/range-slider.png\" alt=\"range slider\"   width=\"300\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<track><highlight/><marker/></track>\n\t<validationMessage/>\n</container>\n\n<container>\n\t<trackDisabled><highlightDisabled/><markerDisabled/></trackDisabled>\n\t<validationMessage/>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| ---| --- | --- |\n| `container` | This has all ViewStyle properties. |    |\n| `track` | This has all ViewStyle properties. |    |\n| `trackDisabled` | This has all ViewStyle properties. |    |\n| `highlight` | This has all ViewStyle properties. |    |\n| `highlightDisabled` | This has all ViewStyle properties. |    |\n| `marker` | This has all ViewStyle properties. |    |\n| `markerActive` | This has all ViewStyle properties. |    |\n| `markerDisabled` | This has all ViewStyle properties. |    |\n| `validationMessage` | This has all TextStyle properties. |    |\n\nThe default class to style all range slider inputs is named `com_mendix_widget_native_rangeslider_RangeSlider`.\n\n### 11.14 Safe Area View\n\nThe safe area view widget prevents content from being rendered in unwanted areas, such as behind rounded screen corners or notches. This widget is only supported on iOS apps. Note that `container` styling will only be applied to the safe area.\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>content</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |        |\n\nThe default class to style all safe area views is named `com_mendix_widget_native_safeareaview_SafeAreaView`.\n\n### 11.15 Slider\n\nThe slider widget simply allows you to change a number value using a slider. This is how a slider widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/slider.png\" alt=\"slider\"   width=\"300\"  >}}\n\nThis widget supports the same style properties as the [range slider] (#range-slider) widget above.\n\nThe default class to style all slider inputs is named `com_mendix_widget_native_slider_Slider`.\n\n### 11.16 Ratings\n\nThe ratings widget allows users to rate an object from 0 to 5. This is how a ratings widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/ratings.png\" alt=\"ratings\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<icon/><icon/><icon/><icon/><icon/>\n</container>\n\n<containerDisabled>\n\t<icon/><icon/><icon/><icon/><icon/>\n</containerDisabled>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |  |\n| `containerDisabled` | This has all ViewStyle properties. |  |\n| `icon` | This has all ViewStyle properties. |  |\n| `icon` | `size` | The size of the icon. |\n| `icon` | `color` | The color of the icon. |\n| `icon` | `selectedColor` | The color of the icon when selected. |\n\nThe default class to style all rating inputs is named `com_mendix_widget_native_rating_Rating`.\n\n### 11.17 Toggle Buttons\n\nThe toggle buttons widget allows you to set an enumeration attribute. This is how a toggle buttons widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/toggle-buttons.png\" alt=\"toggle buttons\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<button><text>Standard</text></button>\n\t<activeButton><activeButtonText>Sattelite</activeButtonText></activeButton>\n\t<button><text>Hybrid</text></button>\n\t<validationMessage/>\n</container>\n\n<containerDisabled>\n\t<button><text>Standard</text></button>\n\t<activeButton><activeButtonText>Sattelite</activeButtonText></activeButton>\n\t<button><text>Hybrid</text></button>\n\t<validationMessage/>\n</containerDisabled>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |       |\n| `containerDisabled` | This has all ViewStyle properties. |       |\n| `button` | This has all ViewStyle properties. |       |\n| `text` | This has all TextStyle properties. |       |\n| `activeButton` | This has all ViewStyle properties. |       |\n| `activeButtonText` | This has all TextStyle properties. |       |\n| `validationMessage` | This has all TextStyle properties. |       |\n\nThe default class to style all toggle buttons is named `com_mendix_widget_native_togglebuttons_ToggleButtons`.\n\n### 11.18 Video Player\n\nThe video player widget allows you to play video based on a URL, and is limited to MP4 only. This is how a video player widget could look in an app:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/video-player.png\" alt=\"video player\"   width=\"300\"  >}}\n\nThe widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |        |\n| `indicator` | `color` | The loading indicator color. |\n| `video` | This has all ViewStyle properties. |      |\n| `errorMessage` | This has all TextStyle properties. |      |\n\nThe default class to style all video players is named `com_mendix_widget_native_videoplayer_VideoPlayer`.\n\n### 11.19 Web View\n\nThe web view widget allows you to embed static or dynamic websites in your app. The widget’s style properties are as follows:\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |      |\n| `errorContainer` | This has all ViewStyle properties. |      |\n| `errorText` | This has all TextStyle properties. |     |\n\nThe default class to style all web views is named `com_mendix_widget_native_webview_WebView`. \n\n### 11.20 Animation\n\nThe animation widget allows you to animate a container. You can make the content wiggle, move, change size, and more.\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t{content}\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. |      |\n\nThe default class to style all animation widgets is named `com_mendix_widget_native_animation_Animation`.\n\n### 11.21 Introduction Screen\n\nThis introduction screen widget displays paginated contents you can swipe through, and offers buttons on each page to proceed or go back:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/intro-screen.gif\" alt=\"intro screen\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<fullscreenContainer>\n\tcontent\n\t<paginationContainer>\n\t\t<dotStyle/><activeDotStyle/><dotStyle/>\n\t</paginationContainer>\n\t<paginationAbove.buttonsContainer>\n\t\t<buttonSkip.container>\n\t\t\t<icon/><caption>Skip</caption>\n\t\t</buttonSkip.container>\n\t\t<buttonPrevious.container>\n\t\t\t<icon/><caption>Back</caption>\n\t\t</buttonPrevious.container>\n\t\t<buttonNext.container>\n\t\t\t<icon/><caption>Next</caption>\n\t\t</buttonNext.container>\n\t\t<buttonDone.container>\n\t\t\t<icon/><caption>Done</caption>\n\t\t</buttonDone.container>\n\t</paginationAbove.buttonsContainer>\n</fullscreenContainer>\n\n<popupContainer>\n\tcontent\n\t<paginationBetween>\n\t\t<buttonSkip.container>\n\t\t\t<icon/><caption>Skip</caption>\n\t\t</buttonSkip.container>\n\t\t<buttonPrevious.container>\n\t\t\t<icon/><caption>Back</caption>\n\t\t</buttonPrevious.container>\n\t\t<paginationContainer>\n\t\t\t<paginationText>4 / 5</paginationText>\n\t\t</paginationContainer>\n\t\t<buttonNext.container>\n\t\t\t<icon/><caption>Next</caption>\n\t\t</buttonNext.container>\n\t\t<buttonDone.container>\n\t\t\t<icon/><caption>Done</caption>\n\t\t</buttonDone.container>\n\t</paginationBetween>\n</popupContainer>\n```\n\n| Element | Style Properties | Description |\n| --- | --- | --- |\n| `fullscreenContainer` | This has all ViewStyle properties. | |\n| `popupContainer` | This has all ViewStyle properties. | |\n| `paginationContainer` | This has all ViewStyle properties. | |\n| `paginationText` | This has all TextStyle properties. | |\n| `dotStyle` | This has all ViewStyle properties. | |\n| `activeDotStyle` | This has all ViewStyle properties. | |\n| `buttonsContainer` | This has all ViewStyle properties. | |\n| `container` | This has all ViewStyle properties. | Meant for buttonSkip, buttonDone, buttonPrevious, and buttonNext. |\n| `caption` | This has all ViewStyle properties. | |\n| `icon` | `size` | The size of the icon. |\n| `icon` | `color` | The color of the icon. |\n\nThe default class to style all into screen widgets is named `com_mendix_widget_native_animation_Animation`.\n\n### 11.22 List View Swipe\n\nThe list view swipe widget can make a list view interactive by adding swipe gestures and extra buttons in the background behind a list item:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/list-view-swipe-buttons.gif\" alt=\"list view swipe\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container>\n\t<leftAction>\n\t\t{Left background}\n\t</leftAction>\n\t{Foreground}\n\t<rightAction>\n\t\t{Right background}\n\t</rightAction>\n</container>\n```\n\n| Element | Style Properties | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. | |\n| `leftAction` | This has all ViewStyle properties. | |\n| `leftAction` |`panelSize` | The number of pixels and the combined size of the background buttons. |\n| `leftAction` |`threshold` | The number of pixels to accept the swipe action. |\n| `rightAction` | This has all ViewStyle properties. | |\n| `rightAction` |`panelSize` | The number of pixels and the combined size of the background buttons. |\n| `rightAction` |`threshold` | The number of pixels to accept the swipe action. |\n\nThe default class to style all animation widgets is named `com_mendix_widget_native_listviewswipe_ListViewSwipe`.\n\n### 11.23 Bottom Sheet\n\nThe bottom sheet widget creates a set of options while blocking interaction with the rest of the screen or a draggable surface anchored to the bottom of the screen. There are two customizable variations:\n\n* Modal bottom sheet:\n\n\t{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/modal-bottom-sheet.gif\" alt=\"modal bottom sheet\"   width=\"350\"  >}}\n\n* Expanding bottom sheet:\n\n\t{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/expanding-bottom-sheet.gif\" alt=\"expanding bottom sheet\"   width=\"350\"  >}}\n\nThe widget’s style properties are as follows:\n\n```xml\n<container />\n<containerWhenExpandedFullscreen />\n<modal />\n<modalItems>\n\t<defaultStyle />\n\t<primaryStyle />\n\t<dangerStyle />\n\t<customStyle />\n</modalItems>\n```\n\n| Element | Style Properties | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties. | |\n| `containerWhenExpandedFullscreen` | This has all ViewStyle properties. | Only available if `Expading` and `Enable full screen` are enabled. |\n| `modal` | This has all ViewStyle properties. | |\n| `defaultStyle` | This has all TextStyle properties. | Available when `Default` is selected as style for basic items. |\n| `primaryStyle` | This has all TextStyle properties. | Available when `Primary` is selected as style for basic items. |\n| `dangerStyle` | This has all TextStyle properties. | Available when `Danger` is selected as style for basic items. |\n| `customStyle` | This has all TextStyle properties. | Available when `Custom` is selected as style for basic items. |\n\nThe default class to style all bottom sheet widgets is named `com_mendix_widget_native_bottomsheet_BottomSheet`.\n\n### 11.24 Popup Menu\n\nThe popup menu widget allows you to show a context menu exactly where the user taps.\n\nThe widget’s style properties are as follows:\n\n```xml\n<container/>\n<buttonContainer/>\n<custom>\n\t<containerStyle/>\n\t<itemStyle>\n\t\t</rippleColor>\n\t</itemStyle>\n</custom>\n<basic>\n    <containerStyle/>\n    <dividerColor/>\n    <itemStyle>\n        <ellipsizeMode/>\n\t</rippleColor>\n        <defaultStyle/>\n        <primaryStyle/>\n        <dangerStyle/>\n        <customStyle/>\n    </itemStyle>\n<basic/>\n```\n\nA main object has four objects.\n\n| Element                    | Style Properties | Description                                                                                                      |\n| ----------------------------| --- | ---------------------------------------------------------------------------------------------------------------- |\n| basic      | BasicItemStyle |Styles basic items.                                                                                                   |\n| custom      | CustomItemStyle |Styles custom items.                                                                                                   |\n| buttonContainer | This has all ViewStyle properties. | Styles the wrapper view of triggerer since there could be multiple elements, and it has to be wrapped in a view. |\n| container       | This has all ViewStyle properties. | Styles the wrapper view around the whole menu.     |\n\n#### BasicItemStyle\n\n| Element                   | Style Properties |  Description                                      |\n| ---------------------------| ---- | ------------------------------------------------ |\n| containerStyle | This has all ViewStyle properties. | Styles the wrapper container around a basic item. |\n| itemStyle | ItemStyle      | Styles the basic items.                         |\n| dividerColor | `string`      | Styles the divider color.                         |\n\n#### ItemStyle\n\n| Element                | Style Properties                     | Description                                                                                      |\n| ----------------------------------------| ----- | ------------------------------------------------------------------------------------------------ |\n| ellipsizeMode | `head`, `middle`, `tail`, or `clip` | Styles how the text will be clipped if its too long. |\n| rippleColor | `string`      | Styles the color of touch feedback when item is tapped. Works for both iOS and Android platforms. |\n| defaultStyle |  This has all TextStyle properties.                | Styles all basic menu items which have the `default` style selected.                                 |\n| primaryStyle |  This has all TextStyle properties.                | Styles all basic menu items which have the `primary` style selected.                                 |\n| dangerStyle |  This has all TextStyle properties.                 | Styles all basic menu items which have the `danger` style selected.                                  |\n| customStyle |  This has all TextStyle properties.                 | Styles all basic menu items which have the `custom` style selected.                                  |\n\n\n#### CustomItemStyle\n\n| Element                   | Style Properties |  Description                                      |\n| ---------------------------| ---- | ------------------------------------------------ |\n| containerStyle | This has all ViewStyle properties. | Styles the wrapper container around a custom item. |\n| itemStyle | `rippleColor: string`      | Styles the color of touch feedback when item is tapped. Works for both iOS and Android platforms. |\n| dividerColor | `string`      | Styles the divider color.                         |\n\nThe default class to style all popup menus is named `com_mendix_widget_native_popupmenu_PopupMenu`.\n\n### 11.25 Carousel\n\nThe carousel widget allows you to show swipeable items in a carousel.\n\nThe widget’s style properties are as follows:\n\n```xml\n</container>\n<cardLayout>\n    </slideItem>\n    </inactiveSlideItem>\n    </indicator>\n    <pagination>\n        </container>\n        </dotStyle>\n        </inactiveDotStyle>\n        </dotContainerStyle>\n        </text>\n    </pagination>\n</cardLayout>\n<fullWidthLayout>\n    </slideItem>\n    </inactiveSlideItem>\n    </indicator>\n    <pagination>\n        </container>\n        </dotStyle>\n        </inactiveDotStyle>\n        </dotContainerStyle>\n        </text>\n    </pagination>\n</fullWidthLayout>\n```\n\nMain object has to have three objects called `container`, `cardLayout`, and `fullWidthLayout`. `cardLayout` and `fullWidthLayout` will be applied automatically depending on selected layout in widget properties.\n\n```\nexport myCarouselStyle = {\n    container: ViewStyle  //\n    cardLayout: ...LayoutStyle,\n    fullWidthLayout: ...LayoutStyle\n}\n```\n\n| Element                | Style Properties                               | Description                                                                                    |\n| -----------------------|-------------------------------- | ---------------------------------------------------------------------------------------------- |\n| container | This has all ViewStyle properties.                                   | Styles the view surrounding the carousel widget. For best results, make sure to give a fixed `height`.                             |\n| cardLayout | LayoutStyle | Styles the carousel when the layout is set to card  |\n| fullWidthLayout | LayoutStyle                             | Styles the carousel when the layout is set to full width.                 |\n\n#### LayoutStyle\n\n| Element                | Style Properties                               | Description                                                                                    |\n| -----------------------|-------------------------------- | ---------------------------------------------------------------------------------------------- |\n| slideItem | This has all ViewStyle properties.                                   | Styles the view surrounding each slide, including inactive slides.                             |\n| inactiveSlideItem | `opacity: number, scale: number` | `inactiveSlideOpacity` and `inactiveSlideScale`, will allow inactive slides smaller and faded. |\n| indicator | `color: string`                             | Styles the loading indicator which will be shown while the carousel is loading.                 |\n| pagination | Pagination                                 | Styles pagination container, dots, active dots, and text.                                        |\n\n#### Pagination\n\n| Element | Style Properties                                                                         | Description                                                                                                    |\n| ---------|------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------- |\n| container | This has all ViewStyle properties.                                                              | Styles the main view around pagination, regardless of text or dot.                                             |\n| dotStyle | All ViewStyle properties + `color: string`                                              | Styles all the pagination dots.                                                                                |\n| inactiveDotStyle|  All ViewStyle properties + `opacity: number; scale: number; color: string` | Additional styles for inactive dots. Will be merged with `dotStyle`.                                             |\n| dotContainerStyle | This has all ViewStyle properties.                                                      | Styles the view around individual pagination dots.                                                              |\n| text | This has all TextStyle properties.                                                                   | Will be applied when there are more than five elements in carousel, in which case pagination buttons become text like **1/5**. |\n\nThe default class to style all popup menus is named `com_mendix_widget_native_carousel_Carousel`.\n\n### 11.26 Signature {#signature}\n\nThe signature widget allows you to draw and save a signature. The signature widget looks like this: \n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/signature.png\" alt=\"signature\"   width=\"350\"  >}}\n\nThe widget’s style properties are structured as follows:\n\n```xml\n<container>\n    <signature/>\n    <buttonWrapper>\n        <Button>\n            <Caption>Clear</Caption>\n        </Button>\n        <Button>\n            <Caption>Save</Caption>\n        </Button>\n    </buttonWrapper>\n</container>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties.   |   |\n| `container` | `penColor` | This will change the color of the stroke. |\n| `buttonWrapper` | This has all ViewStyle properties. |\n| `buttonClearContainer` | This has all ViewStyle properties. |\n| `buttonClearContainer` | `rippleColor` | This will change the color of the ripple on Android.  |\n| `buttonClearContainer` | `activeOpacity` | This will change the opacity when touch is active on iOS.  |\n| `buttonClearContainer` | `underlayColor` | This will change the underlay color when touch is active on iOS.  |\n| `buttonClearCaption` | This has all TextStyle properties. |\n| `buttonSaveContainer` | This has all ViewStyle properties. |\n| `buttonSaveContainer` | `rippleColor` | This will change the color of the ripple on Android.  |\n| `buttonSaveContainer` | `activeOpacity` | This will change the opacity when touch is active on iOS.  |\n| `buttonSaveContainer` | `underlayColor` | This will change the underlay color when touch is active on iOS.  |\n| `buttonSaveCaption` | This has all TextStyle properties. |\n\nThe default class to style all text boxes is named `com_mendix_widget_native_signature_Signature`.\n\n### 11.27 Line Chart\n\nThe [line chart](https://github.com/mendix/widgets-resources/blob/master/packages/pluggableWidgets/line-chart-native) widget renders a scalable line graph based on static and dynamic data sets.\n\nThe widget consists of the following elements:\n\n```xml\n<container/>\n<errorMessage/>\n<chart/>\n<grid/>\n<xAxis>\n\t<label/>\n</xAxis>\n<yAxis>\n\t<label/>\n</yAxis>\n<legend>\n\t<container/>\n\t<item/>\n\t<indicator/>\n\t<label/>\n</legend>\n<lines>\n\t<customLineStyles>\n\t\t<any_custom_line_style_name>\n\t\t\t<line/>\n\t\t\t<markers/>\n\t\t</any_custom_line_style_name>\n\t</customLineStyles>\n</lines>\n<lineColorPalette/>\n```\n\n| Element | Style Properties | Description |\n| --- | --- | --- |\n| `container` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `errorMessage` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. | |\n| `chart` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `grid` | `backgroundColor` | Applies a color to the grid background (string). |\n| `grid` | `dashArray` | Applies a pattern of dashes and gaps to the grid lines (string containing a [dash pattern](https://www.w3.org/TR/SVG11/painting.html#StrokeDasharrayProperty)). |\n| `grid` | `lineColor` | Applies a color to the grid lines (string). |\n| `grid` | `lineWidth` | Applies a width to the grid lines (number). |\n| `grid` | `padding` | Applies padding to all sides of the grid (number). Use it to make axis value labels visible. |\n| `grid` | `paddingBottom` | Applies padding to the bottom side of the grid (number). Use it to make axis value labels visible. |\n| `grid` | `paddingHorizontal` | Applies padding to the horizontal sides of the grid (number). Use it to make axis value labels visible. |\n| `grid` | `paddingLeft` | Applies padding to the left side of the grid (number). Use it to make axis value labels visible. |\n| `grid` | `paddingRight` | Applies padding to the right side of the grid (number). Use it to make axis value labels visible. |\n| `grid` | `paddingTop` | Applies padding to the top side of the grid (number). Use it to make axis value labels visible. |\n| `grid` | `paddingVertical` | Applies padding to the vertical sides of the grid (number). Use it to make axis value labels visible. |\n| `xAxis` | `color` | Applies a color to the axis value labels (string). |\n| `xAxis` | `dashArray` | Applies a pattern of dashes and gaps to the axis line (string containing a [dash pattern](https://www.w3.org/TR/SVG11/painting.html#StrokeDasharrayProperty)). |\n| `xAxis` | `fontFamily` | Applies fonts to the axis value labels (string). |\n| `xAxis` | `fontSize` | Applies a size to the axis value labels (number). |\n| `xAxis` | `fontStyle` | Applies a font style to the axis value labels (\"normal\" or \"italic\"). |\n| `xAxis` | `fontWeight` | Applies a font weight to the axis value labels (\"normal\" or \"bold\" or \"100\" or \"200\" or \"300\" or \"400\" or \"500\" or \"600\" or \"700\" or \"800\" or \"900\"). |\n| `xAxis` | `lineColor` | Applies a color to the axis line (string). |\n| `xAxis` | `lineWidth` | Applies a width to the axis line (number). |\n| `xAxis` > `label` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. | |\n| `xAxis` > `label` | `relativePositionGrid` | Positions the axis label at the bottom or right side of the grid (\"bottom\" or \"right\"). |\n| `yAxis` | All `xAxis` element styles. | |\n| `yAxis` > `label` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. |\n| `yAxis` > `label` | `relativePositionGrid` | Positions the axis label at the top or left side of the grid (\"top\" or \"left\"). |\n| `legend` > `container` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `legend` > `item` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `legend` > `indicator` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `legend` > `label` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. | |\n| `lines` | `lineColorPalette` | Provides colors to lines that do not have a line color configured (string with list of colors separated by ';'). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `line` | `dashArray` | Applies a pattern of dashes and gaps to the graph line (string containing a [dash pattern](https://www.w3.org/TR/SVG11/painting.html#StrokeDasharrayProperty)). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `line` | `ending` | Applies a flat or rounded line end to the graph line (\"flat\" or \"round\"). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `line` | `lineColor` | Applies a color to the graph line (string). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `line` | `lineWidth` | Applies a width to the graph line (number). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `markers` | `backgroundColor` | Applies a background color to the markers of the graph line (string). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `markers` | `borderColor` | Applies a border color to the markers of the graph line (string). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `markers` | `borderWidth` | Applies a border width to the markers of the graph line (string). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `markers` | `display` | Influences whether markers are displayed. When displayed, it positions the markers of the graph line on top or underneath the line (\"false\" or \"underneath\" or \"onTop\"). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `markers` | `size` | Applies a size to the markers of the graph line (number). |\n| `lines` > `customLineStyles` > `any_custom_line_style_name` > `markers` | `symbol` | Applies a symbol to the markers of the graph line (\"circle\" or \"diamond\" or \"plus\" or \"minus\" or \"square\" or \"star\" or \"triangleDown\" or \"triangleUp\"). |\n\nThe default class to style all line chart widgets is named `com_mendix_widget_native_linechart_LineChart`.\n\n### 11.28 Bar Chart\n\nThe [Bar Chart](https://github.com/mendix/widgets-resources/tree/master/packages/pluggableWidgets/bar-chart-native) widget renders a horizontal bar graph based on static and dynamic data sets.\n\nThe widget consists of the following elements:\n\n```xml\n<container/>\n<errorMessage/>\n<chart/>\n<grid/>\n<xAxis>\n\t<label/>\n</xAxis>\n<yAxis>\n\t<label/>\n</yAxis>\n<legend>\n\t<container/>\n\t<item/>\n\t<indicator/>\n\t<label/>\n</legend>\n<domain>\n    <padding/>\n</domain>\n<bars>\n    <barsOffset/>\n    <barColorPalette/>\n\t<customBarStyles>\n\t\t<any_custom_bar_style_name>\n\t\t\t<bar/>\n\t\t\t<label/>\n\t\t</any_custom_bar_style_name>\n\t</customBarStyles>\n</bars>\n```\n\n| Element | Style Properties | Description |\n| --- | --- | --- |\n| `container` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `errorMessage` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. | |\n| `chart` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `grid` | `backgroundColor` | Applies a color to the grid background (string). |\n| `grid` | `dashArray` | Applies a pattern of dashes and gaps to the grid lines (string containing a [dash pattern](https://www.w3.org/TR/SVG11/painting.html#StrokeDasharrayProperty)). |\n| `grid` | `lineColor` | Applies a color to the grid lines (string). |\n| `grid` | `width` | Applies a width to the grid lines (number). |\n| `grid` | `padding` | Applies padding to all sides of the grid (number). This makes axis value labels visible. |\n| `grid` | `paddingBottom` | Applies padding to the bottom side of the grid (number). This makes axis value labels visible. |\n| `grid` | `paddingHorizontal` | Applies padding to the horizontal sides of the grid (number). This makes axis value labels visible. |\n| `grid` | `paddingLeft` | Applies padding to the left side of the grid (number). This makes axis value labels visible. |\n| `grid` | `paddingRight` | Applies padding to the right side of the grid (number). This makes axis value labels visible. |\n| `grid` | `paddingTop` | Applies padding to the top side of the grid (number). This makes axis value labels visible. |\n| `grid` | `paddingVertical` | Applies padding to the vertical sides of the grid (number). This makes axis value labels visible. |\n| `xAxis` | `color` | Applies a color to the axis value labels (string). |\n| `xAxis` | `dashArray` | Applies a pattern of dashes and gaps to the axis line (string containing a [dash pattern](https://www.w3.org/TR/SVG11/painting.html#StrokeDasharrayProperty)). |\n| `xAxis` | `fontFamily` | Applies a font type to the axis value labels (string). |\n| `xAxis` | `fontSize` | Applies a size to the axis value labels (number). |\n| `xAxis` | `fontStyle` | Applies a font style to the axis value labels (\"normal\" or \"italic\"). |\n| `xAxis` | `fontWeight` | Applies a font weight to the axis value labels (\"normal\" or \"bold\" or \"100\" or \"200\" or \"300\" or \"400\" or \"500\" or \"600\" or \"700\" or \"800\" or \"900\"). |\n| `xAxis` | `lineColor` | Applies a color to the axis line (string). |\n| `xAxis` | `lineWidth` | Applies a width to the axis line (number). |\n| `xAxis` > `label` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. | |\n| `xAxis` > `label` | `relativePositionGrid` | Positions the axis label at the **bottom** or **right** side of the grid. |\n| `yAxis` | All `xAxis` element styles. | |\n| `yAxis` > `label` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. |\n| `yAxis` > `label` | `relativePositionGrid` | Positions the axis label at the **top** or **left** side of the grid. |\n| `legend` > `container` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `legend` > `item` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `legend` > `indicator` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `legend` > `label` | All [TextStyle](https://reactnative.dev/docs/text-style-props) properties. | |\n| `domain` > `padding` | `x` | Applies a number of pixels of padding to add the beginning and end of the X axis domain (number). |\n| `domain` > `padding` | `y` | Applies a number of pixels of padding to add the beginning and end of the Y axis domain (number). |\n| `bars` | `barColorPalette` | Provides colors to bars that do not have a bar color configured (string with list of colors separated by ';'). |\n| `bars` | `barsOffset` | Determines the number of pixels each bar in a group should be offset from its original position on the Y axis (number). This is only applicable when presentation mode is **Grouped**. |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `bar` | `ending` | Specifies a radius to apply to each bar. |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `bar` | `color` | Applies a color to the bar (string). If bars are configured to have labels, the labels will be the same color as the bar. |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `bar` | `width` | Applies a width to the bar (number). |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `label` | `fontFamily` | Applies a font type to the bar label (string). |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `label` | `fontSize` | Applies a size to the bar label (number). |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `label` | `fontStyle` | Applies a font style to the bar label (**normal** or **italic**). |\n| `bars` > `customBarStyles` > `any_custom_bar_style_name` > `label` | `fontWeight` | Applies a font weight to the bar label (\"normal\" or \"bold\" or \"100\" or \"200\" or \"300\" or \"400\" or \"500\" or \"600\" or \"700\" or \"800\" or \"900\"). |\n\nThe default class to style all bar chart widgets is named `com_mendix_widget_native_barchart_BarChart`.\n\n### 11.29 Pie/Doughnut Chart\n\nThe [Pie/Doughnut Chart](https://github.com/mendix/widgets-resources/blob/master/packages/pluggableWidgets/pie-doughnut-chart-native) widget renders a dataset as a pie or doughnut chart (depending on its configuration) based on static data sets.\n\nThe widget consists of the following elements:\n\n```xml\n<container/>\n<slices>\n    <customStyles>\n        <any_custom_key>\n            <slice/>\n            <label/>\n        </any_custom_key>\n    </customStyles>\n    <colorPalette/>\n    <innerRadius/>\n    <padding/>\n    <paddingBottom/>\n    <paddingHorizontal/>\n    <paddingLeft/>\n    <paddingRight/>\n    <paddingTop/>\n    <paddingVertical/>\n</slices>\n```\n\n| Element | Style Properties | Description |\n| --- | --- | --- |\n| `container` | All [ViewStyle](https://reactnative.dev/docs/view-style-props) properties. | |\n| `slices` > `customStyles` > `any_custom_key` > `slice` | `color` | Applies a color to the slice (string). If labels are configured to be shown, each label will be the same color as its corresponding slice. |\n| `slices` > `customStyles` > `any_custom_key` > `label` | `fontFamily` | Applies a font type to the slice label (string). |\n| `slices` > `customStyles` > `any_custom_key` > `label` | `fontSize` | Applies a size to the slice label (number). |\n| `slices` > `customStyles` > `any_custom_key` > `label` | `fontStyle` | Applies a font style to the slice label (**normal** or **italic**). |\n| `slices` > `customStyles` > `any_custom_key` > `label` | `fontWeight` | Applies a font weight to the slice label (\"normal\" or \"bold\" or \"100\"-\"900\" ascending by increments of 100). |\n| `slices` | `colorPalette` | Provides colors to slices that do not have a slice color configured (string with list of colors separated by a ';'). |\n| `slices` | `innerRadius` | Applies an inner radius to the chart when in doughnut presentation mode (number). |\n| `slices` | `padding` | Applies padding to all sides of the chart (number). |\n| `slices` | `paddingBottom` | Applies padding to the bottom side of the chart (number). |\n| `slices` | `paddingHorizontal` | Applies padding to the horizontal sides of the chart (number). |\n| `slices` | `paddingLeft` | Applies padding to the left side of the chart (number). |\n| `slices` | `paddingRight` | Applies padding to the right side of the chart (number). |\n| `slices` | `paddingTop` | Applies padding to the top side of the chart (number). |\n| `slices` | `paddingVertical` | Applies padding to the vertical sides of the chart (number). |\n\nThe default class to style all Pie/Doughnut Chart widgets is named `com_mendix_widget_native_piedoughnutchart_PieDoughnutChart`.\n\n### 11.30 Switch\n\nA switch input widget can be used to display and edit Boolean attributes and is rendered as a switch. This is how a switch widget looks by default:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-styling-refguide/check-box.png\" alt=\"check box\"   width=\"350\"  >}}\n\nThe widget’s style properties structure is as follows:\n\n```xml\n<container/>\n<containerDisabled/>\n<label>\n    <numberOfLines/>\n</label>\n<labelDisabled/>\n<input>\n    <thumbColorOn/>,\n    <trackColorOn/>\n    <trackColorOff/>\n    <thumbColorOff/>\n</input>\n<inputDisabled>\n    <thumbColorOn/>,\n    <trackColorOn/>\n    <trackColorOff/>\n    <thumbColorOff/>\n</inputDisabled>\n<inputError>\n    <thumbColorOn/>,\n    <trackColorOn/>\n    <trackColorOff/>\n    <thumbColorOff/>\n</inputError>\n<validationMessage/>\n```\n\n| Element | Style Properties    | Description |\n| --- | --- | --- |\n| `container` | This has all ViewStyle properties.   |   |\n| `containerDisabled` | Same properties as `container` | Overrides `container` styles if the text box is non-editable. |\n| `input` | This has all TextStyle properties.   |   |\n| `input` | `trackColorOn` | Custom color for the switch track when turned on. |\n| `input` | `trackColorOff` | Custom color for the switch track when turned off. |\n| `input` | `thumbColorOn` | Color of the foreground switch grip when turned on. If this is set on iOS, the switch grip will lose its drop shadow. |\n| `input` | `thumbColorOff` | Color of the foreground switch grip when turned off. If this is set on iOS, the switch grip will lose its drop shadow. |\n| `inputError` | This has the same properties as `input` | Overrides `input` styles if there are validation errors. |\n| `inputDisabled` | This has the same properties as `input` | Overrides `input` styles if the check box is non-editable. |\n| `label` | This has all TextStyle properties   |  |\n| `label` | `numberOfLines` | The maximum number of lines to wrap the label text. If the text is any longer it will be cut off with an ellipsis. Defaults to `1`. |\n| `labelDisabled` | Same properties as `label` | Overrides `label` styles if the check box is non-editable. |\n| `validationMessage` | This has all TextStyle properties.   |  |\n\nThe default class to style all check box inputs is named `com_mendix_widget_native_switch_Switch`.\n\n## 12 Read More\n\n* [How to Style Your Mendix Native Mobile App](/howto/mobile/how-to-use-native-styling/)\n* [How to Implement Native Mobile Styling](/howto/mobile/native-styling/)\n* [Design Properties Documentation](/apidocs-mxsdk/apidocs/design-properties/)\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/native-mobile/native-svg.md",
    "header": {
      "title": "Working with Vector Graphics",
      "url": "/refguide/native-svg/",
      "parent": "native-mobile",
      "weight": "80",
      "description": "Learn how to integrate SVGs into your native mobile apps.",
      "tags": [
        "native",
        "svg",
        "images",
        "mobile",
        "vector",
        "vector graphics"
      ]
    },
    "body": "\n## 1 Introduction\n\nWhen building a native mobile application, you may want to use vector images for icons or other illustrations. For this purpose, you can use Scalable Vector Graphics (SVGs). This reference guide will provide guidance for working with SVGs in native mobile apps.\n\n## 2 Optimizing SVGs {#optimizing}\n\nWhen exporting an SVG from an editor, you will often produce an SVG with several unnecessary elements. These elements increase file size, decrease performance, and can cause unwanted side effects. Therefore it is recommended that you run your SVG through an SVG-optimization tool. \n\nTo optimize your SVGs, you can either run them through an online tool such as [SVGOMG](https://jakearchibald.github.io/svgomg/) or use a local tool such as [SVGO](https://github.com/svg/svgo).\n\n## 3 Unsupported Elements\n\nSVGs can contain several kinds of elements. However, not all of them are supported in native mobile apps. Unsupported elements will have no effect and should be removed. The following SVG elements are *not* supported for native mobile apps:\n\n* Complex gradients\n* Animations \n* Video\n* JavaScript code \n* CDATA elements\n* `<style />` tags and `style` attributes (please use regular properties instead)\n\nWe suggest manually removing these elements from your SVGs, or using the tools mentioned in [Optimizing SVGs](#optimizing) above to ensure their compatibility. \n\n## 4 Styling SVGs\n\nYou might want to change certain colors in your SVG, for example when adding an image. Mendix allows you to do this by setting the `fill` and `stroke` properties in image's styling. These properties will then be applied to *all* the elements inside the SVG that do not have these properties.\n\nTake the following SVG as an example:\n\n```svg\n<svg viewBox=\"0 0 100 100\">\n    <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" stroke=\"blue\"/>\n</svg>\n```\n\nSetting the `fill` property on this image's styling will turn the rectangle (`rect` element) to the color provided. Setting the `stroke` property will result in no changes, since the `stroke` has already been set.\n\nHere is how an SVG without the `fill` property looks:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-svg/before.png\" alt=\"before\" >}}\n\nHere is how an SVG with the `fill` property looks:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-svg/after.png\" alt=\"after\" >}}\n\nYou can check the list of allowed style properties at the [react-native-svg](https://github.com/react-native-community/react-native-svg#common-props) repository.\n\n### 4.1 Coloring SVG Icons\n\nIcons can only be set for buttons and bottom bar items. When you integrate an SVG icon into a button or bottom bar item, you will have to set the SVG's color yourself. When using an app which employs Atlas UI, by default the colors are all white. For more information on styling, see the [Native Mobile Styling Reference Guide](/refguide/native-styling-refguide/).\n\nFor example, the following code:\n\n```jsx\nexport const DemoButton = {\n\tcontainer: {\n\t\tbackgroundColor: 'green'\n\t},\n\tcaption: {\n\t\tcolor: 'orange'\n\t},\n\ticon: {\n\t\tcolor: 'blue'\n\t}\n}\n```\n\nWould produce the following button and SVG:\n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-svg/blue-svg.png\" alt=\"blue svg\" >}}\n\n## 5 Using SVGs in Pluggable Native Widgets\n\nTo use an SVG in a pluggable native widget's image property, we recommend using the provided `Image` or `Icon` component. This will allow a static image of any supported format to be used within your pluggable widget, including SVGs.\n\nHere is an example of using the `Image` component:\n\n```jsx\nimport { createElement } from \"react\";\nimport { Image } from \"mendix/components/native/Image\";\n\nexport const PluggableWidget = () => (\n    <Image source=\"PUT_SOURCE_HERE\" style={{ fill: 'blue' }} />\n);\n```\n\nHere is an example of using the `Icon` component:\n\n```jsx\nimport { createElement } from \"react\";\nimport { Icon } from \"mendix/components/native/Icon\";\n\nexport const PluggableWidget = () => (\n    <Icon \n        icon={{\n            type: \"image\",\n            iconUrl: \"PUT_SOURCE_HERE\"\n        }}\n        size={20}\n        color=\"blue\"\n    />\n);\n```\n\nIf you want to use SVG elements directly in your pluggable widget, see the [react-native-svg](https://github.com/react-native-community/react-native-svg) library.\n\n## 5 Read More\n\n* [Build a Pluggable Native Widget](/howto/extensibility/build-native-widget/)\n* [Atlas UI](/howto/front-end/atlas-ui/)\n* [Pluggable Widgets API](/apidocs-mxsdk/apidocs/pluggable-widgets/)\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/native-mobile/native-template.md",
    "header": {
      "title": "Native Template",
      "url": "/refguide/native-template/",
      "parent": "native-mobile",
      "weight": "12",
      "tags": [
        "mobile",
        "template",
        "native",
        "iOS",
        "Android",
        "reference guide"
      ]
    },
    "body": "\n## 1 Introduction\n\nA template is required when you build a Mendix native app: specifically the Native Template. In short, the Native Template describes the native dependencies your app needs, and it includes two native apps (one for iOS and one for Android) that can be independently built to create the finished apps. The Native Template works in conjunction with the Native Mobile Builder which configures it. For more information on the Native Mobile Builders' capabilities, see the [Native Mobile Builder Release Notes](/releasenotes/mobile/mendix-native-mobile-builder/).\n\nThe template also includes tooling to help put everything together. Specifically, the Native Template uses the React Native and Mendix auto-linking capabilities to link the native dependencies to platform-specific apps, and uses the Native Mobile toolkit which configures the platform-specific app with version numbers, app names, splash screens, and more. \n\nIn addition, the Native Template helps create custom developer apps. These are apps that act like the Make It Native app but are tailored your app's specific needs. If you would like to build an app that uses bespoke functionality like custom native widgets see [How to Create a Custom Developer App](/howto/mobile/how-to-devapps/). \n\n## 2 Location\n\nThe Native Template is hosted on [GitHub](https://github.com/mendix/native-template) and is publicly available.\n\n## 3 Versioning\n\nPlease note this key information regarding versioning:\n\n* A Native Template is versioned using [semantic versioning](https://semver.org/)\n* A Native Template version is closely related to the Mendix Studio Pro version of the app that is being built\n* Not using a matching version will lead to unexpected behavior\n\nTo determine which version of the Native Template you should use, do the following:\n\n1. Note which version of Studio Pro you are using, for example *9.0.0*.\n1. Navigate to the [Native Template mendix_version.json file](https://github.com/mendix/native-template/blob/master/mendix_version.json).\n\nThe keys represent the Mendix Studio Pro version. The `min` and `max` values are the minimum and maximum Native Template versions supported: \n\n{{< figure src=\"/attachments/refguide/mobile/native-mobile/native-template/mendix-version.png\" alt=\"Mendix Versions\"   width=\"200\"  >}}\n\nSo like in the example shown above, in the case of Mendix Studio Pro 8.9.x you could choose any Native Template version from 4.0.0 to the latest. Ideally, you should choose the most recent supported version.\n\n## 4 Auto-Linking Dependencies\n\nReact Native modules are npm packages that include dependencies which must be linked with your platform-specific apps so that the React Native modules can be compiled with the apps.\n\nThe Native Template fully supports the [React Native's CLI auto-linking capabilities](https://github.com/react-native-community/cli/blob/master/docs/autolinking). Libraries that are auto-linkable by default will be correctly linked to the platform-specific apps. \n\nFor libraries that are not fully auto-linkable (those are usually libraries that require special initialization) we extended the default auto-linking capabilities. This process is limited to publicly known capabilities. We will expand the documentation when the API becomes public.\n\n## 5 Native Mobile Toolkit\n\nThe Native Mobile Toolkit is a Mendix-developed npm module that is used to facilitate the configuration requirements of platform-specific apps. It lets you define app features like versioning, package ID, splash screens, and more in a platform-agnostic way. \n\nThe configuration is written in JSON. The configuration file is versioned using an incremental number. The version is incremented when breaking changes are introduced.\n\nThe Native Mobile Toolkit includes conversion logic that allows conversion from an older config version to a newer one. This conversion\nhappens in memory so that it does not conflict with custom implementations. The converted config is outputted in the terminal's console\nfor further debugging. \n\n### 5.1 Mobile Toolkit Configuration Structure\n\nApp-specific information is defined in a top level **config** file. The best way to derive possible config options is to configure an app initially with the Mendix Native Mobile Builder and note the configuration keys.\n\n**<details><summary>To see the supported properties as of config version 2, click here.</summary>**\nThese are the supported properties as of config version 2:\n\n```\ninterface NativeTemplateConfig {\n    configVersion: 2;\n    appName: string;\n    appIdentifier: string;\n    appVersion: string;\n    bundleName: BundleName;\n    buildNumber: number;\n    deviceTarget: DeviceTarget;\n    capabilities: Capabilities;\n    orientation: Orientation;\n    permissions: Permission[];\n    runtimeUrl: string;\n}\n\ninterface Capabilities {\n    appCenterOTA: Capability;\n    crashlytics: Capability;\n    deepLink: DeepLinkCapability;\n    firebaseAndroid: Capability;\n    firebaseIos: Capability;\n    localNotifications: Capability;\n    maps: MapsCapability;\n    mapsIos: MapsIosCapability;\n    pushNotifications: Capability;\n}\n\ninterface Capability {\n    enabled: boolean;\n}\n\ninterface IOSPermission extends Permission {\n    purpose: string;\n}\n\ninterface Permission {\n    name: string;\n    title: string;\n    platform: OS;\n    required: boolean;\n}\n\ninterface DeviceTarget {\n    phone: boolean;\n    tablet: boolean;\n}\n\nexport interface Orientation {\n    portrait: boolean;\n    landscape: boolean;\n}\n```\n</details>\n\n**<details><summary>To see an example of a configured app, click here.</summary>**\nThis is an example of a configured app:\n\n```\n{\n    \"configVersion\": 2,\n    \"appIdentifier\": \"com.mendix.mobile\",\n    \"appName\": \"Mendix App\",\n    \"appVersion\": \"1.0.0\",\n    \"buildNumber\": 1,\n    \"runtimeUrl\": \"http://localhost:8080\"\n    \"bundleName\": {\n        \"main\": \"MendixApp\",\n        \"dev\": \"MendixAppDev\"\n    },\n    \"deviceTarget\": {\n        \"phone\": true,\n        \"tablet\": false\n    },\n    \"orientation\": {\n        \"portrait\": true,\n        \"landscape\": true\n    },\n    \"permissions\": [\n        {\n            \"title\": \"Internet\",\n            \"name\": \"android.permission.INTERNET\",\n            \"platform\": \"android\",\n            \"required\": true\n        },\n        {\n            \"title\": \"Location - Always Usage\",\n            \"name\": \"NSLocationAlwaysUsageDescription\",\n            \"purpose\": \"To use that feature, the app needs access to your location.\",\n            \"platform\": \"ios\",\n            \"required\": true\n        }\n    ],\n    \"capabilities\": {\n        \"deepLink\": {\n            \"value\": \"\",\n            \"enabled\": false\n        },\n        \"maps\": {\n            \"value\": \"a12dkdadhqow12123123radqwe\",\n            \"enabled\": true\n        },\n        \"mapsIos\": {\n            \"enabled\": false\n        },\n        \"pushNotifications\": {\n            \"enabled\": false\n        },\n        \"crashlytics\": {\n            \"enabled\": false\n        },\n        \"firebaseAndroid\": {\n            \"enabled\": false\n        },\n        \"firebaseIos\": {\n            \"enabled\": false\n        },\n        \"localNotifications\": {\n            \"enabled\": false\n        },\n        \"appCenterOTA\": {\n            \"enabled\": false\n        }\n    }\n}\n\n```\n</details>\n\n\n### 5.2 Assets\n\nThe Mobile Toolkit supports configuring splash screens and the icons for your app. Assets are expected to be saved relative to the root of the Native Template in a folder named **assets**.\n\n```\n- assets\n    - icons\n    - splashScreens\n```\n\n#### 5.2.1 iOS Icons\n\nThe icons' configuration needs to be defined in a versioned *JSON* formatted **config** file under **assets/icons/ios.json**.\n\nThe actual asset files defined under filename are expected to be available next to the **config** file.\n\nThe version is required and used for backwards compatibility purposes. Below you see the config using **version 1**:\n\n```\ninterface IOSIconsConfig {\n    \"images\": Array<{\n            \"size\": string\",\n            \"idiom\": \"ipad\" | \"iphone\" | \"ios-marketing\",\n            \"scale\": \"1x\" | \"2x\"| \"3x\",\n            \"type\": \"icon\",\n            \"filename\": string\n        }>,\n    \"version\": 1\n}\n```\n\n**<details><summary>To see an example of all the keys required to successfully configure an app, click here.</summary>**\n\nThis is an example of all the keys required to successfully configure an app: \n\n```\n{\n    \"images\": [\n        {\n            \"size\": \"20x20\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"1x\",\n            \"type\": \"icon\",\n            \"filename\": \"notification@1x.png\"\n        },\n        {\n            \"size\": \"20x20\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"notification@2x.png\"\n        },\n        {\n            \"size\": \"20x20\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"notification@2x.png\"\n        },\n        {\n            \"size\": \"20x20\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"3x\",\n            \"type\": \"icon\",\n            \"filename\": \"notification@3x.png\"\n        },\n        {\n            \"size\": \"29x29\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"1x\",\n            \"type\": \"icon\",\n            \"filename\": \"settings@1x.png\"\n        },\n        {\n            \"size\": \"29x29\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"settings@2x.png\"\n        },\n        {\n            \"size\": \"29x29\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"settings@2x.png\"\n        },\n        {\n            \"size\": \"29x29\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"3x\",\n            \"type\": \"icon\",\n            \"filename\": \"settings@3x.png\"\n        },\n        {\n            \"size\": \"40x40\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"1x\",\n            \"type\": \"icon\",\n            \"filename\": \"spotlight@1x.png\"\n        },\n        {\n            \"size\": \"40x40\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"spotlight@2x.png\"\n        },\n        {\n            \"size\": \"40x40\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"spotlight@2x.png\"\n        },\n        {\n            \"size\": \"40x40\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"3x\",\n            \"type\": \"icon\",\n            \"filename\": \"spotlight@3x.png\"\n        },\n        {\n            \"size\": \"60x60\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"app@2x.png\"\n        },\n        {\n            \"size\": \"60x60\",\n            \"idiom\": \"iphone\",\n            \"scale\": \"3x\",\n            \"type\": \"icon\",\n            \"filename\": \"app@3x.png\"\n        },\n        {\n            \"size\": \"76x76\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"1x\",\n            \"type\": \"icon\",\n            \"filename\": \"ipadapp@1x.png\"\n        },\n        {\n            \"size\": \"76x76\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"ipadapp@2x.png\"\n        },\n        {\n            \"size\": \"83.5x83.5\",\n            \"idiom\": \"ipad\",\n            \"scale\": \"2x\",\n            \"type\": \"icon\",\n            \"filename\": \"ipadproapp@2x.png\"\n        },\n        {\n            \"size\": \"1024x1024\",\n            \"idiom\": \"ios-marketing\",\n            \"scale\": \"1x\",\n            \"type\": \"icon\",\n            \"filename\": \"appstore@1x.png\"\n        }\n    ],\n    \"version\": 1\n}\n```\n</details>\n\n#### 5.2.2 Android Icons\n\nThe icons' configuration needs to be defined in a versioned JSON-formatted **config** file under *assets/icons/android.json*.\n\nThe actual asset files defined under filename are expected to be available next to the **config** file.\n\nThe version is required and used for backwards compatibility purposes. For now the config is on version 1:\n\n```\ninterface AndroidIconsConfig {\n    \"images\": Array<{\n            \"directory\": \"mipmap-mdpi\" | \"mipmap-hdpi\" | \"mipmap-xhdpi\" | \"mipmap-xxhdpi\"\n            \"filename\": \"ic_launcher.png\" | \"ic_launcher_round.png\"\n            \"title\": string\n        }>,\n    \"version\": 1\n}\n```\n\n**<details><summary>To see an example of all the keys required to successfully configure an app, click here.</summary>**\n\nThis is an example of all the keys required to successfully configure an app: \n\n```\n{\n    \"images\": [\n        {\n            \"filename\": \"ic_launcher.png\",\n            \"directory\": \"mipmap-mdpi\",\n            \"title\": \"mipmap-mdpi-ic_launcher.png\"\n        },\n        {\n            \"filename\": \"ic_launcher.png\",\n            \"directory\": \"mipmap-hdpi\",\n            \"title\": \"mipmap-hdpi-ic_launcher.png\"\n        },\n        {\n            \"filename\": \"ic_launcher.png\",\n            \"directory\": \"mipmap-xhdpi\",\n            \"title\": \"mipmap-xhdpi-ic_launcher.png\"\n        },\n        {\n            \"filename\": \"ic_launcher.png\",\n            \"directory\": \"mipmap-xxhdpi\",\n            \"title\": \"mipmap-xxhdpi-ic_launcher.png\"\n        },\n        {\n            \"filename\": \"ic_launcher.png\",\n            \"directory\": \"mipmap-xxxhdpi\",\n            \"title\": \"mipmap-xxxhdpi-ic_launcher.png\"\n        },\n        {\n            \"filename\": \"ic_launcher_round.png\",\n            \"directory\": \"mipmap-mdpi\",\n            \"title\": \"mipmap-mdpi-ic_launcher_round.png\"\n        },\n        {\n            \"filename\": \"ic_launcher_round.png\",\n            \"directory\": \"mipmap-hdpi\",\n            \"title\": \"mipmap-hdpi-ic_launcher_round.png\"\n        },\n        {\n            \"filename\": \"ic_launcher_round.png\",\n            \"directory\": \"mipmap-xhdpi\",\n            \"title\": \"mipmap-xhdpi-ic_launcher_round.png\"\n        },\n        {\n            \"filename\": \"ic_launcher_round.png\",\n            \"directory\": \"mipmap-xxhdpi\",\n            \"title\": \"mipmap-xxhdpi-ic_launcher_round.png\"\n        },\n        {\n            \"filename\": \"ic_launcher_round.png\",\n            \"directory\": \"mipmap-xxxhdpi\",\n            \"title\": \"mipmap-xxxhdpi-ic_launcher_round.png\"\n        }\n    ],\n    \"version\": 1\n}\n```\n</details>\n\n#### 5.2.3 iOS Splash Screens\n\nThe splash screen configuration needs to be defined in a versioned JSON-formatted **config** file under *assets/splashScreens/ios.json*.\n\nThe actual asset files defined under filename are expected to be available next to the **config** file.\n\nThe version is required and used for backwards compatibility purposes. For now the config is on version 1:\n\n```\ninterface AndroidSplashScreensConfig {\n      \"images\": Array<{\n              \"size\": \"640x960\" | \"375x667\" | \"414x736\",\n              \"idiom\": \"universal\",\n              \"scale\": \"1x\" | \"2x\" | \"3x\",\n              \"type\": \"splashScreen\",\n              \"filename\": string\n          }>,\n      \"version\": 1\n}\n```\n\nHere is an example of the file with all required splash screens defined: \n\n```\n{\n    \"images\": [\n        {\n            \"size\": \"640x960\",\n            \"idiom\": \"universal\",\n            \"scale\": \"1x\",\n            \"type\": \"splashScreen\",\n            \"filename\": \"splash@1x.png\"\n        },\n        {\n            \"size\": \"375x667\",\n            \"idiom\": \"universal\",\n            \"scale\": \"2x\",\n            \"type\": \"splashScreen\",\n            \"filename\": \"splash@2x.png\"\n        },\n        {\n            \"size\": \"414x736\",\n            \"idiom\": \"universal\",\n            \"scale\": \"3x\",\n            \"type\": \"splashScreen\",\n            \"filename\": \"splash@3x.png\"\n        }\n    ],\n    \"version\": 1\n}\n```\n\n#### 5.2.4 Android Splash Screens\n\nThe splash screen configuration needs to be defined in a versioned JSON-formatted **config** file *assets/splashScreens/android.json*.\n\nThe actual asset files defined under filename are expected to be available next to the **config** file.\n\nThe version is required and used for backwards compatibility purposes. For now the config is on version 1:\n\n```\ninterface AndroidSplashScreensConfig{\n  \"images\": Array<{\n          \"filename\": \"splash.png\";\n          \"directory\": \"drawable-hdpi\" | \"drawable-xhdpi\" | \"drawable-xxhdpi\",\n          \"title\": string;\n      }>,\n  \"version\": 1\n}\n```\n\nHere is an example of the file with all required splash screens defined: \n\n```\n{\n    \"images\": [\n        {\n            \"filename\": \"splash.png\",\n            \"directory\": \"drawable-hdpi\",\n            \"title\": \"drawable-hdpi-splash.png\"\n        },\n        {\n            \"filename\": \"splash.png\",\n            \"directory\": \"drawable-xhdpi\",\n            \"title\": \"drawable-xhdpi-splash.png\"\n        },\n        {\n            \"filename\": \"splash.png\",\n            \"directory\": \"drawable-xxhdpi\",\n            \"title\": \"drawable-xxhdpi-splash.png\"\n        }\n    ],\n    \"version\": 1\n}\n```\n\n### 5.3 Configuring Firebase\n\nUsing Firebase requires special considerations. When enabling the Firebase capabilities via the Native Mobile Toolkit **config** file, \nthe toolkit will look in the *assets/firebase* folder for the appropriate configuration files.\n\nThe files are looked up by name. The expected names per platform are the following: \n\n| Platform | Expected Name            |\n| -------- | ------------------------ |\n| Android  | *google-services.json*     |\n| iOS      | *GoogleService-Info.plist* |\n\nThe Native Mobile Toolkit does not verify the validity of the provided configuration files. It only moves them to the correct \nlocation when configuring the app. \n\n### 5.4 Running the Native Mobile Toolkit\n\nThe Native Mobile Toolkit is a Node module included with Native Template. As such, it must be installed first by running `install` in the Native Template root directory. When building locally, you must run `npm install` when a new version of the Native Mobile Toolkit is released to ensure you are always running on the latest version.\n\n{{% alert color=\"info\" %}}\nThe npm script expects that the Native Mobile Toolkit configuration files are at the root of the app, and named *config.json*. This is always the case when using the Mendix Native Mobile Builder to configure a local or a remote app.  \n{{% /alert %}}\n\nTo run the toolkit using the run script defined in *package.json*, run `npm run configure`.\n\n#### 5.4.1 Specifying Custom Configuration Paths\n\nHaving the configuration file relative to the root directory is not required for the toolkit, but is done for convenience. To specify a different configuration file path the toolkit can be executed using the following command:\n\n```\nnative-mobile-toolkit configure --config-path='./<name of the configuration>.json' --verbose\n```\n\n## 6 Bundle Information\n\nMendix Native apps are based on React Native. When building your Mendix app using the Mendix Native Mobile Builder, your app is first compiled to Javascript code and static assets. Using React Native's Metro Bundler, the client code and assets are then compiled to platform specific React Native Bundles. These are finally moved to the correct location in Native Template before compiling the final apps.\n\nThis whole process is unified using a tool called MXBuild that is included with every installation of Mendix Studio Pro. For more information, see the [MxBuild Reference Guide](/refguide/mxbuild/).\n\n### 6.1 Using MxBuild to Build your Native App\n\nIf for some reason you cannot use Mendix Native Mobile Builder to configure and build your app, for example when operating in a CI environment which lacks a display, you will have to explicitly have set up the correct Mendix Studio Pro version for the app you are building and then manually run MXBuild.\n\nTo do so: \n\n1. Locate the required Studio Pro installation.\n1. Find the path to the executable **mxbuild.exe** and note it down. \n1.  Open a command line and run this command: \n   \n    ```\n    <path-to-mxbuild.exe> --java-home=DIRECTORY -java-exe-path=FILENAME --target=deploy --native-packager <path-to-the-app-mpr>\n    ```\n\nThis command does the following: \n\n* Exports the web and native apps into the deployment folder as usual.\n* Runs the React Native metro bundler (note flag `--native-packager`) to create the RN bundles and assets for each platform in `/deployment/native/bundle`.\n\nThe bundle folder structure will look something like this: \n\n```\n- android\n    - res\n        - drawable-mdpi\n        - drawable-hdpi\n        - drawable-xhdpi\n        - drawable-xxhdpi\n        - drawable-xxxhdpi\n        - raw\n    - assets\n        - index.android.bundle\n- iOS \n    - assets\n        - List of all images namespaced\n        - index.ios.bundle\n```\n\n### 6.2 Copying the Bundle to the Right Location\n\nThe created bundles need to be copied to the right place in the Native Template to be built:\n\n* For Android, the content of the `bundle/android` reflects the exact folders the assets and bundles need to be copied to\n* For iOS, the content of the `bundle/iOS` folder needs to be simply copied to the `<native-template>/ios/Bundle` directory\n\n## 7 Deriving the App's Native Dependencies\n\nMendix Studio Pro 9 introduced Native Dependency resolution for pluggable widgets and Javascript actions. For more information, see [Declaring Native Dependencies\n](/apidocs-mxsdk/apidocs/pluggable-widgets-native-dependencies). Prior to Studio Pro 9 Mendix Studio Pro was shipping with a set of core dependencies which are now are removed. \n\nAs you develop, you may add more Mendix Studio Pro 9 compatible modules, widgets, and actions to your app. This means and more dependencies \nwill be added that will also need be declared in your app's Native Template prior to building the native apps. \n\nAs this dependency management is required for your app's initial setup, we suggest you use the Mendix Native Mobile Builder to configure your app.\nThe Mendix Native Mobile builder is capable of deriving required dependencies and linking them with your app's Native Template. \n\n## 8 Continuous Integration Testing Guidelines\n\nIn some advanced cases you might consider setting up continuous integration (CI) testing. This could be useful if you have multiple environments and prefer testing\nany nightly changes in acceptance before pushing to production.\n\nWe suggest you initially develop your app using the Mendix Native Mobile Builder until the native dependencies are stable. Having a CI in the early stages will lead to frustration, and flux dependencies will lead to unexpected crashes. \n\nA CI environment needs to be able to do the following to successfully configure a Native Template for builds:\n\n* Check out the latest Mendix app from SVN\n* Check out your app's Native Template (the one used when configuring the app)\n* Run `mxbuild`\n* Set up the configuration and move assets as needed (this can be done with simple shell scripts or any other solution, and is the implementor's choice) \n* Run `npm i` and `npm run configure` to configure the app using Mendix Mobile Toolkit before the build.\n\nHow to build the apps is a choice for the implementor. Mendix Native App Builder use App Center for convenience. There are multiple other \nsolutions, on premise or as a service, that can be used for this purpose. We do not endorse one over the other.\n\n## 9 Read More\n\n* [Offline First Reference Guide](/refguide/offline-first/)"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/offline-first.md",
    "header": {
      "title": "Offline-First",
      "url": "/refguide/offline-first/",
      "category": "Mobile",
      "weight": "30",
      "tags": [
        "offline",
        "native",
        "mobile",
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nOffline-first applications work regardless of the connection in order to provide a continuous experience. Pages and logic interact with an offline database on the device itself, and data is synchronized with the server. This results in a snappier UI, increased reliability, and improved device battery life.\n\n{{% alert color=\"info\" %}}\nIt is important to understand that offline-first is an architectural concept and not an approach based on the network state of the device. Offline-first apps do not rely on a connection, but they can use connections (for example, you can call microflows, use a Google Maps widget, or use push notifications).\n{{% /alert %}}\n\nMendix supports building offline-first applications for [native mobile](/refguide/native-mobile/) and hybrid apps. Both native and hybrid apps share the same core, and this gives them the same offline-first capabilities. Native mobile apps are always offline-first, but for hybrid mobile apps, it depends on the navigation profile that is configured. The data is stored on the device in a local database, and the files are stored on the file storage of the device.\n\nMendix Studio Pro performs validations to make sure your app follows an offline-first approach and works even when there is no connection.\n\nDuring development, the [Make It Native mobile app](https://play.google.com/store/apps/details?id=com.mendix.developerapp) (for native mobile apps) or [Mendix mobile app](https://play.google.com/store/apps/details?id=com.mendix.SprintrMobile) (for hybrid mobile apps) can be used to preview and test your Mendix app on a device. The first time your Mendix app is loaded, an internet connection will be required to create a session on the server and download the necessary data and resources. After this initial synchronization, data will remain available in the app even without an internet connection. Subsequent synchronizations will be performed when requested by the user, through application logic or after a model change.\n\n## 2 Synchronization{#synchronization}\n\nMendix automatically analyzes your app's data model to determine which entities should be synchronized based on the pages and nanoflows used within your offline navigation profile. In addition, the platform takes entity access into account so that only the data the user is allowed to access is synchronized.\n\nSynchronization is automatically triggered during the following scenarios:\n\n* The initial startup of your mobile app\n* The first startup of your mobile app after your Mendix app is redeployed when the following conditions are matched:\n * There is a network connection\n * You are using a new Mendix version or the domain model used in the offline-first app has changed\n* After the app user logs in or out. Note that synchronization after log out does not synchronize the data of the logged-out user, but rather synchronizes the data for the anonymous user.\n\nSynchronization can also be configured via different places in your Mendix app, for example:\n\n* As an action on a button\n* As an action in a nanoflow\n* As a pull-down action on a list view (for native mobile only)\n\nSynchronization is performed on the database level. This means if you synchronize while having some uncommitted changes for an object, the attribute values in local database will be synchronized, ignoring the uncommitted changes. Uncommitted changes are still available after a synchronization.\n\n### 2.1 Synchronization Types{#synchronization-types}\n\nThere are three different types of synchronization that can be triggered from the client:\n\n* [Full synchronization](#full-sync)\n* [Synchronize unsynchronized objects](#unsynchronized-objects)\n* [Selective synchronization](#selective-sync)\n\n#### 2.1.1 Full Synchronization {#full-sync}\n\nThis mode performs both the upload and the download phases for all entities used in the offline-first app. You can customize the behavior of each entity with [customizable synchronization](#customizable-synchronization).\n\n#### 2.1.2 Synchronize Unsynchronized Objects {#unsynchronized-objects}\n\nThis type of synchronization can only be done through a **Synchronize** action inside a nanoflow. In this mode, all objects with changes committed to the offline database are synchronized. Information about objects deleted since the last synchronization is also sent to the server.\n\n#### 2.1.3 Selective Synchronization {#selective-sync}\n\nSelective synchronization can only be done through a **Synchronize** action inside a nanoflow. In this mode, a specific set of objects will be synchronized. These objects can be either all unsynchronized objects when the [synchronize unsynchronized objects](/refguide/synchronize/#unsynchronized-objects) mode is selected, or a manually selected set of objects when the [synchronize selected object(s)](/refguide/synchronize/#selected-objects) mode is selected.\n\nDeleted objects cannot be synchronized using selective synchronization.\n\nSynchronization performed using a UI element (for example, a button or an on-change action) performs the full synchronization.\n\n### 2.2 Synchronization Phases\n\nThe synchronization process consists of two phases. In the [upload phase](#upload), your app updates the server database with the new or changed objects that are committed. In the [download phase](#download), your app updates its local database using data from the server database. Note that synchronization only works at the database level. That means that new uncommitted objects and attribute changes are not synchronized.\n\n#### 2.2.1 Upload Phase {#upload}\n\nThe upload phase executes the following operations:\n\n1. <a name=\"upload-step-one\"></a>As the local database can be modified only by committing or deleting an object, such an object can be either a new object created while offline or an existing object previously synced from the server. The upload phase detects which objects have been committed to the local database since the last sync. The detection logic differs per sync type. For **Synchronize all**, all committed objects in the local database are checked. For **Synchronize objects**, all committed objects from the list of selected objects are checked.\n2.  <a name=\"upload-step-two\"></a>There might be objects deleted from the device database since the last sync. The upload phase checks which objects have been deleted.\n   \n   {{% alert color=\"warning\" %}}Deleting an object from the device database is only supported in Studio Pro 9.7 and higher.{{% /alert %}}\n   \n3. <a name=\"upload-step-three\"></a>If there are any changed or new file objects their content is uploaded to the server and stored there temporarily. Each file is uploaded in a separate network request. If a file upload fails, the whole sync is aborted without causing any changes to the server or device database.\n4. <a name=\"upload-step-four\"></a>All the changed and new objects are sent to the server, and the content of the files is linked to the objects. The server performs referential integrity validation of the objects (for more information, see the [Dangling References](#dangling-references) section below). The objects are committed to the server database. Information about deleted objects is also sent to the server so the server can delete them from its database too. This step is performed in a single network request.\n5. <a name=\"upload-step-five\"></a>Any configured before- or after-commit or before- or after-delete event handlers on these objects will run on the server as usual: after the data has been uploaded and before the device database is updated. \n   This means that any further changes you make to the synced objects in the event handlers will be applied to the device database during the download phase. There is one exception to this rule: changing the contents of a file entity is not applied when you attempt to change them in the event handlers.\n   Before- and after-commit event handlers for new objects will also be executed.\n\n#### 2.2.2 Download Phase {#download}\n\nIf the upload phase was successful, the download phase starts in which the local database is updated with the newest data from the server database. The behavior of download phase differs per synchronization type.\n\n**Full synchronization** — A network request is made to the server per entity to retrieve the newest data from the server database. You can manage which entities are synchronized to the local database by customizing your app's synchronization behavior. For more details on this procedure, see the [Customizable Synchronization](#customizable-synchronization) section below. The download process also downloads the file entities' contents and saves that to your device storage. This process is incremental. The app only downloads the contents of a file object if the file has not been downloaded before, or if the file has been changed since it was last downloaded. The changed date attribute of the file entity is used to determine if the contents of a file object have changed.\n\n**Selective synchronization** — Only the objects selected for synchronization are synchronized to the local database. There are no extra network requests made to retrieve these objects. The objects are returned in the response of a network request made during the upload phase. If a file entity is selected for synchronization, its content is also updated on the device storage incrementally. The logic is the same in the full synchronization.\n\n### 2.3 After Synchronization\n\nAfter synchronization is completed, the widgets on your app's current page will be refreshed to reflect the latest data. If the synchronization is triggered from a nanoflow, all nanoflow object/list variables are updated (uncommitted changes are still preserved).\n\nPlease note that a nanoflow object variable's value might become `empty` after synchronization, if the object is removed from the device during synchronization. This might happen under the following cases:\n\n* The object is deleted on the server\n* The current user does not have enough access to the object (defined by the security access rules)\n* The entity is configured with an XPath constraint on the [customizable synchronization](#customizable-synchronization) screen, and the object no longer matches the specified XPath constraint\n* The entity is configured with **Nothing (clear data)** option on the customizable synchronization screen\n* The upload phase fails for the object — for example when a before commit event handler returns false, or committing fails due to violation of a unique validation\n\n### 2.4 Customizable Synchronization {#customizable-synchronization}\n\n{{% alert color=\"warning\" %}}\nThese settings are not applied for [selective synchronization](#selective-sync).\n{{% /alert %}}\n\nBy default, Mendix automatically determines which objects need to be synchronized as mentioned in [Synchronization](#synchronization).\n\nDepending on the use-case, more fine-grained synchronization controls might be required. Therefore, it is possible to change the download behavior for an entity. You can choose between the following options:\n\n* **All Objects** — Download all objects applying the regular security constraints.\n* **By XPath** — Only download the objects which match the [XPath Constraints](/refguide/xpath-constraints/) in addition to the regular security constraints. This means all previously synchronized objects that do not match the XPath constraint will be removed.\n* **Nothing (clear data)** — Do not download any objects automatically, but do clear the data stored in the database for this entity when performing a synchronization (this can be useful in cases where the objects should only be uploaded, for example a `Feedback` entity).\n* **Nothing (preserve data)** — Do not download any objects automatically, and do not clear the data stored in the database for this entity when performing a synchronization  (this can be useful in cases where you want have full control over the synchronization and should be used in combination with the [Synchronize to device](/refguide/synchronize-to-device/) or [Synchronize](/refguide/synchronize/) activity with specific objects selected).\n\nIf you have custom widgets or JavaScript actions which use an entity that cannot be detected by Studio Pro in your offline-first profile (because its only used in the code), you can use customizable synchronization to include such entities.\n\n{{< figure src=\"/attachments/refguide/mobile/offline-first/custom-sync.png\" alt=\"custom synchronization\"   width=\"450\"  >}}\n\n### 2.5 Limitations\n\nRunning multiple synchronization processes at the same time is not supported, regardless the of the type (**full** or **selective**). For more information, see the [Limitations](/refguide/synchronize/#limitations) section of the *Synchronize Reference Guide*.\n\n### 2.6 Error Handling {#error-handling}\n\nDuring synchronization, errors might occur. This section describes how Mendix handles these errors and how you can prevent them.\n\n#### 2.6.1 Network-Related Errors {#network-errors}\n\nSynchronization requires a connection to the server, so during synchronization, errors may occur due to failing or poor network connections. Network errors may involve a dropped connection or a timeout. By default, the timeout for synchronization is 30 seconds per network request for hybrid mobile apps. For native apps, there is no default timeout, and the timeout is determined by the platform and OS version.\n\nThe synchronization is atomic, which means that either everything or nothing is synchronized. Exceptions are described in the [Model- or Data-Related Errors](#othererrors) section below.\n\nIf a network error happens during the file upload (via [step 2 in the upload phase](#upload-step-two)), Mendix retries to upload the failed files. If there is an error for the second time, the synchronization is aborted. The changes at that moment are kept on the local device, so it can be retried later.\n\nIf a network error occurs while uploading the data (via [step 3 in the upload phase](#upload-step-three)), the data is kept on the local device and no changes are made on the server. Any files uploaded in [step 2](#upload-step-two) will be uploaded again during the next synchronization.\n\nIf a network error (such as a timeout) occurs after uploading the data (at [step 3 in the upload phase](#upload-step-three)), the data is kept on the local device. However, since the server has already started working on the request it will complete the request and commit the changes to server database. The device cannot distinguish whether the server processed the request or not, so the next synchronization attempt will contain the already-applied changes. In this case, the server will behave differently based on Mendix version. In Mendix Studio Pro v8.18 or below, the server will commit the same changes again, which might overwrite potential changes made by other users between the two synchronizations. From Studio Pro v8.18 and above this process is optimized and the server will not commit the same changes because they have been applied before.\n\nIf a network error occurs during the download phase, no data is updated on the device. Therefore the user can keep working or retry. The effects of the upload phase are not rolled back on the server.\n\nIf the synchronization is called from a nanoflow, the error can be handled using nanoflow error handling. In other cases (for example, if synchronization is called from a button or at startup), a message will be displayed to the user that the data could not be synchronized.\n\n#### 2.6.2 Model- or Data-Related Errors {#othererrors}\n\nDuring the synchronization, changed and new objects are committed. An object's synchronization might encounter problems due to the following reasons:\n\n* The object is no longer available on the server (either from deletion or inaccessibility due to access rules)\n* A member of the object has become inaccessible due to access rules\n* An error occurs during the execution of a before- or after-commit event microflow\n* The object is not valid according to domain-level validation rules\n* The object has a dangling reference (for more information, see the [Dangling References](#dangling-references) section below)\n\n{{% alert color=\"warning\" %}}When a synchronization error occurs because of one the reasons above, an object's commit is skipped, its changes are ignored, and references from other objects to it become invalid. Objects referencing such a skipped object (which are not triggering errors) will be synchronized normally. Such a situation is likely to be a modeling error and is logged on the server. To prevent data loss, the attribute values for such objects are stored in the `System.SynchronizationError` entity (since Mendix 8.12).  {{% /alert %}}\n\n#### 2.6.3 Dangling References {#dangling-references}\n\nDuring synchronization the server performs referential integrity validation of the new or changed objects that are being synchronized to the server. his validation ensures that none of the synchronized objects have associations pointing to an object that exists only on the device. If an association does not satisfy this condition, it is a dangling reference.\n\nFor example, when a committed `City` object refers to an uncommitted `Country` object, synchronizing the `City` object alone will yield an invalid `Country` object reference, which will trigger a dangling reference error upon synchronization.\n\nA dangling reference error is a modeling error.\n\nTo prevent dangling errors during selective synchronization, make sure that for every object selected for the sync any other referenced objects that have been created on the device but not yet synchronized are also selected for the sync. Alternatively, you can synchronize these objects first.\n\nTo prevent dangling reference errors during full synchronization, make sure both sides of the association are committed before synchronizing.\n\nWhen some of the synchronized objects have dangling references, the server will synchronize all other objects except the ones with dangling references. For the objects with dangling references, the server will create a synchronization error and store it in the `System.SynchronizationError` entity. In such a situation you will see an error message like this:\n\n```\nSynchronizing an object of type City with GUID {123} has failed due to a modelling error. The object has a reference to other objects (City_Country) that have not been synchronized to the runtime yet. This breaks referential integrity of the object because it references a non-existing object in the runtime database. Please make sure that you synchronize the referenced object together with the City or before synchronizing the City.\n```\n\nTo prevent data loss, an error object contains a JSON representation of the data of an object that caused the error.\n\n### 2.7 Preventing Synchronization Issues {#prevent-sync-issues}\n\nTo avoid the problems mentioned above, we suggest following these best practices:\n\n* Do not remove, rename, or change the type of entities or their attributes in offline apps after your initial release — this may cause objects or values to be no longer accessible to offline users (if needed, you can do an \"in-between\" release that is still backwards-compatible, and then make the changes in the next release after all the apps are synchronized)\n* Do not delete objects which can be synced to offline users (this will result in lost changes on those objects when attempted to synchronize them)\n* Avoid using domain-level validation for offline entities – use nanoflows or input validation instead (it is also a good practice to validate again on the server using microflows)\n* When committing objects that are being referenced by other objects, make sure the other objects are also committed\n\nIf synchronization is triggered using a synchronize action in a nanoflow and an error occurs, it is possible to handle the error gracefully using the nanoflow error handling.\n\n### 2.8 Conflict Resolution {#conflict-res}\n\nIt can happen that multiple users synchronize the same state of an object on their device, change it, and then synchronize this object back to the server. In this case, the last synchronization overwrites the entire content of the object on the server. This is also called a \"last wins\" approach.\n\nIf another approach is needed, conflicts can be detected in a before-commit microflow (for example, by using a revision ID attribute on the entity). Based on that, custom conflict resolution can be performed.\n\n## 3 Best Practices {#best-practices}\n\nTo ensure the best user experience for your Mendix application, follow these best practices:\n\n* Limit the amount of data that will be synchronized by customizing the synchronization configuration or security access rules\n* Because network connections can be slow and unreliable and mobile devices often have limited storage, avoid synchronizing large files or images (for example, by limiting the size of photos)\n* Try to synchronize through a nanoflow instead of a UI element so you can add error handling to the synchronization activity which can handle cases when synchronization fails (connection errors, model and data related errors, and more)\n* Synchronize large files or images using selective synchronization\n* Use an `isDeleted` Boolean attribute for delete functionality so that conflicts can be handled correctly on the server\n* Use before- and after-commit microflows to pre- or post-process data\n* Use a [microflow call](/refguide/microflow-call/) in your nanoflows to perform additional server-side logic such as retrieving data from a REST service, or accessing and using complex logic such as Java actions\n* Help your user remember to synchronize their data so it is processed as soon as possible: you can check for connectivity and automatically synchronize in the nanoflow that commits your object, or remind a user to synchronize while using a notification or before signing out to ensure no data is lost\n\n## 4 Ensuring Your App Is Offline-First {#limitations}\n\nMendix helps developers build rich offline-first apps. However, there are some limitations. See the subsections below for details.\n\n### 4.1 Microflows {#microflows}\n\nMicroflows can be called from offline apps by using [microflow call](/refguide/microflow-call/) action in your nanoflows to perform logic on the server. However, it works a bit different from when used in online profiles, these differences are explained below:\n\n#### 4.1.1 Microflow Arguments Type\n\n* Passing an object or a list of a persistable entity is not supported\n* Passing an object or a list of a non-persistable entity that has an association with a persistable entity is not supported (such an association can be an indirect association)\n* Passing a non-persistable entity that was created in another microflow is not supported for Mendix Studio Pro v9.7 and below.\n\n{{% alert color=\"info\" %}}\nIf you need to execute a microflow with a persistable object as parameter, you can define a before/after commit event handler on the desired persistable entity. When you create and commit an instance of this entity in the client and perform synchronization, the configured event handler(s) will run. \n{{% /alert %}}\n\t\n#### 4.1.2 UI Actions\n\nUI-related actions will be ignored and will not have any effect. We encourage you to model such UI-side effects in the caller nanoflow.\n\nThese actions are as the following:\n\n* [Show message](/refguide/show-message/)\n* [Show validation message](/refguide/validation-feedback/)\n* [Show home page](/refguide/show-home-page/)\n* [Show page](/refguide/show-page/)\n* [Close page](/refguide/close-page/)\n* [Download file](/refguide/download-file/)\n\n#### 4.1.3 Object Side-Effects\n\nChanges to persistable objects made in a microflow will not be reflected on the client unless you synchronize. Non-persistable objects must be returned in order for changes to be reflected.\n\n#### 4.1.4 Microflow Return Value\n\n* Returning an object or a list of persistable entity is not supported\n* Returning an object or a list of a non-persistable entity that has an association with a persistable entity is not supported (such association can be an indirect association)\n\n#### 4.1.5 Language Switching\n\nTo be able to switch the language of a Mendix app, a device must be online and have access to the Mendix runtime. For more information on the runtime, see the [Runtime Reference Guide](/refguide/runtime/).\n\n### 4.2 Offline Microflow Best Practices {#offline-mf-best-practices}\n\nTo make microflow calls work from offline-first apps, Mendix stores some microflow information in the offline app. That information is called from the app. This means that changes to microflows used from offline apps must be backwards-compatible, because there can be older apps which have not received an over the air update yet. All microflow calls from such a device will still contain the old microflow call configuration in nanoflows, which means that the request might fail. For more information on over-the-air updates, see [How to Release Over the Air Updates with Mendix](/howto/mobile/how-to-ota/).\n\nTo avoid backwards-compatibility errors in offline microflow calls after the initial release, we suggest these best practices:\n\n* Do not rename microflows or move them to different modules\n* Do not rename modules that contain microflows called from offline apps\n* Do not add, remove, rename, or change types of microflow parameters\n* Do not change return types\n* Do not delete a microflow before making sure that all devices have received an update\n\nIf you want to deviate from the practices outlined above, introduce a new microflow. You can change the contents of the microflow, but keep in mind that older apps might call the new version of the microflow until they are updated.\n\n### 4.3 Autonumbers & Calculated Attributes {#autonumbers}\n\nBoth autonumbers and calculated attributes require input from the server; therefore, they are not allowed. Objects with these attribute types can still be viewed and created offline, but the attributes themselves cannot be displayed.\n\n### 4.4 Default Attribute Values {#default-attributive}\n\n{{% alert color=\"warning\" %}}\nThis limitation applies only to Mendix 9.7 and below. Mendix 9.8 and above supports default attributes.\n{{% /alert %}}\n\nDefault attribute values for entities in the domain model do not have any effect on objects created offline. Boolean attributes will always default to `false`, numeric attributes to `0`, and other attributes to `empty`.\n\n### 4.5 Many-to-Many Associations {#many-to-many}\n\nMany-to-many associations are not supported. A common alternative is to introduce a third entity that has one-to-many associations with the other entities.\n\n### 4.6 Inheritance {#inheritance}\n\nIt is not possible to use more than one entity from a generalization or specialization relation. For example if you have an `Animal` entity and a `Dog` specialization, you can use either use `Animal` or `Dog`, but not both from your offline profile. An alternative pattern is to use composition (for example, object associations).\n\n### 4.7 System Members {#system-members}\n\nSystem members (`createdDate`, `changedDate`, `owner`, `changedBy`) are not supported.\n\n### 4.8 Excel and CSV Export {#excel-cv}\n\nExcel and CSV export are not available in offline applications.\n\n### 4.9 Hashed String Attributes {#hashed-strings}\n\nAttributes with the hashed string [attribute type](/refguide/attributes/#type) will not be synchronized.\n\n### 4.10 Access Rules with XPath Constraints {#access-rules}\n\nWhile working offline, offline-first apps cannot apply access rules with XPath constraints. For example, consider a `Customer` entity with `Locked` (Boolean) and `Name` (string) attributes. There is an access rule where the `Name` attribute of the customer is writable only when the `Locked` attribute is false. Changing and committing the `Locked` attribute’s value while offline will not change the read-only status of the `Name` attribute. Instead, this change will take effect after you synchronize the changed `Customer` object.\n"
  },
  {
    "file": "../docs/content/en/docs/refguide/mobile/progressive-web-app.md",
    "header": {
      "title": "Progressive Web Apps",
      "url": "/refguide/progressive-web-app/",
      "category": "Mobile",
      "weight": "2",
      "tags": [
        "mobile",
        "progressive web app",
        "PWA",
        "studio pro"
      ]
    },
    "body": "\n## 1 Introduction\n\nProgressive web apps (PWAs) are an evolution of traditional web apps. Overall, PWAs tend to behave more like native mobile apps, and their popularity is increasing. One difference and possible advantage of PWAs compared to hybrid and native mobile apps is that PWAs do not need to be distributed via an app store but can be accessed directly via the browser.\n\nProgressive web apps have three main characteristics:\n\n* **Installable —** PWAs let you add your app to your user's home screen and start a full screen app. This makes PWAs feel more fully-capable native apps.\n* **Reliable —** Using service workers, PWAs can work offline or partially offline. Mendix PWAs can work partially offline (resources like styling, pages, and images are cached) or fully offline (like hybrid offline and native mobile apps).\n* **Capable —** PWAs can leverage several device capabilities like the camera and location, and can offer support for web push notifications. Note that support for features depend on which browser is used.\n\n## 2 Enabling PWA Features\n\nAs PWAs are basically web apps with additional features, Mendix offers these features as a part of web navigation profiles. Based on what is needed, you can create a fully offline-capable PWA, or a web application that requires an internet connection but still uses PWA features.\n\nTo create a full offline-first PWA, choose and add one of the following profiles (depending on which form factor you need): Responsive Web Offline, Phone Web Offline, or Tablet Web Offline. For more information about offline-first apps, see the [Offline-First Reference Guide](/refguide/offline-first/).\n\n{{% alert color=\"info\" %}}\nOffline-first progressive web apps have some restrictions to make sure they can fully work offline. For more information, see the [Ensuring Your App Is Offline-First ](/refguide/offline-first/#limitations) section of the *Offline-First Reference Guide*.\n{{% /alert %}}\n\nWithin the navigation profiles the following PWA features can be configured:\n\n{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/settings.png\" alt=\"PWA settings\"   width=\"350\"  >}}\n\nTo be able to fully test PWA functionalities, the app needs to be deployed to the cloud. This is because the service worker is only enabled in the cloud over HTTPS.\n\n### 2.1 Publishing as a Progressive Web App\n\nWhen checked and deployed to the cloud, the app registers a [service worker](https://developers.google.com/web/fundamentals/primers/service-workers) that is the basis for PWAs. On offline navigation profiles, this option is always enabled. In online navigation profiles, enabling this option will also give the end-user a custom page when the device has no connection. Where desired, this page can be customized by adding an *offline.html* page to the theme folder (for example, *theme/offline.html*). Note that this page should not load any other resources over the network.\n\n### 2.2 Allowing \"Add to Home Screen\" Prompt\n\nWhen the **Add to Home Screen** option is selected, the end-user might be actively asked to add the app to their device's home screen or desktop. The behavior can differ per browser and over time. When unselected, the app can still always be added to the home screen, but the user will not be actively asked.\n\n### 2.3 Preloading Static Resources\n\nEnabling this option will make the app pre-load static resources like pages, images, and widgets in the background. This can aid performance. This pre-loading happens when a user opens the app for the first time, or when the model has changed. This makes the app feel faster when navigating to new pages. It comes at a cost, however, as it consumes more bandwidth and device storage initially.\n\nIn offline profiles, this feature is automatically enabled to allow the app to function fully offline.\n\nNote that all pages and images reachable in the navigation profile are loaded by the browser. This configuration can be undesirable from a security perspective, depending on your use case and requirements.\n\n## 3 Previewing or Testing a PWA\n\nPWAs can be directly viewed and tested in the browser on your machine or device. Via the **View** menu you can directly open the PWA profiles in your browser:\n\n{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/view-menu.png\" alt=\"View menu\" >}}\n\nYou can also open PWA profiles on your device via the **View on your device** option:\n\n{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/view-dialog.png\" alt=\"View menu\"   width=\"350\"  >}}\n\nNote that if you are running on a Mac with Parallels, make sure that port 8080 (or whichever port you have configured for your app) is forwarded and that you use your Mac IP instead of the Virtual Machine’s IP. For more information on Mendix and Parallels, see [How to Configure Parallels](/howto/general/using-mendix-studio-pro-on-a-mac/).\n\n{{% alert color=\"info\" %}}\nWhen previewing or testing an offline-first PWA locally, an internet connection is always required to load the app. After initial loading, the app behaves fully offline, but it can not be reloaded without a connection. Once the app is deployed to the cloud, end-users can always load it without a connection after the first visit.\n{{% /alert %}}\n    \n### 3.1 PWA Lighthouse Check\n\nTo check a PWA's capabilities, you can use [Lighthouse](https://developers.google.com/web/tools/lighthouse). Lighthouse is an open-source, automated tool for improving the quality of web pages. It can check if your app meets the progressive web app requirements and can offer suggestions for improving your web app.\n\n## 4 Distributing or Sharing the PWA\n\nAs PWAs are web apps, these can be shared easily by sharing the PWA's URL.\n\nWhen opening the app on a device or browser, Mendix automatically determines the navigation profile based on the user agent and the browser capabilities. If the browser does not support offline functionality, an online profile will be used instead.\n\nGoogle Chrome and Microsoft Edge (Chromium edition) fully support running offline-first apps.\n\n### 4.1 Example of Profile Selection\n\nFor example, when a Phone Web Offline profile is configured and the app is opened in the browser, the following scenarios can occur:\n\n| Device & Browser         | Result                                                                                                                                                         |\n| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Desktop browser          | Responsive Web profile is loaded                                                                                                                               |\n| Android - Chrome browser | Phone Web Offline profile is loaded                                                                                                                            |\n| iOS - Any browser        | If there is a Phone Web profile, this is loaded; otherwise, the Responsive Web profile is loaded. This is because offline PWAs are not (yet) supported on iOS. |\n\nNext to that, it is possible to force a profile by providing the profile name in the URL as a query parameter: for example `http://localhost:8080/?profile=PhoneOffline`. Possible profile values are as follows:\n\n| Profile Name           | Value in URL      |\n| ---------------------- | ----------------- |\n| Responsive web         | Responsive        |\n| Responsive web offline | ResponsiveOffline |\n| Phone web              | Phone             |\n| Phone web offline      | PhoneOffline      |\n| Tablet web             | Tablet            |\n| Tablet web offline     | TabletOffline     |\n\nWhen forcing a specific profile on a cloud deployment, it can be necessary to first clear the browser cache.\n\n## 5 Advanced Settings\n\nSee the sections below for information on advanced settings.\n\n### 5.1 Web App Manifest\n\nPWAs use a web app manifest that provides information to the browser about the application. Mendix generates one automatically based on the model. It can be customized for specific needs by changing the `manifest-overrides.webmanifest` *.json* file in the **theme** folder. The `background_color` and `theme_color` properties will often be useful to customize:\n\n```json\n{\n    \"background_color\": \"white\",\n    \"theme_color\": \"#0CABF9\"\n}\n```\n\nFor more information on the available properties in the web app manifest, read this [short introduction](https://web.dev/add-manifest/) or view [the full reference at MDN](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n\n### 5.2 Sessions\n\nOffline-first PWAs use long-lived sessions, which keep users logged in for a longer period even after their apps are closed. By default, users will be logged out after 7 days of inactivity. This can be customized using the *LongLivedSessionTimeout* runtime setting.\n\nFor more information on sessions and how to customize the timeout, see the [Session Duration](/refguide/tricky-custom-runtime-settings/#session-duration) section of the *Advanced Custom Settings in Mendix Runtime Reference Guide*.\n\n## 6 Accessing Device Features\n\nBrowsers offer access to device features through APIs that can be leveraged in PWAs. These device features can be used by available widgets and nanoflow actions. It is also possible to leverage additional device features by extending the platform using [JavaScript Actions](/refguide/javascript-actions/) or [Pluggable Widgets](/howto/extensibility/pluggable-widgets/).\n\nThis table lists the most used device features and APIs, and also documents their compatibility with common browsers:\n\n| Feature | Chrome/Edge | Firefox | Safari |\n|---------|-----------|-------|------|\n| [Camera](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} |\n| [Payment](/attachments/refguide/mobile/progressive-web-app/warning.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} |\n| [Credentials (Biometrics)](/attachments/refguide/mobile/progressive-web-app/warning.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [Push Notifications](/attachments/refguide/mobile/progressive-web-app/warning.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [Permissions](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [Foreground Detection](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} |\n| [Bluetooth](/attachments/refguide/mobile/progressive-web-app/warning.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [File Access](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} |\n| [Geo Location](/attachments/refguide/mobile/progressive-web-app/warning.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} |\n| [Battery](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [Share](/attachments/refguide/mobile/progressive-web-app/warning.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}} |\n| [Vibrate](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [Memory](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n| [Connection](/attachments/refguide/mobile/progressive-web-app/check-mark.svg) | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}} | {{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}} |\n\n**Legend** — The symbols above correspond to the following definitions:\n\n*  Fully compatible:\n\n\t{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/check-mark.svg\" alt=\"Fully compatible\" >}}\n\t\n*  Compatible only when using HTTPS protocol:\n\n\t{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/warning.svg\" alt=\"Compatible when using HTTPS\" >}}\n\t\n*  Not compatible:\n\n\t{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/cross-mark.svg\" alt=\"Not compatible\" >}}\n\nFor more information on browser support for certain device features, see the third-party website [Can I Use](https://caniuse.com/).\n\n{{% alert color=\"info\" %}}\nIn order to test the features requiring HTTPS protocol, use [ngrok](https://ngrok.com/) to enable features in your localhost.\n{{% /alert %}}\n\n## 7 Deciding Between a PWA or Native Mobile App\n\nMendix offers options to build both native mobile apps and PWAs. Depending on your app's requirements or constraints, one or the other can be a better fit. It is also possible to have both native mobile and PWA profiles in a single app, which can run next to each other and overlap significantly.\n\n{{% alert color=\"info\" %}}\nImportant limitation: Apple does not support push notifications for PWAs on iOS.\n\nCurrently, it is not possible to create a fully offline-first PWA for iOS — adding that support is part of our 2022 roadmap.\n{{% /alert %}}\n\nUse the following diagram to decide whether to build a PWA, a native mobile app, or both:\n\n{{< figure src=\"/attachments/refguide/mobile/progressive-web-app/native-or-pwa.png\" alt=\"Native app or PWA\"   width=\"350\"  >}}\n\n## 8 Read More\n\n* [Native Mobile Reference Guide](/refguide/native-mobile/)\n* [Offline-First Reference Guide](/refguide/offline-first/)\n* [Navigation Reference Guide](/refguide/navigation/)\n"
  }
]